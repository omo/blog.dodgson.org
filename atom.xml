<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[steps to phantasien]]></title>
  <link href="http://steps.dodgson.org/atom.xml" rel="self"/>
  <link href="http://steps.dodgson.org/"/>
  <updated>2015-03-28T14:49:40-07:00</updated>
  <id>http://steps.dodgson.org/</id>
  <author>
    <name><![CDATA[Hajime Morrita]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving]]></title>
    <link href="http://steps.dodgson.org/b/2015/03/28/moving/"/>
    <updated>2015-03-28T14:44:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2015/03/28/moving/</id>
    <content type="html"><![CDATA[<p><a href="http://anemone.dodgson.org/">anemone.dodgson.org</a> に<a href="http://anemone.dodgson.org/2015/03/a-flower-name/">移動</a>しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[祝: Atom の Web Components 導入、ついでに Atom Shell の話。]]></title>
    <link href="http://steps.dodgson.org/b/2014/12/21/atom-from-the-shell-side/"/>
    <updated>2014-12-21T16:54:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2014/12/21/atom-from-the-shell-side/</id>
    <content type="html"><![CDATA[<p>GitHub 謹製 <a href="http://atom.io/">Atom エディタ</a>が
<a href="http://blog.atom.io/2014/11/18/avoiding-style-pollution-with-the-shadow-dom.html">Shadow DOM を使い始めた</a>という。
めでたい。せっかくだから私も Atom を使ってみよう。
起動してテキスト書きもそこそこにインスペクタで DOM を眺める。
するとあら素敵。Shadow DOM のみならず Custom Elements もばりばり使われているじゃありませんか。
ためしにステータスバーをつついてみるとわかる。</p>

<p>Atom は UI を <a href="http://blog.atom.io/2014/07/02/moving-atom-to-react.html">React に書き直した</a>ものと思いこんでいたけれど、
React になったのはテキスト編集領域だけの様子。周辺の UI は Custom Elements ベースになりつつあるらしい。
もともと <a href="https://github.com/atom/space-pen">space-pen</a> という jQuery ベースの内製フレームワークで書いていたものを、
徐々に <a href="https://github.com/atom/atom/issues/4673#issuecomment-67402158">Custom Elements 化していくという</a>。
Atom, 意外と Web Components だな。知らなかったよ。</p>

<p><img src="https://farm8.staticflickr.com/7533/16076345992_dc751d4016_c.jpg" alt="screenshot" /></p>

<p>まずは Markdown エディタとして使っていこうと思う。書いたメモを簡単に公開する仕組みが欲しいと試行錯誤してきた、その延長で試したい。
公開できるメモは Markdown で書き、そのテキストを GitHub に push しておく。
ただし GitHub pages など整形の手間はかけず GitHub 本体の Markdown プレビューで読めるだけ。
一人 Qiita ごっこ&#8230;と呼ぶのすらはばかられる手抜き。</p>

<p>わざわざ共有するほどではないけど隠しておくまでもなく、
ただ整形されたものをどこからでも読みたい。
そんなメモならこの仕組みでいい&#8230;かもしれない。</p>

<p>習作も兼ね、ファイル保存時にファイルを commit+push するがさつなパッケージ
<a href="https://atom.io/packages/sync-on-save">sync-on-save</a> をつくった。メモとり支援。
これを使うとテキストがじゃんじゃんコミットされ、
GitHub の contributions チャートが全面緑になり、
虚栄心が満たされ、
GitHub を見て impressed なリクルータを煙にまくこともできます。</p>

<p>ステータスバーの表示に Shadow DOM と Custom Elements を使ってます。
記念にね。</p>

<h2>Atom Shell と Chromium</h2>

<p>Atom は Chromium をベースにした <a href="https://github.com/atom/atom-shell">Atom Shell</a>
と呼ばれる実行環境の上で動く。記念ついでに眺めてみよう。</p>

<p>CoffeeScript で書かれた沢山の細かいモジュール群が読む気を挫く Atom 本体に対し、
Atom Shell はけっこう小さい。しかも C++ が多くおっさんにやさしい。
Chromium 本体を <a href="https://github.com/brightray/libchromiumcontent">libchromiumcontent</a> という別プロジェクトに切り出しバイナリ配布しているためビルドも速い。</p>

<p>Chromium にはウェブページを表示する機能をまとめた
<a href="http://www.chromium.org/developers/content-module/content-api">Content API</a> がある。
Atom Shell はこの Content API の上に作られている。
Chromium の構造をよく理解した上で JavaScript の実行環境を作ろうと、
コンパクトながらよく練られている。</p>

<p>C++ で最低限のブートストラップを済ませ、
あとはアプリケーションから与えられた JavaScript を走らせる。
Atom Shell は Content API のうち必要そうな部分を <a href="https://github.com/atom/atom-shell/tree/master/docs/api">JavaScript の API</a> として公開しているので、
アプリケーションはその API を使ってウィンドウを開いたりなんだりする。
また Atom Shell には Node.js がリンクされている。
だから Atom Shell の上で動くプログラムは Node.js と Atom Shell 両方の API を使える。</p>

<p>雰囲気をつかむには入門ページの<a href="https://github.com/atom/atom-shell/blob/master/docs/tutorial/quick-start.md">サンプルコード</a> を眺めると良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BrowserWindow</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;browser-window&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mainWindow</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;window-all-closed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">platform</span> <span class="o">!=</span> <span class="s1">&#39;darwin&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mainWindow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">({</span><span class="nx">width</span><span class="o">:</span> <span class="mi">800</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">600</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">mainWindow</span><span class="p">.</span><span class="nx">loadUrl</span><span class="p">(</span><span class="s1">&#39;file://&#39;</span> <span class="o">+</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">mainWindow</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;closed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">mainWindow</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>この例だとあまり node っぽさがないけど、それでも <code>rquire()</code> がネイティブに動くのは
Node.js のおかげ。</p>

<p>GUI プログラムの定めとして Atom Shell のメインループは Chromium 側が握ってしまう。
なので Node.js でサーバを書くように自分でループを始めることはできない。
かわりにイベント駆動で書く。つまり Atom アプリケーションの基本的なパターンは、</p>

<ul>
<li>初期化が終わったタイミングの <code>ready</code>イベントでウィンドウを作り、好きな HTML を表示する。</li>
<li>HTML の中から飛んでくるメッセージに応じてなんかするコードを書く。</li>
</ul>


<p>となる。</p>

<p>さて、念のため復習: Chromium ベースのアプリケーションはページの中身を独立したプロセスで動かす。
そのプロセスを <em>renderer</em> と呼ぶ。
renderer プロセスを起動するのは browser プロセス…だけれど、
ブラウザでない Atom はこれを <em>server</em> と呼んでいる。</p>

<p>Atom Shell のアプリケーションは、というか Atom は、
おおむね JavaScript の <a href="http://en.wikipedia.org/wiki/Single-page_application">SPA</a> として書かれている。
だから大半のコードはページの中、renderer 側で動く。Server 側のコードは小さい。</p>

<p>これはブラウザである Chrome と比べると面白い。
Chrome の中を見ると、renderer で動くコードはほとんどが Blink。
残りのコードはだいたい browser (Atom Shell の server) 側で動く。
Blink 以外は renderer の外が多い。</p>

<p>この違いはどこからくるのか。まず Chrome の UI は renderer の外側で、C++ を使い書かれている。renderer の中に HTML と JS で UI を作る Atom とはまずそこが違う。
たとえば Atom のタブは renderer の中の HTML で、
Chrome のタブは browser 側の C++ だ。
結果として Atom のタブは切り離して他のウィンドウに移したりできない。
その前提でアプリケーションが作られている。</p>

<p>もう一つの違いは sandbox. Chrome の renderer は OS の sandbox によって保護されており、ファイルやソケットを読み書きするなど OS の機能をほとんど使えない。
Atom Shell は sandbox を使っておらずしかも Node.js がリンクされている。
だから renderer の裁量が大きい。割となんでもできる。
なにしろ DOM と Node.js を両方同時につかえる。ちょうべんり。
Atom の package (プラグイン) は基本的に renderer 側で動くコードしか書けない。
けれど野放しな Node.js のおかげで特に不自由しない。</p>

<h2>Node.js とイベントループ</h2>

<p>Chromium に偏った目で Atom Shell を見ると、いくつかの疑問が頭をよぎる。
思いついた順に三つ調べてみたので記録しておく。</p>

<p>その１: どうやって Node.js を Chromium に繋いでいるんだろう?</p>

<p>Node.js は <a href="https://github.com/joyent/libuv">libuv</a> をイベントループに使う。
Chromium のメインスレッドはプラットホーム毎の UI ツールキットがイベントループを握っている。
二つのイベントループをどう共存させたものか。素朴に考えるとそれぞれにスレッドを持たせたくなるけれど、
Node.js と Chromium が別のスレッドで動いてしまうと
Node.js のスレッドから Content API を呼んだりその逆をしたりできなくなる。</p>

<p>そこで Atom Shell は Node.js のイベントループを二つのフェーズにわけ、
一部の処理だけを別スレッドに移すことで二つのイベントループを単一スレッドに押し込んだ。
具体的には libuv でファイルハンドルを待ちブロックする部分だけを専用のスレッドに追い出す。
そしてハンドルがシグナルされブロックから抜けた直後にメインスレッドへ処理を戻して
続きの処理、つまり JavaScript のコードを動かす。</p>

<p>要するに別スレッドで <code>epoll_wait()</code> して続きはメインスレッドで引き取る。
そしてメインスレッドの処理が終わったらふたたび別のスレッドでハンドルを待つ。</p>

<p><a href="https://github.com/atom/atom-shell/blob/master/atom/common/node_bindings.cc">結果のコード</a>は簡単なものだけど、
そもそもこう書けると思いもしなかった外野の私は驚いた。
ループしたらさいご戻ってこないフレームワークが多い中、
libuv や Node の API はループを自分で持たず切り出しており、
おかげでこんな小細工ができる。えらい。</p>

<h2>IPC</h2>

<p>疑問その２: IPC はどうしてるの？</p>

<p>プロセスがわかれている以上、renderer と server の連絡には工夫が求められる。
Chrome はパイプでプロセスを繋ぎ、その上を流すメッセージで連絡すなわちプロセス間通信(IPC)をする。
Chromium はプロセスの間に一本しかパイプを持たない。多重化はユーザ空間が頑張る。</p>

<p>Chromium の C++ レイヤはいまいち頑張りが足らず、
マクロとかでなんとなく多重化や直列化を扱っている。けっこうめんどい。
なぜ Protobuf を使わない&#8230;と Chromium 開発者の二人に一人くらいは思っている(気がする)。</p>

<p>もうひとつの面倒。Chromium の IPC は基本的に 1-way である。メッセージに戻り値がない。
ただし例外として <em>SyncMessage</em> という仕組みがあり、
この特別なメッセージだけが戻り値を扱える。</p>

<p><code>SyncMessage</code> には性能上の懸念がある。
値が戻ってくるまで呼び出し側プロセスのイベントループを止まてしまうからだ。
そのためどうしても必要な時だけ使う荒技扱いされている。
たとえば JavaScript からクッキーの値を読むなんてのは <code>SyncMessage</code> のわかりやすいユースケース。
クッキーの値は browser(server) 側にあるから IPC が必要だけれど、
JS 側の API が同期的なためブロックして待たざるを得ない。</p>

<p>Atom Shell の <code>ipc</code> モジュールは Chromium の IPC を JavaScript に公開する。
概ね下のレイヤと同じデザインに倣っている。ただし JS のおかげで色々ラク。
たとえば多重化は Node.js の <code>EventEmitter</code> 風に書けるし、直列化は JSON を使えばいい。</p>

<p>Atom Shell の <code>ipc</code> も <code>SyncMessage</code> をサポートしている。
だからその気になれば <code>SyncMessage</code> をブロックして待てばよい。
Atom のパッケージなら性能にうるさいレビュアがでてきて非同期に直せと怒られはするまい。
遅くなりますけどね・・・。</p>

<h2>Remoting</h2>

<p>怒られるどころか、Atom Shell には <code>SyncMessage</code> の利用を後押しする機能がある。
<a href="https://github.com/atom/atom-shell/blob/master/docs/api/remote.md">remote</a> モジュールだ。</p>

<p>Atom Shell の <code>remote</code> モジュールは、低レベルな <code>ipc</code> モジュールの上に分散オブジェクトを実装している。
21 世紀のエディタを名乗るアプリケーションの中で
分散オブジェクトのような古代のテクノロジーを目にするとびびる。
<a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/drb/rdoc/DRb.html">dRuby</a>
が最後だとおもってたよ&#8230;</p>

<p>ただ JS らしく力の抜けた作りなのはよい。コードは 1000 行もない。シンプル。
JS の <code>object</code> と <code>function</code> にはスタブを作り、
それ以外 (<code>string</code> や <code>number</code>) はコピーする。<code>array</code> は浅いコピー。
(実装: <a href="https://github.com/atom/atom-shell/blob/master/atom/browser/lib/rpc-server.coffee">rpc-server.coffe</a>, <a href="https://github.com/atom/atom-shell/blob/master/atom/renderer/api/lib/remote.coffee">remote.coffee</a>)</p>

<p>面白いのは実装の一部に素の JavaScript にない v8 の機能を使っていること。
たとえば JavaScript には Java の finalizer にあたる機能がない。
でも分散 GC をするならスタブの寿命を別プロセスに伝えたい。finalizer が欲しい。
そして v8 には finalizer 相当の機能がある。
Atom Shell は v8 の C++ API を JS に公開し、<code>remote</code> からそれを使っている。
拡張部分は <a href="https://github.com/atom/atom-shell/blob/master/atom/common/api/atom_api_v8_util.cc">v8util</a> モジュールにまとめられている。</p>

<p>この <code>remote</code> モジュールのおかげで renderer でしか動かないはずの Atom パッケージも browser の API を呼びたい放題。ちょうべんり。特に Atom パッケージのコードを書いている限り server 側ではコードを動かせないから自然と <code>remote</code> モジュールを使うことになる。 <code>ipc</code> を使いたくても server 側を書けないからね。</p>

<p>そして <code>remote</code> 経由で取得したオブジェクトへのメソッド呼び出しは値を返すことができる。ここで <code>SyncMessage</code> が使われる。Chrome の開発者が満身創痍になりながら C++ で非同期なコードを書いている一方、
Atom の開発者はらくらく非同期言語 JavaScdript から容赦なく IPC をブロックしているのだった。
世間は厳しい。Server 専用の API は少ないので、実際の出番は少ないと思うけど。</p>

<p>それにしてもかつて <a href="http://www.mico.org/">Mico</a> を読もうとして分散オブジェクトわかんねーと絶望したのち
dRuby を読みこれならわかると感動したのも昔の話、いまは 1000 行未満か。
プロセス間通信とマシンをまたぐ分散じゃだいぶ複雑さが違うとはいえ、
世の中進歩してるなあ・・・と JavaScript を読んで思うとは想像しなかったなあ・・・。
見事でしたと<a href="https://github.com/zcbenz">書いた人</a>を讃えておこう。</p>

<h2>セキュリティ</h2>

<p>さいごの疑問: セキュリティはどうなってるの？</p>

<p>結論からうと、Atom Shell は特にセキュアでない。テキストエディタのセキュリティについてどうこう言うのは不毛な気もするけれど、ベースとなっている Chromium はまあまあセキュリティにうるさい子。Atom や Atom Shell がそれをどう解釈したかは
一度くらい気にしても良かろう。</p>

<p>Node.js が使えることからもわかるように、Atom Shell は renderer のサンドボックスをつかっていない。だから悪意のあるページを renderer で表示するのは安全でない。
セキュリティホールを突くまでもなく Node.js の機能でファイルが読める。</p>

<p>エディタで悪意のあるページってなんだよ、と思うかもしれない。
でも Atom の UI は HTML で作られているので、
たとえば <code>iframe</code> を使って別のページを表示することができる。
そういうことをするパッケージもちらほらある。
実際に Atom のリリース直後は <code>iframe</code> の中でも容赦なく Node.js の API が使えた模様。
今はさすがに直っている。</p>

<p><code>iframe</code> より厄介な XSS も一応おこりうる。最近の Atom は <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">CSP</a> に対応した。</p>

<p>Atom Shell は <code>iframe</code> よりもう少し融通の利く <code>webview</code> タグも<a href="https://github.com/atom/atom-shell/blob/master/docs/api/web-view-tag.md">用意している</a>。
<code>webview</code> は表示しているページが別プロセスで動く。なのでちょっとマシ。
セキュリティはさておき性能上の利点はあるとおもう。</p>

<p>ちなみにこの <code>webview</code> は Custom Elements として実装されており、
Shadow DOM の中にある <code>object</code> タグでは browser plugin というなんだそれ的コードが動いている。
Atom Shell の発明ではなく、Chrome Apps 由来の機能。</p>

<p>個人的には Atom Shell で Phantom.js のようなスクリプタブルブラウザを作れないかと思っていた。
この <code>webview</code> をがんばって育てれば何か楽しいことができるかもね。</p>

<p>以上三点、面白かったところ中心に書いてみました。
とくにオチはありません。強いて言うならみんなもつかおう Web Components.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リアルな DOM はなぜ遅いのか]]></title>
    <link href="http://steps.dodgson.org/b/2014/12/11/why-is-real-dom-slow/"/>
    <updated>2014-12-11T15:28:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2014/12/11/why-is-real-dom-slow/</id>
    <content type="html"><![CDATA[<p>これは <a href="http://qiita.com/advent-calendar/2014/virtual-dom">VirtualDOM Advent Calendar 2014</a> に勝手に参加する記事です。</p>

<p><img src="https://farm8.staticflickr.com/7163/6507047605_813604c68e_b.jpg" alt="calendar" /></p>

<p>あたたかい春の昼下がりのこと、あるブラウザベンダの社内を不穏な噂が駆け巡った。
「<a href="http://facebook.github.io/react/">React.js</a> なるライブラリ、どうも仮想 DOM というやつのせいで速いらしいぞ」</p>

<p>もうリアルな DOM はお役御免、ブラウザも商売上がったりか・・・。雇用に不安を覚える人(私)がいる一方、
そのアイデアをとりこんでブラウザの DOM を速く出来ないかと考える人たちもいた。
仮想 DOM はなぜ速いのか。誰かのつてを辿って React.js チームにおいでいただき、速さの秘密をテックトークしてもらう。
イミュータブルなデータ構造による単純化、非同期適用による処理のバッチ化、差分アルゴリズムによる副作用の最小化&#8230;</p>

<p>いくつかのアイデアはブラウザからはどうにもならないが、たとえば非同期化なんかは形は違えどブラウザにも取り込めそうだ。
高速化手法のブレインストーミングをはじめる人々。
一方で DOM のチューニングを得意とする高速化のエキスパートはクビを捻っていた。
世の中のサイトでプロファイルをとってみると DOM のオーバーヘッドは 10 パーセントもない。
たしかに DOM を速くすれば <a href="http://dromaeo.com/">Doromaeo</a> みたいな古のマイクロベンチマークは速くなる。
でもより実践的といわれる <a href="http://browserbench.org/Speedometer/">Speedometer</a> などには効きそうもない。
仮想 DOM って本当に速いのかしら・・・でも世の評判が嘘とも思えない・・・謎は深まるばかり。</p>

<p>一方、リアルな DOM はもうだめだ React.js でも勉強して仮想 DOM の冬に備えよう・・・
そう悲観した高速化の得意でないブラウザ開発者(私)は React.js をさわってみることにした。
実際に試すとなかなかよくできてる。そして速いと主張する理由もわかる。</p>

<p>ただ速さの工夫は仮想 DOM の表面的な売り文句から(ブラウザ開発者が)想像するものと少し違っていた。
そのギャップはブラウザ開発者とウェブ開発者の視点の違いに由来する溝だったし、
仮想 DOM という売り文句が React.js を単純化しすぎてるための溝でもあると思う。
今日はその溝を肴にリアルな DOM を眺めつつ React.js 版仮想 DOM の良さについて考えてみたい。</p>

<h2>リアルな DOM の仕事</h2>

<p>事実はさておき、リアルなDOMが遅いと思いたくなる理由もわかる。たしかに DOM は色々やってる。
こうした色々な仕事の大部分は fast path によってだいたいバイパスされる。現実のベンチマークを見る限り純粋な DOM の遅さからくる影響は小さい。
とはいえ API の裏でブラウザが何をしているか簡単に復習しておくと捗ることがあるかとしれない。ざっと眺めてみよう。</p>

<p>さて、まず 「DOM の仕事」とやらはいつ必要になるのだろう。
おおざっぱにいうと:</p>

<ul>
<li>DOM ノードの作成</li>
<li>作ったノードのツリーへの追加と削除</li>
<li>属性(attribute)の変更</li>
<li>イベント発行</li>
</ul>


<p>この四カ所で DOM の仕事が起こると思えばだいたい合ってる。順番に見て行こう。</p>

<h2>DOM ノードの作成</h2>

<p>要素名 (<code>html</code>, <code>div</code>, <code>input</code> &#8230;) から該当する HTML 要素のコンストラクタを引き当て、
DOM のオブジェクトを C++ のヒープに確保し、
適当にプロパティ(というかC++のメンバ変数)を初期化し、
必要なら JavaScript のラッパオブジェクトを作って返す。</p>

<p>オブジェクトの確保というとすごく大掛かりなイメージがあるけれど、
DOM ノードを作る作業は案外あっさりしている。作られたばかりのノードには大きな副作用がないからだ。</p>

<p>必要に応じ C++ と JavaScript の両方にオブジェクトを作らなければいけないぶん、
Javascript に閉じた仮想 DOM に比べてオーバーヘッドはある。数十バイトとかそんなもん。</p>

<p>副作用について、たとえば <code>img</code> や <code>input</code> なんかは画像データを HTTP で要求したり初期化すべきデータ構造が入り組んでいたり、
オブジェクトを作っただけでも追加のオーバーヘッドがある。
けれどこうした例外をのぞき、Document ツリーにつながれていない宙ぶらりんの DOM 要素は余計な仕事をしない。</p>

<h2>ツリーへの追加と削除</h2>

<p>大きな副作用がおこるのは DOM ノードがツリーに差し込まれた時だ。
このときは仕事が多い。一方で枯れ果てるほど高速化されてもいる。多くは fast path に入ってすぐ終わる。</p>

<p>仕事は整合性チェックからはじまる。DOMは <em>ツリー</em> でないといけない。
親子関係が循環してもいけないし、<code>DocumentFragment</code> や <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">Attr</a> など
一部のマイナー要素には SGML/XML 由来の奇妙な親子関係の制限がある。</p>

<p>チェックがおわると、追加される子ノードを古いツリーから切り離して新しいツリーに差し込む。</p>

<p>切り離しや追加に際し、ブラウザは対象となる DOM ノードとそのサブツリーをトラバースし、各種状態を更新する。
ノード追加くらいでトラバースすんなよと思うでしょ。でもまあ、色々仕方ないのですよ・・・。
昔は追加と削除あわせて 4, 5 回くらいトラバースしてたけど、今は追加削除それぞれ 1 回ずつに落ち着いた。
ツリートラバースを一回減らすと 一部 DOM ヘビーなベンチマークが数パーセント良くなる、くらいのオーバーヘッド。</p>

<p>ツリー構造の変化は、<a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">MutationObserver</a> API を通じて JavaScript の世界にも知らされる。
この通知作業もタダではない。ただしアプリケーションが MutationOberver API を使っていない限りオーバーヘッドはない。
(レンダラは &#8220;MutationObsever 利用中&#8221; フラグを立てて利用状況を記録している。他にもこういうヘンなフラグをいっぱい使って余計な作業をはしょってます。)</p>

<p>DOM 要素の中には、ツリー構造の変更に応じ副作業を起こすものがある。
そうした副作用は、多くが DOM ノードから親の Document が到達可能になったとき&#8230; ジャーゴンを使うと &#8220;in-document&#8221; フラグが立ったときとき &#8230; におこる。</p>

<p>この in-document フラグが立つと、たとえば <code>script</code> 要素なら中身のスクリプトを実行するし、外部ファイルがリンクされていればダウンロードをはじめる。
スタイルシートの追加も似たような感じ。ただこういうのは隠れたコストというより必要な仕事だ。リアルな DOM の遅さに数えるのは酷だとおもう。甘いですかね・・・。</p>

<h3>レンダリングと遅延アタッチ</h3>

<p>In-document フラグにともなう副作用のうちいちばん影響が大きく、よく知られているのがレンダリングだろう。</p>

<p>レンダリングには大きく分けて三つのフェーズがある:</p>

<ul>
<li>スタイルの引き当てを含むレンダリングツリーの構築、</li>
<li>レンダリングツリー上でのレイアウト計算、</li>
<li>そしてレイアウト結果に基づく画面のペイント。</li>
</ul>


<p>古い WebKit や Blink は、DOM ツリーを操作するたびに最初のステップ、レンダリングツリーの構築がおきていた。
追加したノードに紐づくレンダリングツリーを継ぎ足す。残りのステップであるレイアウトや描画は、少し後から必要に応じておきた。</p>

<p>最近の WebKit/Blink は、レンダリングツリーの更新自体もなるべく先送りする。これを <em>遅延アタッチ</em> (lazy attach) という。
たとえば同じ DOM ノードを足して、引いて、また足すと、最初の足し引きに伴うレンダリングツリーの更新は無駄だ。
jQuery なんかで何も考えず DOM をさわるとそんな無駄が起こる。遅延アタッチはこうした無駄の影響を小さくする。
新しい Safari で Speedometer が速くなったのは遅延アタッチ導入が影響が大きいとのこと。</p>

<p>「少し後から」行われるレイアウト計算や画面描画も、その細かいタイミングには議論の余地がある。
理想的には画面を描画する直前だけ、つまり最大でも 1 秒に 60 回だけで済ませたい。
ところが従来の Blink は必要以上にこの再計算が呼び出され性能を損ねていた。
それを 1-2 年かけてちまちまと直し続け、余分な計算はほぼ駆逐された。レイアウトやペイント自体もずっと速くなった。</p>

<h3>Uninterruptible reflow と RAF</h3>

<p>ただし行儀の悪いアプリケーションでは遅延アタッチの効き目も限られる。
アプリケーションからレイアウト結果を問い合わせる API が使われてしまうと、先送りができなくなるからだ。
たとえば <code>Element#offsetLeft</code> なんてのはレイアウト結果そのもの。
このプロパティをさわった瞬間に強制レイアウトが起こり画面が固まる。</p>

<p>どうでもいい豆知識としては, Blink のテストの中にはわざとレイアウトを引き起こすために
<code>offsetLeft</code> や <code>offsetTop</code> をさわっているコードが沢山ある。<code>offsetLeft</code> がだんだん <code>forceLayout()</code> に見えてくる。</p>

<p>強制レイアウトは WebKit/Blink に限らず、遅延アタッチ以前から広く知られた問題でもある。
Gecko 界隈の人がこの強制レイアウトを <em>Uninterruptible reflow</em> と呼び、
<a href="http://paulrouget.com/e/fxoshud/">同じ問題を議論している</a>記事もある。
(そしてこの名前の方がかっこいいかもしんない。ていうか Gecko は　reflow を interrupt できるのね&#8230;)</p>

<p>過剰なレイアウト計算は長らくウェブ開発者から敵視されてきた。
レイアウトを起こす API をうっかり呼び出した時の被害を最小化するため、そして遅延アタッチ導入以前にあったオーバーヘッドを避けるため、
React や Ember など今時のフレームワークは DOM ツリーの操作タイミングをバッチ化する仕組みを持っている。
ブラウザ側もバッチ適用のタイミングを伝える <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame">requestAnimationFrame()</a> API (略して RAF) を公開している。</p>

<p>React は<a href="http://stackoverflow.com/questions/21352587/does-react-use-requestanimationframe-if-so-how-does-it-use-it">標準では RAF を使わない</a>。
おそらく JavaScript でなにかをアニメーションするユースケースを重く見ていないのだろう。
リンク先の Stackoverflow 記事では RAF を使うプラグインが紹介されている。React で 60fps したい人は使うといいかもしんない。</p>

<h3>「DOM の」オーバーヘッド?</h3>

<p>ところでブラウザ開発者はレンダリングの時間を DOM の遅さに数えない。なぜならレンダリングはレンダリングモジュールの仕事だから。
プロファイル結果に DOM のオーバーヘッドが見つからず困っていた開発者は純粋な DOM の遅さについて気にかけていた。
でもウェブ開発者が文句をいう DOM の遅さは大半がレンダリング由来だったりする。</p>

<p>そんなすれ違いを防ぐため、遅いと苦情をうけた近隣のブラウザ開発者はまず「Tracing のデータをよこせ」と答えるようになった。
<a href="http://www.chromium.org/developers/how-tos/trace-event-profiling-tool">Tracing</a> は詳しくてわかりにくい Chrome 組み込みのプロファイラ。
そのダンプを睨むとボトルネックがわかることが多い。実際に動かせるサイトを触らせろと言うより敷居が低いせいか、対話の助けになっている模様。</p>

<h2>属性の変更</h2>

<p>DOM のオーバーヘッドに話を戻そう。</p>

<p>DOM 要素の属性を書き換えるのも、ツリーのノード操作と似たオーバーヘッドがある。
<code>img</code> や の <code>src</code> 属性や <code>link</code> の <code>href</code> 属性を書き換えれば新しいリソースのロードが始まるし、スタイルの再計算も起こる。</p>

<p>素朴に考えるとあらゆる属性の変更は潜在的にスタイルの再計算を起こしうる。
WebKit/Blink はスタイルシート側で使われているセレクタの種類(クラス名や属性名など)をトラックし、
再計算を最小限に抑えようとしている。ただ少なくとも「再計算が必要ないことをチェックするコスト」は支払わないといけない。
ハッシュ表をちょこっと検索するだけの大したことない処理だけど。</p>

<p>そのほか <code>id</code> 属性を変えると <code>getElementById()</code> で使う索引を無効化しないといけないとか、
<code>style</code> 属性を変更するとスタイルの再計算をトリガーするとか、細かい話は色々ある。でもそれほど意外性はないので割愛。</p>

<h2>イベントの発行</h2>

<p>DOM のイベント処理も、それなりに重い処理としてよく引き合いに出される。
イベントの伝播するパスを事前に計算し、順番にトラバースしてイベントハンドラを呼び出していく。
遅そう・・・だけれど、現実にはアプリケーションの登録したイベントハンドラの処理時間が全て。
ツリー操作や属性の変更よりも頻度が少ないため、イベント配信でブラウザの遅さが問題になった話は聞いたことが無い。</p>

<h2>ネイティブコール</h2>

<p>DOM の API 呼び出しに際し JavaScript -> C++ 境界をまたぐコストもオーバーヘッドの一つに数えることは出来るだろう。
このオーバーヘッドはブラウザによって異なる。古い Blink では JavaScript から C++ に入るとき毎回スレッドローカル変数へのアクセスがおき、
そのせいで他の処理系よりやや遅かった。もうだいたいなおっているはず。</p>

<p>そのほかの影響。ネイティブコードが JavaScript 処理系の最適化処理を邪魔するのは今も昔もかわらない。
たとえばネイティブコードの中身が副作用フリー(pure)かどうか、処理系にはわからない。
そのせいでできない高速化がある。理論上できないものの他に、実装が大変なせいで高速化が後回しにされているケースもある。
高速化しそこねるオーバーヘッドがどのくらいなのか、簡単なプロファイリングではわかりにくい。小さいながら厄介な遅さではある。</p>

<h2>リアル DOM の遅さ = 仮想 DOM の単純さ</h2>

<p>こうしてみると、深く考えるまでもなくリアル DOM に対する仮想 DOM の優位は明らかだ。
仮想 DOM は、すくなくとも React に限って言えば単なる JS オブジェクト。リアルな DOM とちがって構造の整合性のチェックなんていらないし、
構造の変更に応じたイベントのバブルアップもリソースローディングもレンダリングもない。JS/C++ 境界もない。Null を渡してブラウザが落ちることも無い。
そもそも React の仮想 DOM はツリー構造を変更できない・・・というと語弊があるけれど、
少なくとも React 版仮想 DOM の一部 <code>ReactElement</code> のツリー構造はイミュータブルだ。いろいろラクすぎる。</p>

<h2>React.js の仮想 DOM</h2>

<p>そうした所与の単純さのみならず、React.js は更に軽量化の工夫をしている</p>

<p>&#8230;なおここからは主に React.js を使う気のないブラウザ開発者向けの React 入門です。
同 Advent Calendar のエントリ &#8221;<a href="http://qiita.com/koba04/items/de79f158cd1f59ba5d20">React.jsのVirtualDOMについて</a>&#8221; と重複しておりますので
詳しい人のちゃんとした説明が欲しい人はリンク先を読んでくださいね。</p>

<h3><code>ReactComponent</code></h3>

<p>さて React.js における仮想 DOM の実体は <em>ReactComponent</em> とよばれるオブジェクトだ。</p>

<p><code>ReactComponent</code> はざっくりいうと Backbone や Ember の View みたいなもの。状態と(仮想 DOM)サブツリーをカプセル化する。
開発者は自分のコンポーネントを定義し、それを組み合わせて使う。
コンポーネントはネストしてツリー構造を作る。</p>

<p>コンポーネントはユーザ定義のものだけでない。
そのほかに単一の DOM 要素をあらわす特別なコンポーネント <code>ReactDOMComponent</code> がある。
<code>ReactDOMComponent</code> とユーザ定義の <code>ReactComponent</code> はまぜて使える。そういう意味で <code>ReactComponent</code> は仮想 DOM における
<a href="http://w3c.github.io/webcomponents/spec/custom/">Custom Elements</a> と言えなくもない。</p>

<p>React はこのコンポーネントツリーをトラバースしてリアルな DOM ツリーを作る。
ユーザ定義の <code>ReactComponent</code> は最終的な DOM ツリーに姿を見せない。<code>ReactDOMComponent</code> だけがリアル DOM にマップされる。仮想っぽい。</p>

<h3><code>ReactElement</code> と <code>render()</code></h3>

<p>開発者はどうやってコンポーネントを組み合わせるのか。
よくあるフレームワークと違い、React では各コンポーネントが自らネストしたコンポーネント・サブツリーを作ることはしない。
かわりに <code>render()</code> というメソッドを定義し、その戻り値を通じ React のフレームワークに 「こんなサブツリーを作ってくれ」とたのむ。
React はサブツリーが必要なタイミングでコンポーネントの <code>render()</code> を呼び出し、必要なサブツリーの形を調べる。</p>

<p>使う気無い人むけなんで雰囲気用に<a href="http://facebook.github.io/react/docs/tutorial.html">サンプル</a>をコピペしときますね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">CommentBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;commentBox&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">CommentList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">CommentForm</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>render()</code> なんてどのフレームワークにもあるじゃん。そう思うかもしれないけれど、React の <code>render()</code> は少し意味合いが違う。
各 <code>render()</code> は <code>ReactComponent</code> のかわりに <em>ReactElement</em> と呼ばれるオブジェクトのツリーを返す。
<code>ReactElement</code> はコンポーネントのコンストラクタと引数を詰め合わせたファクトリオブジェクト。
<code>RenderElement</code> のツリー = エレメントツリーは、子となるコンポーネントたちのツリー構造をあらわすテンプレートだ。</p>

<p>雑多な状態を抱え込む <code>ReactComponnet</code> と違い、<code>ReactElement</code> はコンポーネントのコンストラクタ呼び出しに必要な最低限の情報しかもっていない。だから軽い。
そしてコンストラクタの引数が等しい <code>ReactElement</code> のインスタンスは・・・たとえばサンプルの JSX にある <code>&lt;CommentForm /&gt;</code> みたいに子要素も変数プロパティも持たないものは・・・
<a href="https://gist.github.com/sebmarkbage/d7bce729f38730399d28">インスタンスを共有、再利用できる</a>。いわゆる <a href="http://en.wikipedia.org/wiki/Flyweight_pattern">Flyweight</a> というやつ。</p>

<p>このように、 React.js の仮想 DOM 実装は宣伝から想像するモデルと少し違う: まず長寿でステートを持ちそれなりに重い <code>ReactComponent</code> の <em>コンポーネントツリー</em> がある。
そしてコンポーネントツリーの変更が必要になるたびにフレームワークがコンポーネントに問い合わせ、軽量な <code>ReactElement</code> の <em>エレメントツリー</em> を手に入れる。</p>

<h3>差分計算とリアル DOM の状態更新</h3>

<p><code>render()</code> が返した新鮮なエレメントツリーと既存のコンポーネントツリーを比較しながら、フレームワークはコンポーネントの状態を更新する。
必要なら新しいコンポーネントインスタンスをつくり、余って要らないものは消す。既存のコンポーネントが使い回せるなら属性を上書きして済ます。
この更新トラバーサルの中で色々呼ばれるフックを介し、 <code>ReactDOMComponent</code> はリアル DOM の状態を更新する。これが噂の差分計算。</p>

<p>差分計算という名前から新旧のツリーは同じ種類のものと思っていたかもしれない。
でも実際は重くて永続するコンポーネントツリーと軽い一過性のエレメントツリーを比較する。
<code>ReactElement</code> ってなんだよそれ！仮想 DOM ですらなくね？リアル DOM シンパとしては苦情を申し立てたくなる。
実際のところ、古いバージョンの React は <code>render()</code> がコンポーネントツリーをつくっていた。<code>ReactComponent</code> と <code>ReactElement</code> は、後になって高速化のため切り離された。</p>

<p>リアル DOM 派(私)からの苦情を脇に置けば、全てを <code>RenderComponent</code> で表現するより <code>RenderElement</code> を分離する方が速いのは確かだ。
それにこの実装&#8230;ステートフルなコンポーネントツリーにエレメントツリーというテンプレート経由で状態をセットする&#8230;をそのままメンタルモデルとして受け入れる方がわかりやすいと、個人的には思う。
「イミュータブルな仮想 DOM でデルタ計算が・・・」とか言われると未来的すぎて中年はつらい。ステートおじさんといわれても仕方ない・・・。</p>

<h3>遅延ツリー</h3>

<p>React.js の差分計算には、面白い高速化の工夫がもう一つある。コンポーネントが定義する別のフック <code>shouldComponentUpdate()</code> だ。</p>

<p>React の差分計算はコンポーネントツリーを親から子に DFS する。一般にこうした探索ではなるべく余計な子への訪問を減らす (prune する) のが定石。
React は各訪問先でコンポーネントの <code>shouldComponentUpdate()</code> を呼び、<code>false</code> を返したコンポーネント、およびその子の処理は prune する。</p>

<p>React は処理を省いたコンポーネントの <code>render()</code> を呼びださない。
つまりサブコンポーネントをあらわす <code>RenderElement</code> は必要になる時まで作られない。これがちょっと面白い。</p>

<p>たとえば先のサンプルでは <code>CommentBox</code> のサブコンポーネントに <code>CommentForm</code> があった。
ここで開発者が <code>CommentForm#shouldComponentUpdate()</code> に <code>false</code> を返しておけば、
<code>CommentForm#render()</code> は初回のコンポーネントツリー構築時に一回呼ばれるだけですむ。</p>

<p>要するに状態の影響する単位で HTML をコンポーネントに切り出して必要なフックを足せば、
そのコンポーネントのサブツリーは必要になるまで比較されない。比較相手のエレメントツリーも作られない。おトクだ。</p>

<p>別の見方をするとエレメントツリーは遅延リストならぬ遅延ツリーだと言える。
枝狩りという目的からすれば当たり前の結論だけれど、状態更新のたびにツリーを丸ごと比較すると思いこんでいた外野の私は驚いた。
それツリー比べてなくね？リアル DOM 派として虚偽広告を非難したくもなる。でもまあ、全体のデザインとしては自然。正しい。
遅延ツリーによって、変更が及ばない部分のツリーは生成自体をまるごとスキップできる。これなら性能上の主張も腑におちる。</p>

<p>件のコールバック <code>shouldComponentUpdate()</code> は単に状態 (states と、場合によっては props) を比較すればいいだけ。実装は難しくない。ただ JavaScript で入り組んだ値を比べるのはちょっとめんどい。
Facebook はこの比較を堅牢にする不変コレクションライブラリ <a href="https://github.com/facebook/immutable-js">Immutable.js</a> なんてのまでつくっている。
まじファンクショナルだな・・・とおもいきやライブラリ公開時点だと<a href="https://news.ycombinator.com/item?id=8107447">実践投入はまだ</a>とのこと。</p>

<h2>仮想 DOM の速さ = React.js のがんばり</h2>

<p>失業への恐れからはじまった私の React 入門は、こうしてまあまあ実りのある調べものとなった。</p>

<p>リアルな DOM と比べ仮想 DOM はなぜ速いのか？
リアルな DOM が持つ各種オーバーヘッドを最小化するバッチ化や差分適用はたしかに性能を助けているだろう。
でもそれを足場に積み上げたフレームワークとしての細かい工夫は無視できない。
不変性を駆使して軽量化された <code>ReactElement</code>, ツリーの遅延評価、コンポーネント側の力を借りたトラバースの pruning. こうした工夫の組み合わせで
DOM のオーバーヘッドだけでなく JavaScript 側の計算量をも小さく留めている。</p>

<p>ブラウザもリアル DOM のオーバーヘッドを減らす努力をしており、アプリ側のバッチ化なんかはやがて過去のものとなるだろう。
ただリアル DOM のオーバーヘッドが小さくなったとしても、JS 側の計算量を小さく抑えつつステートレスの幻想を与えてくれる React.js の戦略は意味を持ち続ける気がする。</p>

<p>仕事柄 Web Components と仮想 DOM の関係も気になる。ステートフルな <code>ReactComponent</code> とステートレスな <code>ReactElement</code> の分離は興味深い。
<code>ReactComponent</code> も Custom Elements も <a href="https://github.com/reactjs/react-future/blob/master/01%20-%20Core/01%20-%20Classes.js">ES6 のクラスになろうとしている</a>。
<code>ReactComponent</code> のようなステートフルなコンポーネントが Custom Elements になり、
その Shadow DOM を更新するのに <code>ReactElement</code> 相当の軽量構造化テンプレートを使う・・・とかなんとかやればいいのかねえ。わからん。</p>

<p>React.js が積極的に Web Components を取り込むとは思えない。
<a href="https://github.com/reactjs/react-future/tree/master/02%20-%20Web%20Components">react-future の Web Components セクション</a>には TBD ファイルがおかれているだけ。
でも Web 標準好きの Ember や Polymer がそういう方向に進むと面白いのになあ。期待しつつ眺めている。
Ember.js は <a href="https://github.com/emberjs/rfcs/pull/15">2.0 で仮想 DOM を使うと言っている</a>。それがどんな姿をとるのかは、気が向いたときにでも調べたい。</p>

<p>そう言いつつも仮想 DOM があまり幅を利かせるのもなんとなくむかつくので、
しばらくはステートフルおじさんとして「仮想 DOM なんて所詮インクリメンタルアップデートに対応した構造化テンプレートでしょ」とプロパガンダを流しつつ
リアル DOM を応援していきたい所存です。あらあらかしこ。</p>

<ul>
<li>写真: <a href="https://flic.kr/p/aV1jxX">https://flic.kr/p/aV1jxX</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Porn]]></title>
    <link href="http://steps.dodgson.org/b/2014/12/07/reactive-porn/"/>
    <updated>2014-12-07T21:37:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2014/12/07/reactive-porn/</id>
    <content type="html"><![CDATA[<p><img src="https://farm5.staticflickr.com/4135/4738461246_527da9171d_z.jpg" alt="porn" /></p>

<p><a href="http://rebuild.fm/">Rebuild.fm</a> に<a href="http://rebuild.fm/70/">出させてもらいました</a>。ありがたいことです。</p>

<p>さっそく録音を聞き直す。自分の声を聞くのは辛い・・・のはさておき、
リアクティブプログラミングの話は我ながら主張がよくわからない。
反省のため何が言いたかったのかを考え直したい。</p>

<p>たぶん趣旨は二つあった:</p>

<ul>
<li>A. <a href="https://github.com/ReactiveX/RxJava">RxJava</a> や <a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a> はなかなかいいやつだ。</li>
<li>B. リアクティブプログラミングは一つのはっきりした概念ではない。</li>
</ul>


<p>A については試してもらえばわかるはず。ReactiveX のサイトからぽつぽつ資料を読めば済む。ここでは B を補足してみる。</p>

<h2>X 指向は Y みたいなもの</h2>

<p>リアクティブプログラミングとは何だろう。どうもつかみどころがない。私は腑に落ちるまでけっこう時間がかかった。</p>

<p>このわかりにくさには大きく二つ理由があると思う。一つはプログラミングの概念をコードなしに説明する一般的な難しさ。オブジェクト指向とは・・・関数型言語とは・・・相手に馴染みのない言葉を短く説明するのは難しい。もう一つの理由は、いくつかの異なった流派が我こそはリアクティブプログラミングだと主張していること。目的意識はみな似てる。でも解決方法が違う。</p>

<p>一つ目の理由、抽象的な話のわかりにくさは、リアクティブプログラミングに限った話ではない。そしてこれもリアクティブに限らず、混乱を招く冴えないメタファが理解の邪魔をする。オブジェクト指向ってのはね、乗り物とクルマ、動物と犬みたいなもんなんだよ。関数型言語は参照が透明で数学みたいなんだよ・・・。</p>

<p>この手のメタファを聞かされて、うるせえエラそうにわけわからんポエム読みやがって・・・と思ったひと。あなたは一人じゃない。冴えないメタファを口にしてしまう病を、私は &lt;<a href="https://www.google.com/?q=is+like+sex#q=is+like+sex">X is like sex</a> 症候群> と呼んでいる。話す側を高慢に、聞く側を不愉快にする比喩がある。
何かを自慢したい瞬間は誰にでもある。だけどできるものならポエムよりポルノでありたい。</p>

<p>二つ目の理由、いくつかの派閥が違う話をしている現状。これを真面目に相手にするのはしんどいかもしれない。でも入党せずに各党の得意技を冷やかすだけならそれなりに楽しい。あとで私が勝手に分類した派閥たちをざっと紹介し、にわかのリアクティブ語りとしてティーザーを気取ってみたい。</p>

<h2>エクセル小咄</h2>

<p>リアクティブプログラミングにとってのまずいメタファ、リアクティブの犬とクルマは何か。それはエクセルだとおもう。リアクティブってのはね、変数がエクセルのセルみたいになってる世界なんだよ・・・リアクティブプログラミングをそんな風に説明することがある。たしかに古典リアクティブプログラミングは値の自動更新を強く押し出したし、嫌われ者のエクセルくんが意外な一面を見せるストーリーも小気味良い。この話を披露したい気持ちはわかる。</p>

<p>一方、このごろ流行っているリアクティブ・プログラミングの実装は特段エクセル的ではない。メタファとしてのエクセルは現実とのズレが大きく、理解を助けるかわりに混乱を招いている気がする。</p>

<p>もう一つわかりにくいのは、エクセルが「リアクティブプログラミングを実現するプログラミング環境」なのか「リアクティブプログラミングを使ったアプリケーションの一例」はっきりとしないところ。たぶんもともとは後者だったのが、前者のような解釈もできると茶々を入れる<a href="http://lambda-the-ultimate.org/node/2710">人々があとから現れ</a>混乱を招いた。（そしてエクセル自体も驚異の進化を遂げほんとに高性能分散計算プラットホームになってしまった。やばい。)</p>

<p>いずれにせよ今時なリアクティブのメタファとしてエクセルの筋の悪さに変わりはない。リアクティブ・エクセル童話は聞かなかったことにするのが良いとおもう。</p>

<h2>データバインド・リアクティブ</h2>

<p>エクセルのメタファはいまいちだ。でも自動で値が更新される変数というコンセプト自体には使い道がある気もする。各種 GUI フレームワークのデータバインディング (特に two-way data binding)と呼ばれる仕組みはまさにそれを実現している。だからデータバインディングは古き良きリアクティブの末裔と言えなくもない。</p>

<p>とはいえデータバインディングは新しいコンセプトではない。そして最近のリアクティブプログラミング実装とデータバインディングは、無関係ではないにせよ毛色が違う。だから今リアクティブについて調べるなら、データバインディングは主流外の別物と見なす方が混乱しない。いつか二つの点が線になる瞬間は来る、かもしれない。でもそれは達観ポエムを書く中年にむけたインスピレーション。わかりやすいポルノじゃないよね。</p>

<p>エクセルのメタファで説明できるリアクティブプログラミングを、今日は乱暴に「ダータバインド・リアクティブ」と呼ぼう。</p>

<h2>アクター・リアクティブ</h2>

<p>最近のリアクティブプログラミングって何なのかしら。そうおもってウェブを眺めていると、妙に目に付く資料がある。<a href="http://www.reactivemanifesto.org/">Reactive Manifesto</a> だ。(どこかに翻訳もあるはず。) Manifesto というだけあって、この文書は自分語りに近い。ポルノじゃなくてポエム。ただしこのポエムに共感する人は多いらしい。</p>

<p>中身に深入りするかわりに、ポルノ・レポーターとして書き手の出自を暴くことにしよう。<a href="https://github.com/reactivemanifesto/reactivemanifesto">原典のレポジトリを見る</a>。どうやら主著は Scala の Actor フレームワーク <a href="http://akka.io/">Akka</a> の開発者らしい。つまり Reactive Manifesto は「Actor で書けばスケールして速いコードになるよ、それが流行の Reactive ってもんだよ」と主張するためのプロパガンダとして捉えることができる。ポエムの常として具体的なコードの話はせず、手強い問題や愛すべき形容名詞を並べ幅広い人々に訴える。</p>

<p>・・・と下世話に書いてみたものの、Reactive Manifesto の問題意識はたしかに最近のリアクティブプログラミングが目指す大きなゴールを捉えてはいる。</p>

<p>そして Erlang や Akka をはじめとする Actor ベースのネットワーク・ミドルウェアが最近のリアクティブ・プログラミングに関わっているのは間違いない。
これらをざっくり「アクター・リアクティブ」とでも呼んでおこう。</p>

<p>Actor も特に新しいアイデアではない。ただクラウドに CPU をいっぱいならべてじゃんじゃんデータを処理する新しい文脈でその力が再発見され、
名札と実装を新調し売り出している。</p>

<h2>フューチャー・リアクティブ</h2>

<p>理論的背景に興味のないプログラマから見ると、 Actor は非同期なメッセージング機構を中心にコードを組み立てるプログラミング・モデルの一つにすぎない。
なぜ非同期だと性能やスケーラビリティに良い影響があるのか・・・は人々の詩心を誘いがちなので今は目をそらし、
同じ問題に取り組むもう一つの有力なアプローチを眺めてみよう。
それは Twitter の <a href="https://twitter.github.io/finagle/">Finagle</a> に見られるような、
<a href="http://docs.scala-lang.org/overviews/core/futures.html">Future</a> を中心に据えたプログラミング・モデル。</p>

<p>Actor も Future も、非同期にとびかうメッセージをノンブロッキングに捌くための抽象化手法だった(※ Erlang のことはひとまず忘れてください)。
要求と応答の対がはっきりしているなら Future が簡潔だし、データがストリームとしてプッシュされてくるなら Actor が強い。</p>

<p>Future 党の人々は自分自身がリアクティブだと強くは主張しない。だから影が薄い。けれど扱う問題領域は似ているし、アプローチも次に紹介する Rx ファミリーに近い。私からみると十分リアクティブに見える。だからこれを「フューチャー・リアクティブ」と数えておくことにしよう。</p>

<h2>ファンクショナル・リアクティブ</h2>

<p>Actor と Future は、それぞれ一長一短がある。</p>

<p>Actor のモデルでは、ブロッキングに頼らない限り要求と応答の対を扱うコードが少し不自然になる。Future をつかうと Actor では見えにくかった要求と応答の関係がくっきり姿を見せる。ところが今度はその 1:1 対応が強すぎてストリーム処理がぎこちなくなる。</p>

<p>普段はストリーム処理なんてしないと思うかもしれない。でも、たとえば要求結果が数千数万と大規模になるについれ、返ってきたそばからデータを逐次的に処理するコードが欲しくなる。Actor なら自然にかけるこうした問題が Future にはしんどい。</p>

<p>ストリームと要求応答の両方をうまく扱えるモデルが、もう一つのリアクティブ実装 <a href="https://rx.codeplex.com/">Reactive Extension</a> 略して Rx &#8230; 正確にはその焼き直しバージョン <a href="http://reactivex.io/">ReactiveX</a> &#8230; である。Rx は Future に似ている。そして要求応答の対を 1:1 から 1:N に一般化することでストリームが苦手な Future の弱点を乗り越えている。ヘタにやると不便になりそうなこの一般化をデザイン上の工夫で簡潔にとどめ、しかもそれをベースに強力な API を築き上げた Rx は、段々と人気を博すことになる。(私が Rx 好きにつき都合よく書いてます。)</p>

<p>Haskell 発の <a href="https://www.haskell.org/haskellwiki/Functional_Reactive_Programming">Funcitonal Reactive Programming</a>/FRP なるコンセプトを C# に輸入する形で発明された Rx。
Akka も Erlang も普通に関数型の仲間な点をふまえると強気な命名だけど相手が Haskell じゃ仕方ないかな。
Reactive Manifesto の Actor 一味もデータバインドなどの古典からリアクティブの座を乗っ取った手前文句はいえまい。</p>

<p>Rx スタイルのリアクティブを、ここでは「ファンクショナル・リアクティブ」とでも呼ぶことにしよう。なお今となっては元の FRP と Rx はだいぶ違うものになっているそうな。たしかに<a href="http://www.cs.rit.edu/~eca7215/frp-independent-study/Survey.pdf">サーベイ</a>を読んでも・・・わかんないね。Haskell むずかし。</p>

<h3>Rx vs. それ以外</h3>

<p>モデルの強力さでは Rx が Future をすっかり飲み込んでいる。とはいえ細かいデザインを含め本当に Future より使いやすいのか、それほど自明でない。実装の良し悪しもある。特に C# を前提につくられた Rx を移植先の RxJava で使う収まりの悪さは目立つ。だから 最初から Scala 向けに作られた Future の方が使いやすいと Scala プログラマが言いいだす可能性はある。使ってる人の話がききたいところ。</p>

<p>Actor と Rx の対比はどうか。二つのモデルにはギャップがあるように見える。そして Rx は馴染みぶかい要求/応答モデルからの飛躍が小さい。世間の API とも乖離しにくいし、親しみやすさは上だろう。Actor を選ぶのはストリーム指向を重視する人とサブカル好きくらいかなという印象。(Actor 好きな人は異論があると思うので書いてもらえたらリンクします。)  もっとも Actor と Rx を混ぜて使えばそれで済むのかもしれない。混乱しそうだけどね・・・。</p>

<p>それ以外。名前は違えど Node.js の <a href="http://nodejs.org/api/stream.html">Stream</a> はだいたい Rx みたいなものだと私は理解している。ただし使っている用語は違うし Rx との整合性にも興味はなさそう。そのうち独自な発展を遂げる予感はある。すると「ストリーム・リアクティブ」は 「ファンクショナル・リアクティブ」 と別に数えるた方がよいのかしら。よくしらないので保留。</p>

<h2>クライアントサイド・リアクティブ</h2>

<p>サーバサイドでは性能や堅牢性がリアクティブに取り組む大きな動機だった。
一方リアクティブの隆盛以前からイベント駆動の名で非同期かつノンブロッキングなコーディングを強いられてきたスマホアプリやブラウザなどクライアントサイドのプログラマたちは、
複雑化するコードへの処方箋として最近のリアクティブを受け入れている。</p>

<p>リアクティブをイベント駆動の焼き直しと見る人がいるくらいだから、クライアントプログラミングはもともとある種のリアクティブ性を持っている。
思い返せばデータ・バインディングはかつてクライアントサイド・プログラマの夢だった。
また C# に代表されるクライアントに強いプログラミング言語は非同期をラクにする機能を言語自身に取り込んできた。
アカデミックな FRP ですらもともとは対話的システムの抽象化手法として発明されている。</p>

<h3>世代交替</h3>

<p>けれどウェブ上にバックエンドをもつアプリが当たり前になるにつれ、データバインディングをはじめビュー上の複雑さだけを解決する古いリアクティブネスは領土を失っていった。
それまでクライアント向けプログラミングを先導していた Windows や Flash の劣勢も伝統的リアクティブ手法の力を削いだ。
Two-way data binding の複雑さを否定し単純さをうたう UI 構築用のフレームワークが <a href="https://rx.codeplex.com/">React.js</a> を名乗っているのは象徴的だと思う。
React.js がどのようにリアクティブなのか・・・は点を線でつなぐポエムの枕にふさわしい。典型的なリアクティブの手法と直接は関係ない。</p>

<p>ビュー以外の非同期性をどう扱うか、たとえばバックエンドへの API リクエストをどう非同期に待つか。
Windows や Flash のあとからやってきたプログラマたちはデスクトップ世代の伝統とは距離を置きつつ工夫を重ねた。
JavaScript は Future 相当の API たる Promise を言語のコアライブラリに押し込んだ。
Objective-C は同世代の言語には不釣り合いなブロック構文と Java ばりの並列化インフラを取り込んだ。などなど。
言語やプラットホーム本体の外でも多くの実験が続いている。
JavaScript には星の数ほど非同期処理のフレームワークがある。Android にも太陽系の惑星の数くらいはある。たぶん。</p>

<p>この切実さを思えば、クライアント開発者がサーバサイドのリアクティブブームに手を出す気持ちはわかる。
ブロッキングがダメなのはわかってる。でもコールバックを引数に渡すのはもうイヤだ、
そしてナントカリスナーを実装するのはもっとイヤなんだ！</p>

<h2>まとめ</h2>

<p>・・・というような話を Rebuild.fm で出来ればよかった気がした。でも考えが整理されてなかったな。ごめんなさいね。
私のも Rx 以外の話は普通なのと <a href="http://rebuild.fm/people/naoya/">Naoya Ito の回</a>はいつも面白いので <a href="http://rebuild.fm/">http://rebuild.fm/</a>
を万一購読してない人はするといいですよ。Android のアプリは <a href="http://www.shiftyjelly.com/pocketcasts">Pocket Casts</a> がいいですよ。</p>

<p>自主スポンサー業を済ませたところでまとめ:</p>

<ul>
<li>リアクティブプログラミングは勢力争いとダメなメタファのせいでとっつきにくい。</li>
<li>エクセル小咄は聞き流しつつ面白そうな要素技術をつまみ食いしよう。

<ul>
<li>流行に乗るなら Rx、</li>
<li>カウンターに Actor もいい。</li>
<li>データバインディングで古典にたしなみ、</li>
<li>Finagle で Twitter ファン活動。</li>
<li>Node.js が好きなら Stream と一蓮托生。</li>
</ul>
</li>
<li>要素技術ポルノに満足したらポエムを書いて嫌がられよう。</li>
</ul>


<p>写真: <a href="https://flic.kr/p/8dHRrG">https://flic.kr/p/8dHRrG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletters]]></title>
    <link href="http://steps.dodgson.org/b/2014/11/12/newsletters/"/>
    <updated>2014-11-12T21:07:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2014/11/12/newsletters/</id>
    <content type="html"><![CDATA[<p><img src="https://farm8.staticflickr.com/7366/10141105874_3de5a7b557_b.jpg" alt="Letterbox" /></p>

<p>たまには慣れない技術をさわろうと調べ物をはじめると、その技術の weekly や newsletter を名乗るメール配信サービスが目に付く。
たとえば Go には <a href="http://www.golangweekly.com/">Golang Newsletter</a>、Android には <a href="http://androidweekly.net/">Android Weekly</a>、
データサイエンスには <a href="http://www.datascienceweekly.org/">Datascience Weekly</a> がある。$要素技術名 {newsletter|weekly} で検索すると８割がた何か見つかる。
ずっと昔から続いているものもあるけれど、ここ数年で特に増えた様子。流行りの newsletter を紹介する記事も一年に一回くらい誰かが書いている。</p>

<p>よく知られた weekly のひとつ <a href="http://rubyweekly.com/">Ruby Weekly</a> の発行者 Peter Cooper が
ニュースレターの配信をはじめてみた感想を <a href="http://peterc.org/blog/2010/325-ruby-weekly-lessons.html">2010 年に書いている</a>。
2012 年にはメール配信サービス <a href="http://mailchimp.com/">Mailchimp</a> が彼を<a href="http://blog.mailchimp.com/peter-cooper-makes-money-by-not-talking-about-himself/">インタビューしている</a>。
Mailchimp のようにモダンなメール配信サービスがニュースレターの普及に拍車をかけた面はあろう。配信用の CMS や、各種メトリクスの集計など、色々手厚い。
もともと Blog に書いていたニュース記事をメールに切り替えた経緯を読むとメール嫌いのフィード世代としては複雑な気分。
もっとも Ruby Weekly をはじめ多くのニュースレターは RSS/Atom も配信している。</p>

<p>同じメールメディアでも、有名人がやってるメルマガみたいなやつと Newsletter は毛色が違う。大半は無料だし、書き手は個性を主張しない。
テーマにあてはまるウェブの記事をリストにまとめて送ってくれる。それだけ。簡素でいい。
(有名人レターにもそれなりの良さはある。たとえば私は <a href="http://ben-evans.com/#newsletter">Benedict Evans</a> の newsletter がけっこう好き。)</p>

<p>さて、ニュースレターはフローでもストックでも読める。</p>

<p>まず定期購読して流し読むフロー路線。熱心ではないけど眺めてはおきたい、そんな距離にある要素技術のニュースレターを購読する。
ニッチなせいか、要素技術の話題は思ったほど Hacker News や Programming Reddit が拾ってくれない。
そもそも総花的のサイトは流量が多すぎて真面目に追っかけるのは辛い。ニッチなコミュニティ (Subreddit, Twitter, Blog) も流量が多いのは同じ。入り浸る気力がわかない。
ニュースレターはそんな人の助けになる。選者のバイアスを受けたり時差で会話に参加できないなど欠点はあるけれど、よそ者として読むならよかろう。</p>

<p>定期購読だけでなく、バックナンバーををまとめ読む楽しみもある。たとえば Go をさわろうと決めたとする。一通りの入門をこなすと同時にニュースレターのバックナンバーを眺める。
何に使われているのか、何が流行っているのか、何に困り、どう解決しようとしているのか。技術をとりまく空気がわかる。読んだところで自分の生産性が上向くわけではない。
でもその技術を使って人々が楽しくやっている様子には励まされる。コミュニティの中には外から見えない熱気がある・・・それがまだ生きている技術なら。</p>

<p>そういう意味で、ニュースレターの存在は要素技術の温度を計るひとつの指標にもなりうる。若すぎる、あるいはニッチすぎるテクノロジにはまだニュースレターがない。(例: Julia, ReactiveX.)
枯れたテクノロジーの背後にはニュースレターの屍が連なっている。(例: C++, Java. なお Java には現役のニュースレターもある。)
ただし手堅い指標とするにはノイズも多い。たとえば Rust はすごく元気なはずだし Python もまだ枯れ果ててはいないはずだけれど、
どちらのニュースレターも発行が滞っている。飽きっぽい発行人を持ってしまった不幸といえる。</p>

<p>ネット中毒気味なプログラマがその成果をまとめるのにニュースレターは良い媒体かもしれない。
Mailchimp は購読者1000人まで無料で使えるらしい。私もなにかニュースレターしてみようとアカウントを作ってみたものの、
よく考えたら人に配れるほど熱心におっかけている話題がなかった。無念・・・。</p>

<p>購読するニュースレターを探したい人は、適当に検索するか <a href="https://github.com/jondot/awesome-weekly">awosome-weekly</a> などのリストを参照するのがよいのではないでしょうか。</p>

<hr />

<p>写真: <a href="https://flic.kr/p/gs8Pt1">https://flic.kr/p/gs8Pt1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[書類仕事を追いかけて]]></title>
    <link href="http://steps.dodgson.org/b/2014/10/13/paperwork/"/>
    <updated>2014-10-13T06:37:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/10/13/paperwork/</id>
    <content type="html"><![CDATA[<p><img src="https://farm3.staticflickr.com/2200/2386584804_d9d1773580_b.jpg" alt="ex-trees" /></p>

<p>大きなコードベースの真ん中あたりをさわっていると、仕事の大半はリファクタリングに費やされる。機能を足そうと書くコードも 8 割リファクタリングで新緑は 2 割。失敗して捨てるものも多いから、かける時間は 9 対 1 くらいかもしれない。</p>

<p>それどころかリファクタリング自体がプロジェクトにもなりうる。「今四半期はこの腐ったコードどもをなんとかするのが目標」というように。私もいま大きなリファクタリング、あるいはリアーキテクティング、の手伝いをしている。仕事時間のほぼすべてがリファクタリングに費やされる。今の勤務先で通用する唯一の特技がリファクタリングな私にとってこれはたぶん適職だ。</p>

<p>リファクタリングにコーディングの大半を捧げる人は他にもいる。</p>

<p>プログラマ相手の管理職をエンジニアリング・マネージャと呼ぶ。ほぼ全員プログラマ出身。現場に近いマネージャは多くがコードも書く。ただ血気盛んな人を除くと新機能には手を出さない。管理業務がたてこむ時期にプロジェクトが滞っては本末転倒。だからボトルネックは触らない。かわりに地味なバグをなおす。そしてなにより後始末としてのリファクタリングをする。</p>

<p>彼(女)らがコードを書く理由の一つは、プログラマの仕事をよく理解するためだろう。エンジニアリング・マネージャの多くはコードレビューをする。さわったことのないコードはレビューできない。</p>

<h2>昼行灯の噂</h2>

<p>ある友人が「最近ひとり大企業から転職してきた同僚がいるんだけど、書類仕事ばっかり得意でぜんぜん現場の役にたたないんだよねえ」とぼやくのを聞いた。大企業づとめの私はふと不安になる。仮にいまレイオフされたとする。そのとき自分が友人の会社、に限らず零細やスタートアップに職場を移し、役に立てるか。</p>

<p>コードは書けるから大丈夫。そう言いたいけれど、正直心もとない。スタートアップがだめなら中規模以上でどうだろう。できればしばらく潰れない景気のいいところ。おもむろに羽振りのよさそうな会社たちの求人要項を眺める。これも雇われる気がしない。</p>

<p>頼りなさの多くは化石すぎる手持ちの要素技術から来ている。仕方ない。Android でも勉強しよう。でもそれだけでなく、自分の中から何かが失われた不安がある。物事を前にすすめる力のようなもの。リファクタリングばかりするうちに、その熱量が・・・元々少なかった所に輪をかけて・・・なくなってしまった気がする。書類仕事ばかりが得意な昼行灯に自分を重ねる。</p>

<h2>リファクタリングと書類仕事</h2>

<p>リファクタリングと書類仕事には似たところがある: リファクタリングはコードベースが大きいほど必要性を増す。書類仕事は組織が大きいほど増える。</p>

<p>ソフトウェア開発では、古き良き<a href="http://c2.com/cgi/wiki?BigDesignUpFront">大きな事前設計</a>も書類仕事に近い。大きな事前設計とリファクタリングは似ていない。思想的には水と油と言ってもいい。けれど一歩下がってみると、その目的は似通っている。どちらもソフトウェアの複雑さを克服するためにある。言ってみれば複雑さの対価を一括で前払いするのが大きな事前設計、ちまちま後払いするのがリファクタリングだ。</p>

<p>プロジェクトを小さくはじめ、余分な複雑さを買い込まずに済ませる。その身軽さは、けれど永遠には続かない。ソフトウェアが大きくなるにつれ Brooks のいう &lt;<a href="http://c2.com/cgi/wiki?EssentialComplexity">本質的な複雑さ</a>> が膨らみはじめる。密度を低く抑えてきたはずの &lt;<a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">偶発的な複雑さ</a>> すら積分すると結構な量。その昔、複雑さはそびえ立つ事前設計の塔として陽光を遮った。その質量が、今は終わらないリファクタリングの塵として静かに空を覆う。これがインクリメンタルな大規模開発の姿なのかもしれない。</p>

<p>リファクタリングと書類仕事にはもう一つ似たところがある: その技能は、特定のコードベースや組織に深く埋め込まれている。リファクタリングが得意なことと、手を加えるコードベースに詳しいこと。この２つを区別するのは難しい。一般的なリファクタリング技法は存在するし、経験から導きだされる法則もある。それでも相手にするコードへの深い理解ほどリファクタリングを助けるものは無い。リファクタリングは対象を理解する学びのプロセスでもあるから、これは自然なことだ。</p>

<p>書類仕事にも同じ事が言える。法的な文書のように広く使われる書類もある。けれど組織のワークフローや歴史的背景の理解、そこに隠されたノウハウこそが、達人ペーパーワーカーを達人たらしめる。</p>

<p>けれどそうした知見の多くは外に持ち出す事ができない。下手に使うと薬が毒になる。けれどそれに気づく難しさがあり、つい文脈にそぐわない歪な複雑さをまき散らしてしまう。かつてデザインパターン学派やプロセス大好き上司が嫌われたのと似た理由で、リファクタリング教徒も煙たがられる。これは化石化の症状でもある。達人たることに慣れすぎると、不慣れのぎこちなさや無知な自分と向かい合うのが辛くなる。慣れた道具に頼りたくなる。</p>

<p>リファクタリングと書類仕事の三つ目の類似は、どちらも管理職の守備範囲に含まれているところ。これは前二つの相似から読み解ける。組織やプロジェクトへの一段深いコミットを求められる管理職にとって尻拭いは日常だし、コミット対象を深く理解しようとするのもわかる。そして管理職の本業はコード書きの外にある。</p>

<h2>切り開く、切り離す、切り刻む。</h2>

<p>リファクタリングがプログラミングにおける書類仕事なのだとしたら、たしかに私は書類仕事ばかりが得意な大企業の人だと言える。書類仕事ではない、製品のユーザにとって直接意味のある何かを手がけないと昼行灯が板についてしまう。複雑さの支払いという先の比喩を頼るなら、リファクタリングばかりするのは借金(技術的負債)の返済に明け暮れるようなもの。負債を返し自由を手に入れたら何か意味のあることに使いたい。ついでに少しは新しい事がしたい。</p>

<p>大きなコードベースで働くプログラマたちは、様々にこのバランスをとろうとする。</p>

<p>中心部で活躍するプログラマは、借金返済レートと支出の両方が大きい。すごい勢いでリファクタリングをしつつ、すごい勢いで物事を成し遂げて行く。そして前線は新しい問題に事欠かない。</p>

<p>そんなハードワークに疲れ、しばらく姿を消し山奥のプロジェクトで気分転換をするベテランもいる。（たまにそのまま帰ってこない。）山奥まで行かないまでも少し距離を置き、まだ複雑さの届かない郊外や新興地区を好むプログラマも多い。割り切って塵降る都会に暮らしながら余暇コードに精を出す人もいる。</p>

<p>プログラマ個人からプロジェクト全体に視線を移すると少し眺めが変わる。新しいテクノロジが必要なのは人もプロジェクトも同じ。規模との戦いでは、コードベースやソフトウェアそのものを小さく絞り込む流れがある。</p>

<p>たとえば <a href="http://martinfowler.com/articles/microservices.html">Microservices</a> はまさにそうした試みだし、クライアントサイドならアプリの <a href="https://medium.com/@dannysauter/5-observations-on-mobile-app-unbundling-6d57fdd1ad83">Unbundling</a> が近いかもしれない。静的な依存関係の整理に留まらない分厚い出刃包丁で大きなコードを切り分ける。プロセスやバイナリ、コードレポジトリやデプロイ頻度、プログラミング言語、あるいはチームやプロジェクトそれ自体。素朴なインクリメンタリズムを超え、けれど振り出しには戻らず、トップダウンに一括返済を目指す姿は壮観だ。勝ち取った独立と自由に歓声が上がる。</p>

<p>ブラウザには様々な面倒があるせいでよくある方法は使いにくい。でも同じ目的意識で粗結合をめざす試みはある。形になる日が来たら紹介します。</p>

<h2>複雑さの影</h2>

<p>複雑さとの戦いがソフトウェア開発の全てだと、ずっと昔は思っていた。間違いは今や明らかだけれど、未だその価値観に縛られた自分がいる。</p>

<p>古いソフトウェア工学の言葉に「内部品質」と「外部品質」なんてのがある。内部品質は借金を返す仕事、外部品質はユーザにわかる成果だと思えば大体あっている。教科書がこれを隣り合わせたとき、二つは似通ったものに映った。その関係が並列でないことも同じく今や明らかだけれど、未だその違いを内面化できていない。</p>

<p>そして気がつくと複雑さの影を追いかけている。目を凝らすと、それは日に背を向けた人のかたちに切り抜かれている。</p>

<p><img src="https://farm1.staticflickr.com/23/28985129_e23b21ecdd_o.jpg" alt="at the bottom of everything" /></p>

<hr />

<p>写真: <a href="https://flic.kr/p/4CTSvS,">https://flic.kr/p/4CTSvS,</a> <a href="https://flic.kr/p/3yygB">https://flic.kr/p/3yygB</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rx で Koan した]]></title>
    <link href="http://steps.dodgson.org/b/2014/10/01/playing-with-rx-koans/"/>
    <updated>2014-10-01T21:31:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/10/01/playing-with-rx-koans/</id>
    <content type="html"><![CDATA[<p><img src="https://farm5.staticflickr.com/4116/4776232863_e0c3ab7348_b.jpg" alt="zen" /></p>

<p>Android 入門にあわせて Java も勉強しなおすかと <a href="http://www.amazon.co.jp/EFFECTIVE-JAVA-%E7%AC%AC2%E7%89%88-Java-Series/dp/4621066056%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4621066056"> Effective Java </a> を読みはじめたらすっかり疲れてしまった。Java&#8230; 昔 Effective Java 初版を読んだ頃は結構好きだった気がするけれど、いま二版を読むとこれ Bureaucratic Java じゃないのという気がしてしまう。まあ <a href="http://www.amazon.co.jp/Effective-%E7%AC%AC3%E7%89%88-ADDISON-WESLEY-PROFESSIONAL-COMPUTI/dp/4621066099%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4621066099"> Effective C++ </a> を読んだ人も多くは Wicked C++ だと感じるだろし <a href="http://www.amazon.co.jp/Effective-JavaScript-JavaScript%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AB%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%8468%E3%81%AE%E5%86%B4%E3%81%88%E3%81%9F%E3%82%84%E3%82%8A%E6%96%B9-David-Herman/dp/4798131113%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798131113"> Effective JavaScript </a> は Ridiculous JavaScript だろう。文句は言うまい。何事も慣れるには時間がかかる。Java 8 はだいぶマシと伝え聞くものの、Effective Java の三版がでるのはいつになることやら。</p>

<p>そんな日々の現実逃避に <a href="http://atscaleconference.com/">@Scale Conference</a> の<a href="https://www.youtube.com/channel/UCd9I8ZkgoR1d7GeSj_wi_LQ">ビデオ</a>を眺めていたところ、Netflix が RxJS でクライアントサイドの JavaScript を書き直したという<a href="https://www.youtube.com/watch?v=gawmdhCNy-A">講演</a>があった。そういえば Reactive Programming ってかっこよさそうだけどよくわかってない。この Rx とやらをさわれば Reactive 入門できるのだろうか。でもどうせなら JS じゃなくて Android で Rx したいなあ。調べてみると <a href="http://open.blogs.nytimes.com/2014/08/18/getting-groovy-with-reactive-android/">NYTimes が RxJava と Groovy で Android アプリを書き直しているという記事</a>がある。Groovy と Rx で Android! ちょっとかっこよさそう。これは Java がかったるくて Android に重い腰をあげそこねつつ Reactive Programming が気になる年頃な自分の進む道なのではないか。</p>

<p>やる気がでてきたところでまず Rx に入門したい。ちょうど RxJava をはじめとする Rx ライブラリ群を売り込み中の Netflix が <a href="http://reactivex.io/">reactivex.io</a> というサイトを立ち上げており、その中に入門者向けの<a href="http://reactivex.io/tutorials.html">チュートリアルリンク集</a>があった。いくつか読んで雰囲気をつかんだあと、評判の良い <a href="http://www.amazon.co.jp/Introduction-English-Edition-Lee-Campbell-ebook/dp/B008GM3YPM%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB008GM3YPM"> Introduction to Rx </a> なる Kindle 本を読んでみる。<a href="http://www.introtorx.com/">ブログ記事</a> をひとまとめにして売ってるらしい。 値段($1)の割に良く書けていた。一見ページ数は多そうだけど中身はだいたいコード。すぐ読める。コードは C# だけどこの本の範囲ではだいたい Java みたいなものなので問題なし。</p>

<p>さて理屈はわかった。そろそろ手を動かしたい。でも <a href="https://github.com/ReactiveX/RxAndroid">Android のプロジェクトにインテグレート</a>するのは面倒そうだなあそもそも Android よくわかんないし・・・。ふたたび怖じ気づきぶらぶらしていたら、 Microsoft が公開している <a href="http://rxkoans.codeplex.com/">RxKoans</a> なる練習問題セットをみつけた。 C# で書かれている。現実逃避の現実逃避にこれを RxJava (と Groovy) で<a href="https://github.com/omo/hello/tree/master/gradle-groovy/src/test/groovy">解いてみた</a>。</p>

<p>こんな C# のコードを:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">SplittingUp</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">oddsAndEvens</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">numbers</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">9</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">split</span> <span class="p">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">n</span> <span class="p">=&gt;</span> <span class="n">n</span><span class="p">%</span> <span class="n">____</span><span class="p">);</span>
</span><span class='line'>    <span class="n">split</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">((</span><span class="n">IGroupedObservable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="k">group</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">group</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">n</span> <span class="p">=&gt;</span> <span class="n">oddsAndEvens</span><span class="p">[</span><span class="k">group</span><span class="p">.</span><span class="n">Key</span><span class="p">]</span> <span class="p">+=</span> <span class="n">n</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">evens</span> <span class="p">=</span> <span class="n">oddsAndEvens</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">odds</span> <span class="p">=</span> <span class="n">oddsAndEvens</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="s">&quot;2468&quot;</span><span class="p">,</span> <span class="n">evens</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="s">&quot;13579&quot;</span><span class="p">,</span> <span class="n">odds</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにする:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="kt">void</span> <span class="nf">splittingUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">oddsAndEvens</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="k">as</span> <span class="n">String</span><span class="o">[]</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">numbers</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">9</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">split</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">groupBy</span><span class="o">({</span> <span class="n">it</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">split</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">GroupedObservable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">group</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">group</span><span class="o">.</span><span class="na">subscribe</span><span class="o">({</span> <span class="n">oddsAndEvens</span><span class="o">[</span><span class="n">group</span><span class="o">.</span><span class="na">key</span><span class="o">]</span> <span class="o">+=</span> <span class="n">it</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">})</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">oddsAndEvens</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;2468&quot;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">oddsAndEvens</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;13579&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Groovy はよくわからないままカンとウェブを頼りに書いておりますゆえ idiomatic じゃなかったらごめんなさい。それにしても Groovy, むかし触ったときは遅いしエラーが起こるとインタープリタのスタックトレースが見えるしでしょぼい言語だと馬鹿にしてたけど、クロージャも部分的な型推論もあり静的コンパイルオプションをつければ生成されるバイトコードもコンパクト。今あらためて触ると結構かわいいやつな気がする。年を経て良くなったのかも。えらい。</p>

<h2>Koans</h2>

<p>Koans を解くのはちょっと楽しい。Rx に限らず入門目的のちょっとしたコーディング問題集を Koan とよぶのはある種のならわしらしい。<a href="https://www.google.com/#q=code+koans">Code Koans</a> などを検索すると色々みつかる。語源はたぶん「公案」なのだろう。本来の意味とは外れている気もするけれど気にしないでおこう。Koan だの Kata だのの Zen terminology を好む Kamikaze Ninjas はなぜか一定数いるからね。</p>

<p>Koan の難度はものによる。ふつうは入門向けなので難しくない。RxKoans もちょっと試せばすぐ解ける。(ただし RxJava だとライブラリの機能不足で解けないものもある。) とはいえ少なくとも穴を埋めて動かさないと先に進まない。この「ちょっとだけ頭を使い」「実際のコードをちょっとだけ書き」「動かして結果を見る」という手順がコンテンツの力で強制されるのは助かる。</p>

<p>たとえば Rx Koans は Visual Studio のプロジェクトがついてくる。コードはコンパイルできる。ただしテストは通らない。そのテストを通すようコードを穴埋めする過程で Rx の動作を体験する。新しいテクノロジについていくのが年々辛くなる中年にとって Koans のように入門の敷居を下げる教材はありがたい。</p>

<h2>手をうごかす入門</h2>

<p>新技術の入門に際し手を動かそうとするとき、おおきく２つの流派をよく目にする: 一つ目は実際になにかアプリを書いてみるトップダウンな「アプリ派」。もう一方は教科書のコードを書き写しては動かすボトムアップな「写経派」。ただ私からすると前者は手強すぎ、後者は退屈すぎる。間が欲しいと思っていた。</p>

<p>高価な授業料を払うことで「アプリ派」の敷居を下げる事はできる。有償のワークショップに参加すればいい。ただ授業料は本当に高いし身近にクラスがあるとも限らない。そうはいっても今はオンラインの講義なんかも有償無償いろいろあるから、トップダウンな入門法はとっつきやすいものになりつつあるのだろう。</p>

<p>Koans は「写経派」のようなボトムアップなアプローチのマシなバージョンと言えるかもしれない。写経といってもただサンプルを書き写すだけだと頭を使わない。だからコードをいじって頭を使え。写経派はそう説く。言いたい事はわかる。でも高すぎる自由度に戸惑ってしまうのが冴えない中年。クリエイティビティのないおっさんでも Koans のフォーマットを頼れば頭を使える。このアプローチにはもっと市民権を得てほしい。今のところ Koans は守備範囲が狭すぎて心細い。</p>

<p>Koans ではないにせよ章末問題のついている教科書は多い。書籍というフォーマットの制限を受けすぎているのが伝統的な章末問題の残念なところだ。たとえば答え合わせが面倒だったり、体裁だけが問題風で答えの無いエセ禅問答だったりする。問題とは別にサンプルコードを公開している本もある。でもそれは頭を使う余地の少ない完成したプログラムが大半。願わくば教科書には試せるコードの形で問題を用意してほしい。手を動かせるコンテンツの価値をもっと重く見てほしい。そのフォーマットの一つとして Koans を使えばいいと思う。</p>

<p>教科書だけでなく草の根のコンテンツが増えればもっと嬉しい。<a href="https://www.google.com/?gws_rd=ssl#q=code+kata">Code Kata</a> や <a href="http://coderetreat.org/about">Code Reterat</a>, あとは各種競技プログラミングなど、手を動かすアイデアは色々ある。トップダウン派のために <a href="https://github.com/karan/Projects">プロジェクトのアイデア一覧</a> を集めている人までいる。こういうやつの特定要素技術バージョンがもっと増えればいい。<a href="http://tour.golang.org/">A Tour of Go</a> なんかは事前準備なくその場で実行できる上に練習問題も混じっている。攻めてる。</p>

<p>Coursera みたいなオンライン講義でトップダウンにアプリの作り方を教わりつつ Github の教科書アカウントから Koans レポジトリを フォークして解く。そんな風に新技術を入門できるとおっさんも延命できるのになあ。なんて夢を見つつ現実逃避はおしまい。</p>

<p>写真: <a href="https://flic.kr/p/8h4rCt">https://flic.kr/p/8h4rCt</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[現場のフォーム]]></title>
    <link href="http://steps.dodgson.org/b/2014/08/01/forms-at-work/"/>
    <updated>2014-08-01T12:00:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/08/01/forms-at-work/</id>
    <content type="html"><![CDATA[<p><img src="https://farm4.staticflickr.com/3378/3251735046_418337c6de_b_d.jpg" alt="Form" /></p>

<p>このごろ仕事の進みが悪く、しかもまったくの自業自得で肩を落としている。
今日はそれをふりかえり明日への糧としたい。反省文。</p>

<p>仕事の進みは「遅い」だけ。動いてはいる。一歩一歩は正しい。
でも一歩を踏み出すまでが遅い。正しい一歩を踏み出せる、正しい姿勢をとるのが遅い。
背中を丸め足を引きずる。たとえばこんなふうに&#8230;</p>

<h3>Bisection</h3>

<p>ある昼下がりにバグ修正を頼まれた。リグレッション。ここ三ヶ月くらいで壊れたらしい。
リグレッションを直す「正しい」一歩目は、二分探索で原因のリビジョンを探す bisection 作業だ。
でもこのバグ、bisection が面倒そう。なんとなく原因の想像はつくからあたりをつけて直してしまおう・・・</p>

<p>・・・半日たち、結局あたりはつかない。日が暮れてしょんぼり帰宅。
翌朝気を取り直し bisection をしたら 2 時間でリビジョンの特定がおわる。あらら。
しかも 30 分は bisection ツールの準備。バグの原因は凡ミス。さっさとなおしておしまい。</p>

<h3>プロトタイピング</h3>

<p>ある機能を作ることになった。締め切り近め。仕様はまだ曖昧で、動かさないと決められない。
このとき「正しい」一歩目は・・・リグレッションの時ほど断言はできないけどたぶん・・・動くハックをでっちあげること、だろう。
でもこの機能、今のコードの想定からはずいぶん外れてるなあ。汚いコードをまき散らすのは気が重い。まずリファクタリングしよう・・・</p>

<p>・・・一週間後、わき出す山羊の群れを前にリファクタリングのおわる気配はない。締め切りがやばそうなので方針変更、ハックをつっこむ。
要望していた相手に見せると、なんか違うね。やっぱりこうしようとバリエーションが提案される。
あらら。これならリファクタリングいらないじゃん。ハックを巻き戻し新バージョンを実装。リリース。</p>

<h3>リバート</h3>

<p>ブランチ前日にクラッシュバグがやってきた。今度は bisection 済。私の(クラッシュではない)バグ修正がまずかった。
クラッシュは何より深刻だから、このときの「正しい」一歩目はリバートだ。でも元のバグ修正も次のリリースに入れたい。
今リバートするとブランチカットに間に合わない。Cherrypicking は作業も交渉も面倒だ。ここはリバートせずに直そう・・・</p>

<p>・・・数日後、おまえのクラッシュ修正が新たなクラッシュを引き起こしているぞとつつかれる。
あらら。失敗したクラッシュ修正と、もともとのしょぼいバグ修正を慌ててリバート。
そしてそのリバートたちをリリースブランチにマージ。クラッシュは消える。</p>

<h3>可視化デバッグ</h3>

<p>ある高速化を実装してみた。速くはなったもののテストが失敗している。
新しく足したデータ構造に不整合があるのだろう。「正しい」一歩は、この推測を確認すること。
データ構造をダンプするコードを書き何カ所かに差し込めばわかりそう。
でもダンプを書くのはちょっと手間だしビルドしなおしも遅い。
とりあえずデバッガで変数をながめよう・・・</p>

<p>・・・一時間後、ブレイクとコンティニューをぼんやり繰り返す自分に気づき我に返る。あらら。
おもむろにダンプ関数をつけたし、表示内容を調整しつつ結果を睨む。
あ、ここで不思議なノードができてるな、とかつぶやきつつ原因を特定し修正。</p>

<h3>Deflake</h3>

<p>翌日、先の高速化で足したテストが五回に一回くらい失敗すると知らされた。
テストのタイミングに依存したバグ。このときの「正しい」一歩は、テストから flakiness, 不確実性を取り除くこと。
でもタイミング調整はサーバにコードを足さねばならず、静的なデータだけに閉じたテストを諦めないといけない。
サーバが挟まるとデバッグも面倒だ。とりあえず思い当たる節を直してみよう・・・</p>

<p>・・・数時間後、試みた修正で直ったと思ったら十回に一回は失敗する、を繰り返す自分に気づき我に返る。
あらら。現実を受け入れテストを書き直す。ここで 0.5 秒 <code>sleep()</code> 。こっちは 1 秒。
確実にバグを暴きはじめたテストを動かしつつ先に追加したダンプを有効にして眺める。
不思議なノードがみつかる。原因を特定し修正。</p>

<h3>開発環境</h3>

<p>OS 固有のコードをもつモジュールに手を入れたい。
Linux と Mac は手元にある。でも Windows がない。「正しい」一歩は Windows マシンを手に入れること(VM は遅すぎてだめ)。
でも最近の Windows はよくわからないし環境をつくるのも面倒だ。さいわい Windows 固有部分のコードは単純そう。
テストは try サーバ (CI) でも動かせるから、最悪そのログを見ながら直そう・・・</p>

<p>・・・一週間後、書き上げた第一稿を CI に投げると案の定 Windows 上だけでテストが失敗する。
山勘で直そうとするも赤いまま。数時間のターンアラウンドをもつ CI 相手にようやくバグを直したら、
今度はライブラリの構成に問題があるとレビュアの指摘をうける。直して CI 再挑戦。今度はコンパイルすら通らない。
エラーメッセージは意味不明。ようやく挫けて Windows マシンを注文する。え、在庫ないから届くのは一週間後？あらら。</p>

<h3>リマインド</h3>

<p>ある素朴なリファクタリングを済ませた。
素朴とはいえ依存グラフの根元近くをさわったせいで変更範囲は広い。
遠く離れたモジュールを仕切るよく知らない人にレビューを提出。
忙しい人らしく反応がない。「正しい」一歩はたぶん隙を見て直談判。
でも席が遠いしちょっと強面なんだよな。まあ順番に見てるよきっと。ほっとこう・・・</p>

<p>・・・関係ないバグ修正に追われるうち週が明ける。あれどうなった？私の作業を待つ相手から問い合わせ。あらら。しまった。
深呼吸してレビュアを訪問、すみませんけどレビューしてと頼む。
「ああごめん見落としていた。だいぶ放置していたようで申し訳ない。次からはもっと強くリマインドしてくれよな。」LGTM.
案外いいひとじゃんよ。</p>

<h3>ブランチワーク</h3>

<p>リファクタリングは続く。肝心の変更までたぶんあと 3 コミットくらい。
準備コミットを 1 つ書いてみるも、これだけでは狙いが伝わらない雰囲気。
「正しい」一歩はまず全体像を書き上げ、最初のコミットと全体の WIP の両方を相手に渡すこと。
でもローカルコミットをため込むと序盤のレビュー指摘をとりこむのが面倒だなあ。 <code>rebase</code> がコンフリクトしまくる。
まあいいやこのコミットだけ渡して別の仕事をしよう。あのひとがレビュアならわかってくれるよね・・・</p>

<p>・・・翌朝レビューの返事が届く。「なんか不必要に複雑だけど何がしたいの？」あらら。ですよね・・・
続きのコードを書きながら収まりの悪さに手を加えるうち最初のコミットは大げさすぎたと気づく。
彼は正しかった。簡素になった一歩目と全体の WIP を投稿。即座に LGTM.</p>

<h2>フォームの乱れ</h2>

<p>暗い記憶はどこまでも続くけれどこのへんにしておこう。
もたつく自分を直視し続けるのは精神衛生によくない。</p>

<p>正しい一歩が何かはわかっている。でも踏み出せず脇に逸れて時間を無駄にする。同じ無駄を繰り返す。
部屋の掃除や宿題を後回しにする小学生みたい。</p>

<p>「正しい一歩」を踏み出せないのはたぶん、その中に苦手なものが混じっているからだと思う。
苦手な環境、苦手なツール、苦手なコンポーネント、苦手なコーディング技法、苦手な人、苦手な会話。
「苦手な」が大げさなら「面倒な」でもいい。苦手なもの、面倒なもの、
手間がかかるものを前に足がふらつき、無駄骨の餌食になる。</p>

<p>仕事を通じ克服した苦手もある。でも苦手の増える量に負けている。
腕が悪いのか仕事が難しいのか、いずれにせよなんとかしたい。雇用が危ぶまれる。</p>

<p>以前<a href="http://gihyo.jp/dev/serial/01/comparators/0005">プログラマの体力について書いた事がある</a>。
この比喩を頼るなら、苦手を前に腰が引けるのは筋力不足で姿勢が崩れるようなものだろうか。
重力にや水圧に負けフォームが乱れる。
そういえば <a href="http://en.wikipedia.org/wiki/Kata_%28programming%29">Code Kata</a> なんてのもあったね。</p>

<p>コード書き本体だけでなく、それをとりまくプラクティスにも同じ事が言える。
たとえば Git を使い倒す体力、複数 OS を行き来する体力、レビュアをつつく体力。
仕事の種類によって中身は色々だろうけれど、
あえておおざっぱにこれを会社員プログラマの体力、現場のフォームと呼んでみたい。
たりないと足下がふらつく、そんな何か。
&#8221;<a href="http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AB%E5%AD%A6%E3%81%B6%E7%8F%BE%E5%A0%B4%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E7%BF%92%E6%85%A3-Venkat-Subramaniam/dp/4274066940%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4274066940">習慣 </a>&#8221; とはよくいうけれど、
フォームを正すのは習慣よりもがんばりのいる営みな気がするよ。</p>

<p><a href="http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AB%E5%AD%A6%E3%81%B6%E7%8F%BE%E5%A0%B4%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E7%BF%92%E6%85%A3-Venkat-Subramaniam/dp/4274066940%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4274066940"><img class="asin" src="http://ecx.images-amazon.com/images/I/51YiZblziqL.jpg" title="習慣 " /></a></p>

<p>何かを得意にするのは長い道程だ。でも苦手でなくすだけならそこまでの労はない。
低いはずの敷居を前に苦手意識をこじらせてしまうのはたぶん、
余裕のない場面で実践を強いられたからだろう。
締め切り前、休暇の前、上司の前。忙しい緊張の中で面倒はおこる。
皮下脂肪を抱え準備運動もなくゲームに放り込まれるこの感じ、ちょっとトラウマになる。</p>

<p>一方で、このストレスや後悔はフォームの乱れを脳裏に焼き付ける強いシグナルともなる。
あとから見落とさずにすむのは不幸中の幸い。暴かれた弱点を少しずつ直して行こう。</p>

<p>・・・捻ったその足首の、腫れが引いたらね。</p>

<ul>
<li>写真: <a href="https://flic.kr/p/5XkZxm">https://flic.kr/p/5XkZxm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[おしらせ: サーバを移動しました]]></title>
    <link href="http://steps.dodgson.org/b/2014/07/27/psa/"/>
    <updated>2014-07-27T23:06:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/07/27/psa/</id>
    <content type="html"><![CDATA[<p>毎年サーバ代を払い忘れ止まってしまうさくらインターネットを撤収し、このサイトを EC2/S3 にうつしました。
懸念となっていた古い tDiary のデータは適当にひっこぬいて Middleman で<a href="http://steps.dodgson.org/bn/">整形済</a>。
ブックマークサイトなどの古いリンクはリダイレクトされます。なにかしら移行にともなうバグがありそうなので、気づいた方はお知らせください。
さくらインターネットにも tDiary にも恨みはないというか恩しかないけれど経費削減ということでひとつ。</p>

<p>この機会に便乗し、Nginx とか Apache の設定をがんばってリダイレクトするかわりに Go でリバースプロキシ(?) を<a href="https://github.com/omo/s2pd">書いてみた</a>。
適当キャッシュつき。設定ファイルとかはなしでぜんぶハードコード。まったくやるきない。
しかしこういうやる気ないコードが普通の速度でうごくのは Go の良いところかもしれない。デプロイもバイナリひとつ push すればおしまいだし。
なお前より遅く感じるのはサーバが <code>us-east-1e</code> にあるからで、コードがへぼいせいじゃないですよ&#8230;</p>

<p>言語としての Go はなんというか、愛せないけれど特段憎たらしいほどでもなく、なんとなく Python を書いてる気分に近いというのが今のところの感想。
一回り大きいコードを書かないと善し悪しを判断はできなさげ。もう一つくらいやるきのないサーバを書けば感触がつかめるかなあ。
勤務先でもじりじり勢力を拡大していることだし、なんとか Python くらいには書けるようになりたいもんです。</p>

<p>そのほかこのサイトの TODO というか Wishlist としては&#8230;</p>

<ul>
<li>誰にも使われてないサービスをとめてドメイン代節約。 (hasb.ug の UG ドメイン高すぎるんよ&#8230;)</li>
<li>EC2 から Digital Ocean に引っ越して更なる経費削減。Digital Ocean に Core OS がくるの待ち。</li>
<li>Octopress が遅すぎるのでぜんぶ Middleman にしたい。スタイルとテンプレートを持っていくのが面倒で先送り中。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Life of Touch]]></title>
    <link href="http://steps.dodgson.org/b/2014/07/05/life-of-touch/"/>
    <updated>2014-07-05T14:04:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/07/05/life-of-touch/</id>
    <content type="html"><![CDATA[<p><img src="https://farm3.staticflickr.com/2923/14638870994_4802da98e5_b.jpg" alt="touch" /></p>

<p>いいかげんあんどろでも勉強するかと 6 年遅れくらいで重い腰を上げかけている。気が重い。スマホとか知らないっすよ・・・。</p>

<p>あんどろ、というかスマホ固有の話題は色々あれど、その一つがタッチベースの UI なのは間違いない。そういえばタッチというのはどうやって実装されているんだろうか。それを一通り眺めれば、少しは気の重さが晴れるかもしれない。ということで今日はタッチイベントの実装を眺めてみたい。実装といっても静電容量だの電磁誘導だのではなくユーザー空間の話です。そして老人の勉強記録であり目新しい話はありません。間違ってたら教えてください。</p>

<p>参照するコードは何も考えず <a href="http://source.android.com/source/using-repo.html"><code>repo sync</code></a> で降ってくる AOSP master。たぶんだいたい 4.4.x 相当(だよね？)</p>

<h2>View#onTouchEvent()</h2>

<p>あんどろプログラマからみたタッチイベントはふつう <a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent%28android.view.MotionEvent%29"><code>View#onTouchEvent()</code></a> にやってくる <a href="http://developer.android.com/reference/android/view/MotionEvent.html"><code>MotionEvent</code></a> だと理解している。<a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/AbsListView.java"><code>ListView</code></a> なんかも <code>onTouchEvent()</code> で色々やっているからこれはきっと正しい。</p>

<p>さっそく <a href="https://github.com/android/platform_frameworks_base"><code>frameworks/base</code></a> の <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/View.java"><code>View.java</code></a> を見てみると、<code>onTouchEvent()</code> にはそれなりに長いデフォルト実装がある。(150 行くらい。)</p>

<figure class='code'><figcaption><span>View.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/View.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">viewFlags</span> <span class="o">=</span> <span class="n">mViewFlags</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">DISABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">...</span>
</span><span class='line'>            <span class="c1">// A disabled view that is clickable still consumes the touch</span>
</span><span class='line'>            <span class="c1">// events, it just doesn&#39;t respond to them.</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(((</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">CLICKABLE</span> <span class="o">||</span>
</span><span class='line'>                    <span class="o">(</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">LONG_CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">LONG_CLICKABLE</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(((</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">CLICKABLE</span> <span class="o">||</span>
</span><span class='line'>                <span class="o">(</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">LONG_CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">LONG_CLICKABLE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">mHasPerformedLongPress</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>                    <span class="c1">// Walk up the hierarchy to determine if we&#39;re inside a scrolling container.</span>
</span><span class='line'>                    <span class="kt">boolean</span> <span class="n">isInScrollingContainer</span> <span class="o">=</span> <span class="n">isInScrollingContainer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// For views inside a scrolling container, delay the pressed feedback for</span>
</span><span class='line'>                    <span class="c1">// a short period in case this is a scroll.</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">isInScrollingContainer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_PREPRESSED</span><span class="o">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">mPendingCheckForTap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">mPendingCheckForTap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CheckForTap</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">postDelayed</span><span class="o">(</span><span class="n">mPendingCheckForTap</span><span class="o">,</span> <span class="n">ViewConfiguration</span><span class="o">.</span><span class="na">getTapTimeout</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>たとえば Long press や Tap の判定なんかがさらっと書いてある。判定方法は <code>Runnable</code> を実装してそれをタイマーから呼び、状態の差を見るだけ。
こういうのをさらっとかけるプラットホームはいいなあ&#8230;とおもうのだった。(C++比。Swift 書いてる人は鼻で笑っといてください。)
それにしてもたくさんの責務をばりっと同じクラスに書いてしまうのは伝統的な Java ぽくない。 <code>View.java</code> だけで 1.7 万行くらいある&#8230;</p>

<h2>ViewGroup</h2>

<p>さて <code>onTouch()</code> はどこから呼ばれるのか。主なパスは二つある。</p>

<p>一つは View ツリーの親からやってくるパスで、親たる <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewGroup.java"><code>ViewGroup</code></a> の <code>ViewGroup#dispatchTransformedTouchEvent()</code> から呼ばれる。このメソッドは <code>ViewGroup::dispatchTouchEvent()</code> から使われている。子の View のうちイベントの座標に重なるものにイベントを配信する。よくある親から子への event propagation。</p>

<figure class='code'><figcaption><span>ViewGroup.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewGroup.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">dispatchTransformedGenericPointerEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="n">View</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">offsetX</span> <span class="o">=</span> <span class="n">mScrollX</span> <span class="o">-</span> <span class="n">child</span><span class="o">.</span><span class="na">mLeft</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">offsetY</span> <span class="o">=</span> <span class="n">mScrollY</span> <span class="o">-</span> <span class="n">child</span><span class="o">.</span><span class="na">mTop</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">handled</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">child</span><span class="o">.</span><span class="na">hasIdentityMatrix</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MotionEvent</span> <span class="n">transformedEvent</span> <span class="o">=</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>            <span class="n">transformedEvent</span><span class="o">.</span><span class="na">offsetLocation</span><span class="o">(</span><span class="n">offsetX</span><span class="o">,</span> <span class="n">offsetY</span><span class="o">);</span>
</span><span class='line'>            <span class="n">transformedEvent</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getInverseMatrix</span><span class="o">());</span>
</span><span class='line'>            <span class="n">handled</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">dispatchGenericMotionEvent</span><span class="o">(</span><span class="n">transformedEvent</span><span class="o">);</span> <span class="c1">// これとか</span>
</span><span class='line'>            <span class="n">transformedEvent</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">event</span><span class="o">.</span><span class="na">offsetLocation</span><span class="o">(</span><span class="n">offsetX</span><span class="o">,</span> <span class="n">offsetY</span><span class="o">);</span>
</span><span class='line'>            <span class="n">handled</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">dispatchGenericMotionEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span> <span class="c1">// これ</span>
</span><span class='line'>            <span class="n">event</span><span class="o">.</span><span class="na">offsetLocation</span><span class="o">(-</span><span class="n">offsetX</span><span class="o">,</span> <span class="o">-</span><span class="n">offsetY</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">handled</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>名前が &#8220;Transformed&#8221; なのは子 <code>View</code> のローカル座標系に位置を変換するからだけど、よくみると位置にオフセットを足すだけでなくだけでなく変換行列をかけている。<code>View</code> には回転やらスケールやらの行列をセットできるらしい。たぶんアニメーションのためだろう。イベントの衝突計算にもちゃんと反映されるんだな。Material Design なんかだと色々派手に動くのであんなものが実装できるのかと密かに怪しんでいたけれど、下地は案外ちゃんとしていた。当たり前かもしれませんが・・・。</p>

<h2>ViewRootImpl</h2>

<p>もう一つのパスは、同じクラスの <code>View#dispatchTouchEvent()</code> と <code>View#dispatchPointerEvent()</code> を介し <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java"><code>ViewRootImpl</code></a> から呼ばれるもの。</p>

<p><code>ViewRootImpl</code> も 0.7 万行くらいあるそこそこ大きなクラスで、コメントによれば <code>View</code> ツリーとウィンドウシステム (<code>WindowManager</code>) をとりもつのが仕事らしい。名前から察するにこれがツリーのルートなのだろう。ただし <code>ViewGroup</code> が <code>View</code> を継承しているのに対し <code>ViewRootImpl</code> は継承していない。ツリーのルートというよりコンテナという方が実態に近い。そして <code>ViewRootImpl::mView</code> がルートのようだ。この値は Activity が表示されるときにどこかからセットされる。 <code>MotionEvent</code> を最初にうけとる <code>View</code> はこの <code>mView</code>。<code>mView</code> がセットされるまでの道のりは長いので省略。</p>

<p><img src="https://farm4.staticflickr.com/3845/14640491152_e68fbcfa80_b.jpg" alt="View Tree" /></p>

<p>なおクラス名から予期される Impl でない <code>ViewRoot</code> は見当たらない。昔のコードにはあるから、どこかでこの不思議な名前に変わったようだ。</p>

<h2>InputStage</h2>

<p>さて <code>View#dispatchPointerEvent()</code> および <code>View#dispatchGenericMotionEvent()</code> は <code>ViewPostImeInputStage#processPointerEvent()</code> から呼ばれる。 <code>ViewPostImeInputState</code> をはじめとする <code>InputStage</code> のサブクラスはみな <code>ViewRootImpl</code> の内部クラスで、タッチやキーボードなどの入力イベントを処理するための小さなフレームワークを構成している。</p>

<p>この InputStage フレームワークはいわゆる <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">Chain of responsibility</a> のパターン。一つのイベントを処理するために一連の stage 実装が参加し、自分が処理できないイベントを別の stage に先送りしたり、ちょっとタイミングや中身を書き換えて委譲したりする。まあ UI まわりで chain of responsibility ってよくあるよね。 Cocoa の responder chain とか。</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Base class for implementing a stage in the chain of responsibility</span>
</span><span class='line'><span class="cm">     * for processing input events.</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * Events are delivered to the stage by the {@link #deliver} method.  The stage</span>
</span><span class='line'><span class="cm">     * then has the choice of finishing the event or forwarding it to the next stage.</span>
</span><span class='line'><span class="cm">     * &lt;/p&gt;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">InputStage</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">InputStage</span> <span class="n">mNext</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Forwards the event to the next stage.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">forward</span><span class="o">(</span><span class="n">QueuedInputEvent</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">onDeliverToNext</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Called when an event is being delivered to the next stage.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDeliverToNext</span><span class="o">(</span><span class="n">QueuedInputEvent</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mNext</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mNext</span><span class="o">.</span><span class="na">deliver</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">finishInputEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputStage</code> が面倒を見る入力イベントは <code>KeyEvent</code> (キーボード)と <code>MotionEvent</code> (タッチ)の二種類。Stage の実装は 6 種類(<code>ViewPreImeInputStage</code>, <code>ImeInputStage</code>, <code>NativePostImeInputStage</code>, <code>EarlyPostImeInputStage</code>, <code>ViewPostImeInputStage</code>, <code>SyntheticInputStage</code>) 。<code>MotionEvent</code> については委譲の果てに <code>ViewPostImeInputStage</code> が呼び出されて <code>View</code> に届く。</p>

<p>タッチ紀行の主役 <code>MotionEvent</code> だけを追いかけると <code>InputStage</code> のフレームワークはやりすぎに見える。でも <code>KeyEvent</code> のコードパスを調べると事情がわかる。<code>KeyEvent</code> は IME にリダイレクトされる必要がある。そして処理の結果は非同期に、別のプロセスから戻ってくる。そんな非同期性やメッセージングの複雑さを局所化するための仕組みなのだろう。</p>

<p>そのほか NDK 対応のためとみられる Native なんとかという stage もあるけど、<code>NativeAcitivity</code> のコードをひやかした印象だともう機能してないレガシーな印象。</p>

<h2>QueuedInputEvent</h2>

<p>本題に戻る。 <code>InputStage</code> へのイベントはどこからやってくるのだろう。読み進めると <code>ViewRootImpl#doProcessInputEvents()</code> が <code>deliverEvent()</code> 経由で <code>InputStage</code> を呼び出している。</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">doProcessInputEvents</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Deliver all pending input events in the queue.</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">mPendingInputEventHead</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">QueuedInputEvent</span> <span class="n">q</span> <span class="o">=</span> <span class="n">mPendingInputEventHead</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mPendingInputEventHead</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">mNext</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mPendingInputEventHead</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPendingInputEventTail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="na">mNext</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">deliverInputEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>名前のとおり <code>doProcessInputEvents()</code> は複数のイベントを処理する。そのイベントは <code>ViewRootImpl#mPendingInputEventHead</code> という線形リストから取り出している。型は <code>QueuedInputEvent</code>.
名前の通り、このリストは intrusive なキューとして機能している。</p>

<p>イベントやメッセージの配信について調べるとき、<em>どんなキューをいつ通過するか</em> はわかりやすい道程になる。その一つ目が現れた。
このキューにはどこからイベントが詰め込まれるのか・・・というと、<code>ViewRootImpl#enqueueInputEvent()</code> なる大変わかりやすい名前のメソッドがあるのだった。</p>

<p>イベント配信について調べるとき気にする事がもう一つある。
その配信は<em>同期</em>的に処理される(同じコールスタックの中で即座に配信される)か、それとも<em>非同期</em>(タイマーやイベントループで先送りされる)か。非同期配信はコードの堅牢さを助ける一方、遅延の原因にもなる。<code>MotionEvent</code> みたいに反応時間が大切そうなものを非同期化していいの？</p>

<p>などと思いつつよく見ると、<code>enqueueInputEvent()</code> には <code>processImmediately</code> なんてパラメタがある。</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kt">void</span> <span class="nf">enqueueInputEvent</span><span class="o">(</span><span class="n">InputEvent</span> <span class="n">event</span><span class="o">,</span>
</span><span class='line'>            <span class="n">InputEventReceiver</span> <span class="n">receiver</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">processImmediately</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ... put |event| into the queue</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processImmediately</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doProcessInputEvents</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">scheduleProcessInputEvents</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>呼び出しが <code>processImmediately</code> なら即座に <code>doProcessInputEvents()</code> が呼ばれ、キューに詰めたばかりのイベントが同期的に掃き出される。そうでなければメインループにメッセージを投げ (<code>scheduleProcessInputEvents()</code>)、非同期に <code>doProcessInputEvents()</code> を呼び出すよう指示する。つまり <code>ViewRootImpl</code> はキューをもっているが、それを同期的に掃き出すオプションを用意している。（そしてだいたいは同期的に処理している。)</p>

<h2>WindowInputEventReceiver#onInputEvent()</h2>

<p><code>enqueueInputEvent()</code> はあちこちから呼ばれている。ただし、その多くはキーボードのイベントや、「合成」イベントを発行するためのもの。</p>

<p><code>SyntheticTrackballHandler</code> や <code>SyntheticTouchNavigationHandler</code> といったクラスが、<code>SyntheticInputStage</code> から「合成された」 InputEvent を送り出す。たとえばトラックボール由来の <code>MotionEvent</code> をスクロールのための矢印キーのイベントに、<code>MotionEvent</code> 全般を十字キーイベントに変換/合成(synthesis)したりする。トラックボールのあんどろデバイスとかあるんかいな・・・。</p>

<p>こうした脇道はさておくと、内部クラスである <code>WindowInputEventReceiver</code> が実質上唯一の <code>MotionEvent</code> 送付元のようだ。<code>processImmediately</code> は <code>true</code>. 同期配信。</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="c1">// WindowInputEventRecever は ViewRootImpl の内部クラス.</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">class</span> <span class="nc">WindowInputEventReceiver</span> <span class="kd">extends</span> <span class="n">InputEventReceiver</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">WindowInputEventReceiver</span><span class="o">(</span><span class="n">InputChannel</span> <span class="n">inputChannel</span><span class="o">,</span> <span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">inputChannel</span><span class="o">,</span> <span class="n">looper</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onInputEvent</span><span class="o">(</span><span class="n">InputEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">enqueueInputEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">WindowInputEventReceiver</span> <span class="n">mInputEventReceiver</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>クラス名から判断すると、この <code>WindowInputEventReceiver</code> およびスーパークラスの <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/InputEventReceiver.java"><code>InputEventReceiver</code></a> は <code>MotionEvent</code> などの入力イベントを処理するのに特化した専用の仕組みなのだろう。イベントを扱う他のコードは <code>ViewRootImpl#mHandler</code> という <a href="http://developer.android.com/reference/android/os/Handler.html"><code>Handler</code></a> オブジェクトを介するのが流儀に見える。わざわざ特別な <code>WindowInputEventReceiver</code> を使うのは不思議な気もする。性能上の事情があるのかもね。</p>

<h2>InputEventReceiver, InputChannel, Looper</h2>

<p><code>ViewRootImpl</code> は <code>InputEventReceiver</code> を介して <code>MotionEvent</code> を受け取っているようだ、ということがわかった。</p>

<p><a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/InputEventReceiver.java"><code>InputEventReceiver</code></a> は <a href="http://en.wikipedia.org/wiki/Template_method_pattern">Template Method</a> パターンでサブクラスの <code>onInputEvent()</code> を呼びだし、<code>InputEvent</code> (<code>MotionEvent</code>をふくむ) の到着を知らせる。でもいつどこからこれを呼び出すのだろう。ぱっと見ただけではよくわからない。 <code>onInputEvent()</code> を呼び出す <code>dispatchInputEvent()</code> は C++ 側から呼び出されるからだ。Java はこのへんで切り上げ、JNI のむこうにある C++ コードに駒を進めよう。</p>

<p><code>InputEventReciever.java</code> に対応する JNI の実装は <a href="https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputEventReceiver.cpp"><code>android_view_InputEventReceiver.cpp</code></a>。このファイルは <code>NativeInputEventReceiver</code> という (C++) クラスを定義している。Java 側のクラス構造をおおまかにマップした C++ クラスを作るのはあんどろ JNI 実装のイディオムらしく、目についた JNI のコードはだいたい似たようなパターンに従っていた。オブジェクトモデルを Java 側に任せきる伝統的な Java スタイルとは違い、どちらかというとブラウザの C++ と JS の関係っぽい。</p>

<p>参考までに <code>NativeInputEventReceiver</code> の定義はこんなかんじ:</p>

<figure class='code'><figcaption><span>android_view_InputEventReceiver.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputEventReceiver.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">NativeInputEventReceiver</span> <span class="o">:</span> <span class="k">public</span> <span class="n">LooperCallback</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">NativeInputEventReceiver</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
</span><span class='line'>            <span class="n">jobject</span> <span class="n">receiverWeak</span><span class="p">,</span> <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">inputChannel</span><span class="p">,</span>
</span><span class='line'>            <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">MessageQueue</span><span class="o">&gt;&amp;</span> <span class="n">messageQueue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">status_t</span> <span class="n">initialize</span><span class="p">();</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="n">status_t</span> <span class="n">consumeEvents</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">consumeBatches</span><span class="p">,</span> <span class="n">nsecs_t</span> <span class="n">frameTime</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">bool</span><span class="o">*</span> <span class="n">outConsumedBatch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Finish</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">uint32_t</span> <span class="n">seq</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">handled</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jobject</span> <span class="n">mReceiverWeakGlobal</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mFdEvents</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">handleEvent</span><span class="p">(</span><span class="kt">int</span> <span class="n">receiveFd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">events</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>jobject</code> 型の <code>mReceiverWeakGlobal</code> が Java のオブジェクトをさしている。</p>

<p>Java 側はこんなの:</p>

<figure class='code'><figcaption><span>InputEventReciever.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/InputEventReceiver.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">InputEventReceiver</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">long</span> <span class="nf">nativeInit</span><span class="o">(</span><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">InputEventReceiver</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="o">,</span>
</span><span class='line'>            <span class="n">InputChannel</span> <span class="n">inputChannel</span><span class="o">,</span> <span class="n">MessageQueue</span> <span class="n">messageQueue</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">nativeDispose</span><span class="o">(</span><span class="kt">long</span> <span class="n">receiverPtr</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">nativeFinishInputEvent</span><span class="o">(</span><span class="kt">long</span> <span class="n">receiverPtr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">handled</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">nativeConsumeBatchedInputEvents</span><span class="o">(</span><span class="kt">long</span> <span class="n">receiverPtr</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">frameTimeNanos</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">InputEventReceiver</span><span class="o">(</span><span class="n">InputChannel</span> <span class="n">inputChannel</span><span class="o">,</span> <span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">mInputChannel</span> <span class="o">=</span> <span class="n">inputChannel</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mMessageQueue</span> <span class="o">=</span> <span class="n">looper</span><span class="o">.</span><span class="na">getQueue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mReceiverPtr</span> <span class="o">=</span> <span class="n">nativeInit</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">InputEventReceiver</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">),</span>
</span><span class='line'>                <span class="n">inputChannel</span><span class="o">,</span> <span class="n">mMessageQueue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nativeDispose</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">finalize</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">mReceiverPtr</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We keep references to the input channel and message queue objects here so that</span>
</span><span class='line'>    <span class="c1">// they are not GC&#39;d while the native peer of the receiver is using them.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">InputChannel</span> <span class="n">mInputChannel</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MessageQueue</span> <span class="n">mMessageQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Called from native code.</span>
</span><span class='line'>    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unused&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchInputEvent</span><span class="o">(</span><span class="kt">int</span> <span class="n">seq</span><span class="o">,</span> <span class="n">InputEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mSeqMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSequenceNumber</span><span class="o">(),</span> <span class="n">seq</span><span class="o">);</span>
</span><span class='line'>        <span class="n">onInputEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Called from native code.</span>
</span><span class='line'>    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unused&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchBatchedInputEventPending</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onBatchedInputEventPending</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>native</code> とマークされたメソッドが複数。また <code>long</code> な <code>mReceiverPtr</code> に C++ 側オブジェクトへのポインタを持っている。Finalizer があるのも JNI っぽい。こうやって C++ と Java のクラスをミラーする流儀なんだね。</p>

<p>さて一瞬 Java に戻ると、<code>InputEventReceiver</code> には共に働くクラスが二つある: <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/InputChannel.java"><code>InputChannel</code></a> と <a href="http://developer.android.com/reference/android/os/Looper.html"><code>Looper</code></a> だ。 <code>InputEventReceiver</code> はこの二つのオブジェクトをコンストラクタの引数に受け取る。</p>

<h3>InputChannel</h3>

<p><code>InputChannel</code> も <code>Looper</code> も C++ にミラーしたオブジェクトのある C++ backed なクラス。</p>

<p><code>InputChannel</code> の JNI コード <a href="https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputChannel.cpp"><code>android_view_InputChannel.cpp</code></a> は <code>NativeInputChannel</code> クラスを定義している。でもこのクラスはほとんどなにもせず、別のクラス <code>android::InputChannel</code> をラップしているだけ。<code>android::InputChannel</code> が Java 側 <code>android.os.InputChannel</code> の実体だと言える。<code>InputChannel</code>(Java) -> <code>NativeInputChannel</code>(C++) -> <code>android::InputChannel</code>(C++) と間接化が二段階ある。この冗長さはきっと、 Java クラスの実装を C++ で書くのではなく C++ のクラスを Java 側に公開するという形で物事がデザインされ、中間の JNI にしわ寄せが来た結果だろうな、などと想像した。まあどうでもいい。</p>

<p>C++ 版 <code>InputChannel</code> は <a href="https://android.googlesource.com/platform/frameworks/native.git/+/master/include/input/InputTransport.h">InputTransport.h</a> に定義されている。</p>

<figure class='code'><figcaption><span>InputTransport.h </span><a href='https://android.googlesource.com/platform/frameworks/native.git/+/master/include/input/InputTransport.h'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * An input channel consists of a local unix domain socket used to send and receive</span>
</span><span class='line'><span class="cm"> * input messages across processes.  Each channel has a descriptive name for debugging purposes.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Each endpoint has its own InputChannel object that specifies its file descriptor.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The input channel is closed when all references to it are released.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InputChannel</span> <span class="o">:</span> <span class="k">public</span> <span class="n">RefBase</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">status_t</span> <span class="n">openInputChannelPair</span><span class="p">(</span><span class="k">const</span> <span class="n">String8</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>            <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">outServerChannel</span><span class="p">,</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">outClientChannel</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="n">String8</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">int</span> <span class="n">getFd</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mFd</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">status_t</span> <span class="n">sendMessage</span><span class="p">(</span><span class="k">const</span> <span class="n">InputMessage</span><span class="o">*</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">status_t</span> <span class="n">receiveMessage</span><span class="p">(</span><span class="n">InputMessage</span><span class="o">*</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">String8</span> <span class="n">mName</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mFd</span><span class="p">;</span> <span class="c1">// ファイルデスクリプタ</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>コメントや定義からわかるように、<code>InputChannel</code> は UNIX ドメインソケットをカプセル化し、そのソケット上で <code>InputMessage</code> 構造体を送受信するもののようだ。<code>InputEventReceiver</code> はこの <code>InputChannel</code> を通じ、どこかから届くイベントを受け取る。</p>

<p>ブラウザに似ていると書いたけれど、実際にはだいぶ違う。ブラウザでは(今のところ) DOM なんかの実装を JS で書く事はない。ぜんぶ C++ にコードがあって JS はそれをラップするだけ。オブジェクトグラフも C++ 側にある。あんどろのこのへんのコードは割と Java 側にもコードがあり、オブジェクトグラフにしても Java 側と C++ 側の両方がそれぞれ自分に必要なものをもっている。</p>

<p><img src="https://farm4.staticflickr.com/3842/14617932566_4411d153b9_b.jpg" alt="Java and JNI" /></p>

<p>一見グラフの同期が大変そうだけれど、いま見ているのは実装の詳細である非公開なクラスな上にグラフはおおむね immutable 。だから多少冗長でも大丈夫、ということらしい。いずれにせよフレキシブルというかアドホックというか、面白いね。</p>

<p>などと周辺事情をおさらいしたところで本題の <code>InputEventReceiver</code> に戻ろう。</p>

<p>C++ 側のコードに目をやると、<code>NativeInputEventReceiver</code> は <code>LooperCallback</code> なるクラスを継承している。</p>

<figure class='code'><figcaption><span>android_view_InputEventReceiver.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputEventReceiver.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">NativeInputEventReceiver</span> <span class="o">:</span> <span class="k">public</span> <span class="n">LooperCallback</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">handleEvent</span><span class="p">(</span><span class="kt">int</span> <span class="n">receiveFd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">events</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LooperCallback</code> は <a href="https://github.com/android/platform_system_core/blob/master/include/utils/Looper.h"><code>Looper.h</code></a> に定義されている。名前の通り <code>Looper</code> から通知を受け取るためのインターフェイス。引数にはファイルデスクリプタらしい整数値が渡されている。</p>

<p>このことから察しがつくように、<code>NativeInputEventReceiver</code> は <code>Looper</code> に自分自身を登録する。コードをみてみよう。</p>

<figure class='code'><figcaption><span>android_view_InputEventReceiver.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputEventReceiver.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">NativeInputEventReceiver</span><span class="o">::</span><span class="n">setFdEvents</span><span class="p">(</span><span class="kt">int</span> <span class="n">events</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mFdEvents</span> <span class="o">!=</span> <span class="n">events</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mFdEvents</span> <span class="o">=</span> <span class="n">events</span><span class="p">;</span>
</span><span class='line'>       <span class="c1">// mInputConsumer.getChannel() は InputChannel を返す</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">mInputConsumer</span><span class="p">.</span><span class="n">getChannel</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getFd</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">events</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// ここで登録。</span>
</span><span class='line'>            <span class="n">mMessageQueue</span><span class="o">-&gt;</span><span class="n">getLooper</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addFd</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mMessageQueue</span><span class="o">-&gt;</span><span class="n">getLooper</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">removeFd</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputChannel</code> のソケットデスクリプタを自分自身に紐づけ <code>Looper::addFd()</code> を呼び出している。</p>

<h2>Looper</h2>

<p>この <code>Looper</code> とは何だろう。</p>

<p>Java の世界、アプリケーションの側からみると、<code>android.os.Looper</code> はスレッドのイベントループを抽象化したオブジェクトだ。といっても公開された機能はすくなく、<a href="http://developer.android.com/reference/android/os/Looper.html">API</a> はループの開始終了くらいしかない。</p>

<p>C++ の世界から見ると、<code>android::Looper</code> は要するに <a href="http://linux.die.net/man/2/select"><code>select()</code></a> (または <a href="http://linux.die.net/man/4/epoll"><code>epoll</code></a>) だ。ファイルデスクリプタを登録しておき、読み書きの準備ができた際にコールバックを受け取る。</p>

<p>GUI のイベントループは OS の多重化 IO と同期機構の上に組み立てられる。だから <code>epoll</code> とイベントループが同じ名前で抽象化されるのは自然といえば自然だ。そして GUI プログラミングが <code>epoll</code> で非同期サーバーを書くようなものなら、ブロックするコードを書いて怒られるのも無理はない。今更ながら襟首をただす。</p>

<p>あんどろをはじめとする多くの GUI ツールキットは、足下に隠された多重化 IO をアプリケーションから隠している。Java や NDK から直接 <code>android::Looper</code> にアクセスすることはできない。</p>

<p>一方 Mac OS/iOS の <a href="https://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Run Loop</a> は多重化 IO としてのイベントループをアプリケーションプログラマに公開している。アプリケーションは多重化したいチャネル(ポート)をメインループに追加できる。これはきっと足下の Mach という OS がメッセージパッシングを重視している現れだろう。意外なところに出自が見えて面白い。</p>

<h3>届いたイベントの処理</h3>

<p>また脇道にそれた。ここまでのあらすじを振り返ると&#8230;</p>

<ul>
<li><code>ViewRootImpl</code> は <code>InputEvent</code> (<code>MotionEvent</code> を含む) を受け取るために <code>InputEventReceiver</code> を使う。このクラスは <code>InputChannel</code> が持つソケットデスクリプタを <code>Looper</code> に登録し、そのソケットに届いたバイト列をイベントに変換して利用者 (<code>ViewRootImpl</code>) に知らせる。</li>
<li><code>Looper</code> はイベントループの多重化 IO に参加する手段として <code>LooperCallback</code> を提供している。<code>LooperCallback</code> を使うとメインスレッドのイベントループに便乗してソケットのデータを待つ事が出来る。自分でスレッドを持たなくてよい。</li>
</ul>


<p><img src="https://farm4.staticflickr.com/3864/14459379568_d5341f9acb_b.jpg" alt="InputEventReceiver" /></p>

<p><code>NativeInputEventReceiver</code> がソケットに届いたデータをどうやって処理するか、少し覗いてみよう。エントリポイントは <code>handleEvent()</code>.</p>

<figure class='code'><figcaption><span>android_view_InputEventReceiver.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputEventReceiver.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">NativeInputEventReceiver</span><span class="o">::</span><span class="n">handleEvent</span><span class="p">(</span><span class="kt">int</span> <span class="n">receiveFd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">events</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">ALOOPER_EVENT_INPUT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">AndroidRuntime</span><span class="o">::</span><span class="n">getJNIEnv</span><span class="p">();</span>
</span><span class='line'>        <span class="n">status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">consumeEvents</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="kc">false</span> <span class="cm">/*consumeBatches*/</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mMessageQueue</span><span class="o">-&gt;</span><span class="n">raiseAndClearException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;handleReceiveCallback&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">status</span> <span class="o">==</span> <span class="n">OK</span> <span class="o">||</span> <span class="n">status</span> <span class="o">==</span> <span class="n">NO_MEMORY</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">ALOOPER_EVENT_OUTPUT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mFinishQueue</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">const</span> <span class="n">Finish</span><span class="o">&amp;</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">mFinishQueue</span><span class="p">.</span><span class="n">itemAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="n">status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">mInputConsumer</span><span class="p">.</span><span class="n">sendFinishedSignal</span><span class="p">(</span><span class="n">finish</span><span class="p">.</span><span class="n">seq</span><span class="p">,</span> <span class="n">finish</span><span class="p">.</span><span class="n">handled</span><span class="p">);</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>handleEvent()</code> は fd の準備ができると <code>Looper</code> から呼び出される。
その準備の結果、fd が読み出し可能 (<code>ALOOPER_EVENT_INPUT</code>) なら届いたデータを処理し(<code>consumeEvents()</code>)、
書き出し可能 (<code>ALOOPER_EVENT_OUTPUT</code>) なら ACK を送り返す。特に何も面白くない&#8230;</p>

<p>まあ ACK(<code>Finish</code> オブジェクト) の送付があるのは面白いといえば面白い。イベント配信なんて一方向通信で良さそうなものだけれど、なにか事情があるんだろうね。</p>

<p>一歩進んでデータを読み出す <code>conumeEvents()</code> を眺めてみると&#8230;</p>

<figure class='code'><figcaption><span>android_view_InputEventReceiver.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">NativeInputEventReceiver</span><span class="o">::</span><span class="n">consumeEvents</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">consumeBatches</span><span class="p">,</span> <span class="n">nsecs_t</span> <span class="n">frameTime</span><span class="p">,</span> <span class="kt">bool</span><span class="o">*</span> <span class="n">outConsumedBatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="n">ScopedLocalRef</span><span class="o">&lt;</span><span class="n">jobject</span><span class="o">&gt;</span> <span class="n">receiverObj</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">skipCallbacks</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">uint32_t</span> <span class="n">seq</span><span class="p">;</span>
</span><span class='line'>        <span class="n">InputEvent</span><span class="o">*</span> <span class="n">inputEvent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">mInputConsumer</span><span class="p">.</span><span class="n">consume</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mInputEventFactory</span><span class="p">,</span>
</span><span class='line'>                <span class="n">consumeBatches</span><span class="p">,</span> <span class="n">frameTime</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">inputEvent</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">receiverObj</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">gInputEventReceiverClassInfo</span><span class="p">.</span><span class="n">dispatchBatchedInputEventPending</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionCheck</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ALOGE</span><span class="p">(</span><span class="s">&quot;Exception dispatching batched input events.&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">mBatchedInputEventPending</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// try again later</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skipCallbacks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">jobject</span> <span class="n">inputEventObj</span><span class="p">;</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">inputEvent</span><span class="o">-&gt;</span><span class="n">getType</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AINPUT_EVENT_TYPE_MOTION:</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="n">MotionEvent</span><span class="o">*</span> <span class="n">motionEvent</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">MotionEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">inputEvent</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="n">motionEvent</span><span class="o">-&gt;</span><span class="n">getAction</span><span class="p">()</span> <span class="o">&amp;</span> <span class="n">AMOTION_EVENT_ACTION_MOVE</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">outConsumedBatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="o">*</span><span class="n">outConsumedBatch</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">inputEventObj</span> <span class="o">=</span> <span class="n">android_view_MotionEvent_obtainAsCopy</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">motionEvent</span><span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">inputEventObj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">receiverObj</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">gInputEventReceiverClassInfo</span><span class="p">.</span><span class="n">dispatchInputEvent</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">inputEventObj</span><span class="p">);</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>            <span class="p">}</span> <span class="p">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C++ のイベントを <code>mInputConsumer.consume()</code> でソケットから読み出し、それを Java のオブジェクトに変換して Java 側のレシーバ (<code>InputEventReceiver</code>) に通知していた。
Command-Query separation などと厳しく躾けられた身には厳しいコードですな&#8230;</p>

<h3>InputConsumer と Event Batching</h3>

<p>新たに登場した <code>mInputConsumer</code> は <code>InputConsumer</code> クラス。<code>InputChannel</code> を補助している。なぜこんな間接化が必要なのか。<code>InputConsumer::consume()</code> を覗いてみよう:</p>

<figure class='code'><figcaption><span>InputTransport.cpp </span><a href='https://android.googlesource.com/platform/frameworks/native.git/+/master/libs/input/InputTransport.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">InputConsumer</span><span class="o">::</span><span class="n">consume</span><span class="p">(</span><span class="n">InputEventFactoryInterface</span><span class="o">*</span> <span class="n">factory</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">consumeBatches</span><span class="p">,</span> <span class="n">nsecs_t</span> <span class="n">frameTime</span><span class="p">,</span> <span class="n">uint32_t</span><span class="o">*</span> <span class="n">outSeq</span><span class="p">,</span> <span class="n">InputEvent</span><span class="o">**</span> <span class="n">outEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="o">*</span><span class="n">outSeq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">outEvent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Fetch the next input message.</span>
</span><span class='line'>    <span class="c1">// Loop until an event can be returned or no additional events are received.</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!*</span><span class="n">outEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mMsgDeferred</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Receive a fresh message.</span>
</span><span class='line'>            <span class="n">status_t</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mChannel</span><span class="o">-&gt;</span><span class="n">receiveMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Consume the next batched event unless batches are being held for later.</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">consumeBatches</span> <span class="o">||</span> <span class="n">result</span> <span class="o">!=</span> <span class="n">WOULD_BLOCK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">consumeBatch</span><span class="p">(</span><span class="n">factory</span><span class="p">,</span> <span class="n">frameTime</span><span class="p">,</span> <span class="n">outSeq</span><span class="p">,</span> <span class="n">outEvent</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">outEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="p">...</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">mMsg</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AINPUT_EVENT_TYPE_MOTION:</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ssize_t</span> <span class="n">batchIndex</span> <span class="o">=</span> <span class="n">findBatch</span><span class="p">(</span><span class="n">mMsg</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">motion</span><span class="p">.</span><span class="n">deviceId</span><span class="p">,</span> <span class="n">mMsg</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">motion</span><span class="p">.</span><span class="n">source</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">batchIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Batch</span><span class="o">&amp;</span> <span class="n">batch</span> <span class="o">=</span> <span class="n">mBatches</span><span class="p">.</span><span class="n">editItemAt</span><span class="p">(</span><span class="n">batchIndex</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">canAddSample</span><span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mMsg</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">batch</span><span class="p">.</span><span class="n">samples</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">mMsg</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">...</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// We cannot append to the batch in progress, so we need to consume</span>
</span><span class='line'>                    <span class="c1">// the previous batch right now and defer the new message until later.</span>
</span><span class='line'>                    <span class="n">mMsgDeferred</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">status_t</span> <span class="n">result</span> <span class="o">=</span> <span class="n">consumeSamples</span><span class="p">(</span><span class="n">factory</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">batch</span><span class="p">,</span> <span class="n">batch</span><span class="p">.</span><span class="n">samples</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">outSeq</span><span class="p">,</span> <span class="n">outEvent</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">mBatches</span><span class="p">.</span><span class="n">removeAt</span><span class="p">(</span><span class="n">batchIndex</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">...</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// Start a new batch if needed.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">mMsg</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">motion</span><span class="p">.</span><span class="n">action</span> <span class="o">==</span> <span class="n">AMOTION_EVENT_ACTION_MOVE</span>
</span><span class='line'>                    <span class="o">||</span> <span class="n">mMsg</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">motion</span><span class="p">.</span><span class="n">action</span> <span class="o">==</span> <span class="n">AMOTION_EVENT_ACTION_HOVER_MOVE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">mBatches</span><span class="p">.</span><span class="n">push</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Batch</span><span class="o">&amp;</span> <span class="n">batch</span> <span class="o">=</span> <span class="n">mBatches</span><span class="p">.</span><span class="n">editTop</span><span class="p">();</span>
</span><span class='line'>                <span class="n">batch</span><span class="p">.</span><span class="n">samples</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">mMsg</span><span class="p">);</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">MotionEvent</span><span class="o">*</span> <span class="n">motionEvent</span> <span class="o">=</span> <span class="n">factory</span><span class="o">-&gt;</span><span class="n">createMotionEvent</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">motionEvent</span><span class="p">)</span> <span class="k">return</span> <span class="n">NO_MEMORY</span><span class="p">;</span>
</span><span class='line'>            <span class="n">updateTouchState</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="n">initializeMotionEvent</span><span class="p">(</span><span class="n">motionEvent</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="o">*</span><span class="n">outSeq</span> <span class="o">=</span> <span class="n">mMsg</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">motion</span><span class="p">.</span><span class="n">seq</span><span class="p">;</span>
</span><span class='line'>            <span class="o">*</span><span class="n">outEvent</span> <span class="o">=</span> <span class="n">motionEvent</span><span class="p">;</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UNKNOWN_ERROR</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputChannel::receiveMessage()</code> で <code>InputMessage</code> 型のオブジェクトを読み出す。そして <code>InputEventFactoryInterface</code> の助けを借り <code>InputMessage</code> を <code>InputEvent</code> に変換する。</p>

<p>型の変換以外にも見所はある。届いたメッセージを <em>batch</em> している。</p>

<p>一回のイベントループで届いた複数の <code>InputMessage</code> を単一の <code>InputEvent</code> にまとめる操作を、ここでは batch と呼んでいる。Batch されるのは特定のメッセージ、具体的には <code>AMOTION_EVENT_ACTION_MOVE</code> と <code>AMOTION_EVENT_ACTION_HOVER_MOVE</code> だけ。要するにまとめて届いた一連のタッチ軌道を一つの <code>MotionEvent</code> にまとめるのが batch 化だ。</p>

<p>Batch してできた軌跡は Java の世界にある <a href="http://developer.android.com/reference/android/view/MotionEvent.html"><code>MotionEvent</code></a> から取り出せる。そういえばお絵描きアプリを作っている友人がこの話をしていたなあ。イベントの情報は捨てずオーバーヘッドを減らす batch はタッチならでは。面白い。デスクトップとマウス相手なら間引いちゃえばいいからね大概・・・。</p>

<p>なお <code>MotionEvent</code> も C++ backed なクラスだった。<a href="https://android.googlesource.com/platform/frameworks/native.git/+/master/include/input/Input.h"><code>Input.h</code></a> に定義がある。別に JNI なんて使わずコピーで実装しても良さそうな気がするけど、それはゆとり世代なおっさんの考えなのだろう。<code>MotionEvent</code> 周辺コードではメモリ節約への気配りが見られる。まず先に登場した <code>InputEventFactoryInterface</code> からしてサブクラスの名前が <code>PreallocatedInputEventFactory</code> と <code>PooledInputEventFactory</code>. アロケーションを細工するための factory だった。batch のコードにも工夫がある。たとえばまとめるタッチ点の数が多すぎてメモリ確保に失敗するとタッチ点を &#8220;再サンプリング&#8221; して点数を減らす。芸が細かい。</p>

<h2>InputChannel::receiveMessage()</h2>

<p><code>receiveMessage()</code> はソケットからデータを読むと書いた。念のため確認しとこう。</p>

<figure class='code'><figcaption><span>InputTransport.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">InputChannel</span><span class="o">::</span><span class="n">receiveMessage</span><span class="p">(</span><span class="n">InputMessage</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ssize_t</span> <span class="n">nRead</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">nRead</span> <span class="o">=</span> <span class="o">::</span><span class="n">recv</span><span class="p">(</span><span class="n">mFd</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InputMessage</span><span class="p">),</span> <span class="n">MSG_DONTWAIT</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">nRead</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span> <span class="c1">// エラーチェック</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>構造体を sizeof() して読むだけ。よしよし。素朴でいいよ。</p>

<h2>InputChannel の対</h2>

<p>ここまでは <code>InputChannel</code> のソケットに届いたデータが <code>InputMessage</code>, <code>InputEvent</code> と姿を変えつつ <code>ViewRootImpl</code> に届くところを見届けた。</p>

<p>ではそもそも <code>InputChannel</code> のソケットに届くデータはどこからやってくるのだろう。<code>ViewRootImpl</code> に戻って <code>InputChannel</code> ができる様子を調べよう。</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * We have one child</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setView</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">View</span> <span class="n">panelParentView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="o">...</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">mWindowAttributes</span><span class="o">.</span><span class="na">inputFeatures</span>
</span><span class='line'>                        <span class="o">&amp;</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">INPUT_FEATURE_NO_INPUT_CHANNEL</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mInputChannel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputChannel</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="o">...</span>
</span><span class='line'>                    <span class="n">res</span> <span class="o">=</span> <span class="n">mWindowSession</span><span class="o">.</span><span class="na">addToDisplay</span><span class="o">(</span><span class="n">mWindow</span><span class="o">,</span> <span class="n">mSeq</span><span class="o">,</span> <span class="n">mWindowAttributes</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">getHostVisibility</span><span class="o">(),</span> <span class="n">mDisplay</span><span class="o">.</span><span class="na">getDisplayId</span><span class="o">(),</span>
</span><span class='line'>                            <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mContentInsets</span><span class="o">,</span> <span class="n">mInputChannel</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="o">...</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">...</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">mInputChannel</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">mInputQueueCallback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mInputQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputQueue</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">mInputQueueCallback</span><span class="o">.</span><span class="na">onInputQueueCreated</span><span class="o">(</span><span class="n">mInputQueue</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">mInputEventReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WindowInputEventReceiver</span><span class="o">(</span><span class="n">mInputChannel</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">...</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>setView()</code> という巨大な関数に一連の初期化があった。まず空の <code>InputChannel</code> をインスタンス化し、それを <code>mWindowSession.addToDisplay()</code> に渡したあと <code>WindowInputEventReceiver</code> のコンストラクタに届けている。
<code>InputChannel</code> のコンストラクタは何もしない空関数だから、怪しいのは <code>addToDisplay()</code> だ。 <code>mWindowSession</code> はどんなオブジェクトなのだろう。</p>

<h2>WindowSession と Binder</h2>

<p><code>mWindowSession</code> は <code>IWindowSession</code> インターフェイス型のフィールド。
あんどろの世界で <code>I</code> から始まる型は IPC 機構の Binder が <a href="http://developer.android.com/guide/components/aidl.html">AIDL</a> ファイルから生成したプロキシだ。
この <code>IWindowSession</code> にも対応する <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/IWindowSession.aidl"><code>IWindowSession.aidl</code></a> がある。
つまり <code>mWindowSession</code> は IPC のプロキシで、実体はたぶん別のプロセスにある。いちおう変数の出所を確認すると&#8230;</p>

<figure class='code'><figcaption><span>ViewRootImpl.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/ViewRootImpl.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ViewRootImpl</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Display</span> <span class="n">display</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mWindowSession</span> <span class="o">=</span> <span class="n">WindowManagerGlobal</span><span class="o">.</span><span class="na">getWindowSession</span><span class="o">();</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>コンストラクタの冒頭でグローバルの方から来た様子がわかる。そして&#8230;</p>

<figure class='code'><figcaption><span>WindowManagerGlobal.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">IWindowSession</span> <span class="nf">getWindowSession</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">WindowManagerGlobal</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sWindowSession</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">InputMethodManager</span> <span class="n">imm</span> <span class="o">=</span> <span class="n">InputMethodManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>                <span class="n">IWindowManager</span> <span class="n">windowManager</span> <span class="o">=</span> <span class="n">getWindowManagerService</span><span class="o">();</span>
</span><span class='line'>                <span class="n">sWindowSession</span> <span class="o">=</span> <span class="n">windowManager</span><span class="o">.</span><span class="na">openSession</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">imm</span><span class="o">.</span><span class="na">getClient</span><span class="o">(),</span> <span class="n">imm</span><span class="o">.</span><span class="na">getInputContext</span><span class="o">());</span>
</span><span class='line'>                <span class="kt">float</span> <span class="n">animatorScale</span> <span class="o">=</span> <span class="n">windowManager</span><span class="o">.</span><span class="na">getAnimationScale</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>                <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">setDurationScale</span><span class="o">(</span><span class="n">animatorScale</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to open window session&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sWindowSession</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IWindowSession</code> のインスタンスは <code>IWindowManager</code> という別の binder proxy から <code>openSession()</code> で取り出していた。
名前から察するに、<code>IWindowSession</code> はアプリケーションと WindowManager の接続単位として振る舞い、
その WindowManager とデータをやり取りするのだろう。<code>InputChannel</code> もやりとりされるデータの一部というわけだ。</p>

<p>&#8230;という仮説を確認すべく WindowSession の実装を探してみよう。</p>

<figure class='code'><figcaption><span>Session.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/services/java/com/android/server/wm/Session.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * This class represents an active client session.  There is generally one</span>
</span><span class='line'><span class="cm"> * Session object per process that is interacting with the window manager.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Session</span> <span class="kd">extends</span> <span class="n">IWindowSession</span><span class="o">.</span><span class="na">Stub</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">IBinder</span><span class="o">.</span><span class="na">DeathRecipient</span> <span class="o">{</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addToDisplay</span><span class="o">(</span><span class="n">IWindow</span> <span class="n">window</span><span class="o">,</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">,</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">attrs</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">viewVisibility</span><span class="o">,</span> <span class="kt">int</span> <span class="n">displayId</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">outContentInsets</span><span class="o">,</span>
</span><span class='line'>            <span class="n">InputChannel</span> <span class="n">outInputChannel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mService</span><span class="o">.</span><span class="na">addWindow</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">window</span><span class="o">,</span> <span class="n">seq</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">viewVisibility</span><span class="o">,</span> <span class="n">displayId</span><span class="o">,</span>
</span><span class='line'>                <span class="n">outContentInsets</span><span class="o">,</span> <span class="n">outInputChannel</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputChannel</code> を <code>mService</code> に引き渡している。それっぽい。このコードはどこか別のプロセスで動いている(はず)なのを思い出してほしい。</p>

<h2>Parcel とファイルデスクリプタ</h2>

<p><code>WindowSession</code> が binder のサービスなのはいいとして、一つ気になる事がある。
<code>InputChannel</code> は C++ のオブジェクトをラップしており、
そのオブジェクトはソケットのデスクリプタを持っていた。</p>

<figure class='code'><figcaption><span>InputTransport.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * An input channel consists of a local unix domain socket used to send and receive</span>
</span><span class='line'><span class="cm"> * input messages across processes.  Each channel has a descriptive name for debugging purposes.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Each endpoint has its own InputChannel object that specifies its file descriptor.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The input channel is closed when all references to it are released.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InputChannel</span> <span class="o">:</span> <span class="k">public</span> <span class="n">RefBase</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">String8</span> <span class="n">mName</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mFd</span><span class="p">;</span> <span class="c1">// これ</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>この fd, プロセスをまたいで送れるものなんだろうか。
Binder ではオブジェクトを <a href="http://developer.android.com/reference/android/os/Parcel.html">Parcel</a>という形式でバイト列に書き出す。
<code>InputChannel</code> の直列化コードを覗いてみよう。</p>

<figure class='code'><figcaption><span>android_view_InputChannel.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/core/jni/android_view_InputChannel.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">android_view_InputChannel_nativeWriteToParcel</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span>
</span><span class='line'>        <span class="n">jobject</span> <span class="n">parcelObj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Parcel</span><span class="o">*</span> <span class="n">parcel</span> <span class="o">=</span> <span class="n">parcelForJavaObject</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">parcelObj</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parcel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NativeInputChannel</span><span class="o">*</span> <span class="n">nativeInputChannel</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">android_view_InputChannel_getNativeInputChannel</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">nativeInputChannel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;</span> <span class="n">inputChannel</span> <span class="o">=</span> <span class="n">nativeInputChannel</span><span class="o">-&gt;</span><span class="n">getInputChannel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">parcel</span><span class="o">-&gt;</span><span class="n">writeInt32</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">parcel</span><span class="o">-&gt;</span><span class="n">writeString8</span><span class="p">(</span><span class="n">inputChannel</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">());</span>
</span><span class='line'>            <span class="n">parcel</span><span class="o">-&gt;</span><span class="n">writeDupFileDescriptor</span><span class="p">(</span><span class="n">inputChannel</span><span class="o">-&gt;</span><span class="n">getFd</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">parcel</span><span class="o">-&gt;</span><span class="n">writeInt32</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>parcel-&gt;writeDupFileDescriptor()</code> なんて API を使っている。どうも Binder はふつうにファイルデスクリプタを送れるらしい。</p>

<p>私の記憶によれば、Linux で別プロセスに fd を送るには複雑怪奇なシステムコールが必要なはず。
Parcel のバイト列に埋もれた fd をどうやってその手のシステムコールにつないでいるのだろうか。
答えを求め <a href="https://android.googlesource.com/platform/frameworks/native.git/+/master/libs/binder/Parcel.cpp"><code>Parcel.cpp</code></a> を覗く。</p>

<figure class='code'><figcaption><span>Parcel.cpp </span><a href='https://android.googlesource.com/platform/frameworks/native.git/+/master/libs/binder/Parcel.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">Parcel</span><span class="o">::</span><span class="n">writeFileDescriptor</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">takeOwnership</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">flat_binder_object</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">BINDER_TYPE_FD</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="mh">0x7f</span> <span class="o">|</span> <span class="n">FLAT_BINDER_FLAG_ACCEPTS_FDS</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">binder</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* Don&#39;t pass uninitialized stack data to a remote process */</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">cookie</span> <span class="o">=</span> <span class="n">takeOwnership</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">writeObject</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">status_t</span> <span class="n">Parcel</span><span class="o">::</span><span class="n">writeObject</span><span class="p">(</span><span class="k">const</span> <span class="n">flat_binder_object</span><span class="o">&amp;</span> <span class="n">val</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">nullMetaData</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">bool</span> <span class="n">enoughData</span> <span class="o">=</span> <span class="p">(</span><span class="n">mDataPos</span><span class="o">+</span><span class="k">sizeof</span><span class="p">(</span><span class="n">val</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="n">mDataCapacity</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">bool</span> <span class="n">enoughObjects</span> <span class="o">=</span> <span class="n">mObjectsSize</span> <span class="o">&lt;</span> <span class="n">mObjectsCapacity</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">enoughData</span> <span class="o">&amp;&amp;</span> <span class="n">enoughObjects</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nl">restart_write:</span>
</span><span class='line'>        <span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">flat_binder_object</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">mData</span><span class="o">+</span><span class="n">mDataPos</span><span class="p">)</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Need to write meta-data?</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">nullMetaData</span> <span class="o">||</span> <span class="n">val</span><span class="p">.</span><span class="n">binder</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mObjects</span><span class="p">[</span><span class="n">mObjectsSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">mDataPos</span><span class="p">;</span>
</span><span class='line'>            <span class="n">acquire_object</span><span class="p">(</span><span class="n">ProcessState</span><span class="o">::</span><span class="n">self</span><span class="p">(),</span> <span class="n">val</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="n">mObjectsSize</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">....</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">finishWrite</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">flat_binder_object</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>んー。構造体 <code>flat_binder_object</code> として適当なタグをつけた fd をつくり、それをバイト列に書き込んでいるだけ&#8230;のように見える&#8230;</p>

<p>その後 <a href="https://android.googlesource.com/platform/frameworks/native.git/+/master/libs/binder/">libs/binder/</a> のコードをしばらく眺めたものの、
結局そのバイト列は <code>/dev/binder</code> というファイルに <code>ioctl()</code> で渡されるだけだとわかった。</p>

<p>細工はこの <code>/dev/binder</code> にある。</p>

<p>Binder にはカーネルドライバがある。そしてそのドライバがカーネル空間の力でファイルデスクリプタを別プロセスに引き渡している。だから変なシステムコールに頼る必要もない。
(自分で変なシステムコールを実装しているとも言える。)
よく見ると先に登場した <code>flat_binder_object</code> もカーネルの中、<a href="https://github.com/torvalds/linux/blob/master/drivers/staging/android/uapi/binder.h">binder.h</a> に定義がある。</p>

<p>そういえば Binder はクロスプロセスなオブジェクトの寿命管理なんかもカーネルにやらせていてクール、みたいな話をどこかで聞いたことがある。
ファイルデスクリプタ受け渡しもそういうクールな何かの一部なのですね。</p>

<p>カーネルのドライバ <a href="https://github.com/torvalds/linux/blob/master/drivers/staging/android/binder.c">binder.c</a> をみると&#8230;</p>

<figure class='code'><figcaption><span>binder.c </span><a href='https://github.com/torvalds/linux/blob/master/drivers/staging/android/binder.c'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">binder_transaction</span><span class="p">(</span><span class="k">struct</span> <span class="n">binder_proc</span> <span class="o">*</span><span class="n">proc</span><span class="p">,</span>
</span><span class='line'>                               <span class="k">struct</span> <span class="n">binder_thread</span> <span class="o">*</span><span class="kr">thread</span><span class="p">,</span>
</span><span class='line'>                               <span class="k">struct</span> <span class="n">binder_transaction_data</span> <span class="o">*</span><span class="n">tr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">reply</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>        <span class="n">off_end</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">offp</span> <span class="o">+</span> <span class="n">tr</span><span class="o">-&gt;</span><span class="n">offsets_size</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(;</span> <span class="n">offp</span> <span class="o">&lt;</span> <span class="n">off_end</span><span class="p">;</span> <span class="n">offp</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">flat_binder_object</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">fp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">flat_binder_object</span> <span class="o">*</span><span class="p">)(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">buffer</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+</span> <span class="o">*</span><span class="n">offp</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">BINDER_TYPE_FD:</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">fp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">flat_binder_object</span> <span class="o">*</span><span class="p">)(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">buffer</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+</span> <span class="o">*</span><span class="n">offp</span><span class="p">);</span>
</span><span class='line'>                <span class="n">file</span> <span class="o">=</span> <span class="n">fget</span><span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="n">target_fd</span> <span class="o">=</span> <span class="n">task_get_unused_fd_flags</span><span class="p">(</span><span class="n">target_proc</span><span class="p">,</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="n">task_fd_install</span><span class="p">(</span><span class="n">target_proc</span><span class="p">,</span> <span class="n">target_fd</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
</span><span class='line'>                <span class="p">....</span>
</span><span class='line'>             <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>             <span class="p">...</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * copied from fd_install</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">task_fd_install</span><span class="p">(</span>
</span><span class='line'>       <span class="k">struct</span> <span class="n">binder_proc</span> <span class="o">*</span><span class="n">proc</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">proc</span><span class="o">-&gt;</span><span class="n">files</span><span class="p">)</span>
</span><span class='line'>     <span class="n">__fd_install</span><span class="p">(</span><span class="n">proc</span><span class="o">-&gt;</span><span class="n">files</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>ふつうにプロセスのデスクリプタテーブルをいじっているのだった。ドライバ書くの便利だな・・・。</p>

<p>なお素の Linux ではファイルデスクリプタを送受信するのに <a href="http://man7.org/linux/man-pages/man2/recvmmsg.2.html">recvmsg()</a>/<a href="http://man7.org/linux/man-pages/man2/sendmmsg.2.html">sendmsg()</a>
という API を使うのだけれど、その事実は man を読んでも全然わからない。<a href="http://www.amazon.co.jp/The-Linux-Programming-Interface-Handbook-ebook/dp/B004OEJMZM%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB004OEJMZM"> The Linux Programming Interface </a> (<a href="http://www.amazon.co.jp/Linux%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9-Michael-Kerrisk/dp/487311585X%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D487311585X"> 日本語訳 </a>) というシステムコールマニア向け読み物には説明がある。が、知らないよそんなの・・・。Mac OS/Mach は <a href="https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/KernelProgramming/Mach/Mach.html">Port</a> という IPC の仕組みにけっこうな労力を割いており、その Port はプロセス間で難なく受け渡す事ができる。<a href="http://www.amazon.co.jp/Mac-OS-Internals-Systems-Approach-ebook/dp/B004Y4UTLI%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB004Y4UTLI"> Mac OS X Internals </a> とかにも説明があったはず。IPC には OS の個性が見える、かも。</p>

<p><a href="http://www.amazon.co.jp/Linux%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9-Michael-Kerrisk/dp/487311585X%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D487311585X"><img class="asin" src="http://ecx.images-amazon.com/images/I/51hm94xagHL.jpg" title=" 日本語訳 " /></a></p>

<p><a href="http://www.amazon.co.jp/Mac-OS-Internals-Systems-Approach-ebook/dp/B004Y4UTLI%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB004Y4UTLI"><img class="asin" src="http://ecx.images-amazon.com/images/I/51qUBVj6v2L.jpg" title=" Mac OS X Internals " /></a></p>

<h2>前半の道のり</h2>

<p>話がそれた。</p>

<p>ここまでの道のりを振り返ると:</p>

<ul>
<li><code>View</code> に届く <code>MotionEvent</code> は親の <code>ViewGroup</code> か <code>ViewRootImpl</code> から届く。</li>
<li><code>ViewRootImpl</code> は <code>InputStage</code> フレームワークで配信前のイベントに細工をする。ただし <code>MotionEvent</code> に大きな影響はない。</li>
<li><code>ViewRootImpl</code> は <code>InputEventReceiver</code> を介し <code>InputChannel</code> のソケットから <code>MotionEvent</code> を読み出す。

<ul>
<li>ソケットには <code>InputMessage</code> 構造体が書き込まれている。</li>
<li><code>Looper</code> を使いメインスレッドのイベントループに便乗してソケットを監視。</li>
<li><code>MotionEvent</code> には複数の <code>InputMessage</code> を batch する。</li>
</ul>
</li>
<li><code>InputChannel</code> は Binder オブジェクトの <code>IWindowSession</code> から取り出す。ソケットの反対側は別プロセス。</li>
</ul>


<p><img src="https://farm4.staticflickr.com/3909/14664868043_618fe5ec38_b_d.jpg" alt="Application process" /></p>

<p>イベントやメッセージの配信を調べるときはキューの存在が一里塚になると先に書いた。
ここまでだと、まず <code>ViewRootImpl</code> が <code>QueuedInputEvent</code> というキューを持っていた。
ただし <code>MotionEvent</code> がこのキューに長くとどまる事はなく、だいたい同期的に配信される。</p>

<p>もう一つのキューは <code>InputChannel</code> のソケット。共有メモリでも使わない限りプロセス間には何らかの通信経路が必要だから、
ここにキューがあるのは自然だ。つまりプロセスの中に限ると、主要なパスでは <code>MotionEvent</code> を同期的に配信している。結構がんばってるとおもう。</p>

<h2>WindowManagerService</h2>

<p>というわけで View のあるプロセスを離れ、 <code>InputChannel</code> の反対側にあるプロセスに話を進めよう。
Window Manager が住むそのプロセスで、誰が <code>InputChannel</code> にデータを送り込むのだろう。</p>

<p><code>WindowSession</code> の実装である <code>Session</code> クラスは,
<code>InputChannel</code> を初期化する <code>addToDisplay()</code> の処理を
<code>WindowManagerService#addWindow()</code> に委譲している。
その <code>addWindow()</code> はというと:</p>

<figure class='code'><figcaption><span>WindowManagerService.java </span><a href='https://github.com/android/platform_frameworks_base/blob/master/services/java/com/android/server/wm/WindowManagerService.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addWindow</span><span class="o">(</span><span class="n">Session</span> <span class="n">session</span><span class="o">,</span> <span class="n">IWindow</span> <span class="n">client</span><span class="o">,</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">,</span>
</span><span class='line'>            <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">viewVisibility</span><span class="o">,</span> <span class="kt">int</span> <span class="n">displayId</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Rect</span> <span class="n">outContentInsets</span><span class="o">,</span> <span class="n">InputChannel</span> <span class="n">outInputChannel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">outInputChannel</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">attrs</span><span class="o">.</span><span class="na">inputFeatures</span>
</span><span class='line'>                    <span class="o">&amp;</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">INPUT_FEATURE_NO_INPUT_CHANNEL</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">win</span><span class="o">.</span><span class="na">makeInputChannelName</span><span class="o">();</span>
</span><span class='line'>                <span class="n">InputChannel</span><span class="o">[]</span> <span class="n">inputChannels</span> <span class="o">=</span> <span class="n">InputChannel</span><span class="o">.</span><span class="na">openInputChannelPair</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>                <span class="n">win</span><span class="o">.</span><span class="na">setInputChannel</span><span class="o">(</span><span class="n">inputChannels</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>                <span class="n">inputChannels</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">transferTo</span><span class="o">(</span><span class="n">outInputChannel</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">mInputManager</span><span class="o">.</span><span class="na">registerInputChannel</span><span class="o">(</span><span class="n">win</span><span class="o">.</span><span class="na">mInputChannel</span><span class="o">,</span> <span class="n">win</span><span class="o">.</span><span class="na">mInputWindowHandle</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputChannel#openInputChannelPair()</code> で通信の両端となる <code>InputChannel</code> の対を作り、一端を <code>mInputManager</code> に、もう一旦を呼び出し元に返している。</p>

<p>いちおう確認しておくと <code>openInputChannelPair()</code> は <code>InputChannel</code> を <code>socketpair()</code> の糖衣にすぎない。特段すごい何かではない。</p>

<figure class='code'><figcaption><span>InputTransport.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">InputChannel</span><span class="o">::</span><span class="n">openInputChannelPair</span><span class="p">(</span><span class="k">const</span> <span class="n">String8</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">outServerChannel</span><span class="p">,</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">outClientChannel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sockets</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">socketpair</span><span class="p">(</span><span class="n">AF_UNIX</span><span class="p">,</span> <span class="n">SOCK_SEQPACKET</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sockets</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">serverChannelName</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot; (server)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">outServerChannel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputChannel</span><span class="p">(</span><span class="n">serverChannelName</span><span class="p">,</span> <span class="n">sockets</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">clientChannelName</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot; (client)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">outClientChannel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputChannel</span><span class="p">(</span><span class="n">clientChannelName</span><span class="p">,</span> <span class="n">sockets</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>万一 <code>socketpair()</code> などを勉強したい人がいたら <a href="http://www.amazon.co.jp/UNIX%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%88Vol-1%E3%80%89%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AFAPI-%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%81%A8XTI-W-%E3%83%AA%E3%83%81%E3%83%A3%E3%83%BC%E3%83%89-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%82%B9/dp/4894712059%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4894712059"> Stevens の本 </a> でも読んでおけばいいんじゃないでしょうか。</p>

<p><a href="http://www.amazon.co.jp/UNIX%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%88Vol-1%E3%80%89%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AFAPI-%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%81%A8XTI-W-%E3%83%AA%E3%83%81%E3%83%A3%E3%83%BC%E3%83%89-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%82%B9/dp/4894712059%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4894712059"><img class="asin" src="http://ecx.images-amazon.com/images/I/213B9PVJD1L.jpg" title=" Stevens の本 " /></a></p>

<p>さて新たに作られた <code>InputChannel</code> の一端を担う <code>mInputManager</code>。クラスは <code>InputManagerService</code> だった。いかにも <code>InputEvent</code> がらみの気配がする名前。
これも C++ backed なクラスで、 <code>registerInputChannel()</code> の実装も
<a href="https://github.com/android/platform_frameworks_base/blob/master/services/jni/com_android_server_input_InputManagerService.cpp">C++ 側</a> にある。</p>

<figure class='code'><figcaption><span>com_android_server_input_InputManagerService.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">status_t</span> <span class="n">NativeInputManager</span><span class="o">::</span><span class="n">registerInputChannel</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">inputChannel</span><span class="p">,</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputWindowHandle</span><span class="o">&gt;&amp;</span> <span class="n">inputWindowHandle</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">monitor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mInputManager</span><span class="o">-&gt;</span><span class="n">getDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">registerInputChannel</span><span class="p">(</span>
</span><span class='line'>            <span class="n">inputChannel</span><span class="p">,</span> <span class="n">inputWindowHandle</span><span class="p">,</span> <span class="n">monitor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>backing class たる &#8216;android::InputManager<code>が持つ [</code>InputDispatcher`](<a href="https://github.com/android/platform_frameworks_base/blob/master/services/input/InputDispatcher.cpp">https://github.com/android/platform_frameworks_base/blob/master/services/input/InputDispatcher.cpp</a>) に丸投げ。
でもこの名前、いかにもイベント配信してそうなクラスじゃないですか&#8230;</p>

<h2>InputDispatcher</h2>

<figure class='code'><figcaption><span>InputDispatcher.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">status_t</span> <span class="n">InputDispatcher</span><span class="o">::</span><span class="n">registerInputChannel</span><span class="p">(</span><span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;&amp;</span> <span class="n">inputChannel</span><span class="p">,</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputWindowHandle</span><span class="o">&gt;&amp;</span> <span class="n">inputWindowHandle</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">monitor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="c1">// acquire lock</span>
</span><span class='line'>        <span class="n">AutoMutex</span> <span class="n">_l</span><span class="p">(</span><span class="n">mLock</span><span class="p">);</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">&lt;</span><span class="n">Connection</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Connection</span><span class="p">(</span><span class="n">inputChannel</span><span class="p">,</span> <span class="n">inputWindowHandle</span><span class="p">,</span> <span class="n">monitor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">inputChannel</span><span class="o">-&gt;</span><span class="n">getFd</span><span class="p">();</span>
</span><span class='line'>        <span class="n">mConnectionsByFd</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">connection</span><span class="p">);</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">mLooper</span><span class="o">-&gt;</span><span class="n">addFd</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ALOOPER_EVENT_INPUT</span><span class="p">,</span> <span class="n">handleReceiveCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="c1">// release lock</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Wake the looper because some connections have changed.</span>
</span><span class='line'>    <span class="n">mLooper</span><span class="o">-&gt;</span><span class="n">wake</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>InputDispatcher</code> は <code>InputChannel</code> を <code>Connection</code> オブジェクトでラップした上で <code>mConnectionsByFd</code> に保存し、かつそのファイルデスクリプタを自身の持つ <code>Looper</code> に登録していた。
やはり <code>InputDispatcher</code> &#8230; または仲間の <code>Connection</code> がソケットの一端であるのは間違いなさそうだ。</p>

<p>InputDispatcher の定義をみるとイベントループ <code>Looper</code> を持っている。
そしてそれらしいキューもある。</p>

<figure class='code'><figcaption><span>InputDispatcher.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">InputDispatcher</span> <span class="o">:</span> <span class="k">public</span> <span class="n">InputDispatcherInterface</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;</span> <span class="n">mLooper</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">EventEntry</span><span class="o">*</span> <span class="n">mPendingEvent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">EventEntry</span><span class="o">&gt;</span> <span class="n">mInboundQueue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">EventEntry</span><span class="o">&gt;</span> <span class="n">mRecentQueue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">CommandEntry</span><span class="o">&gt;</span> <span class="n">mCommandQueue</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>Connection</code> は <code>InputDispatcher</code> 内の nested class. <code>InputChannel</code> に加え、キューも持っている。</p>

<figure class='code'><figcaption><span>InputDispatcher.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Connection</span> <span class="o">:</span> <span class="k">public</span> <span class="n">RefBase</span> <span class="p">{</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Connection</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputChannel</span><span class="o">&gt;</span> <span class="n">inputChannel</span><span class="p">;</span> <span class="c1">// never null</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputWindowHandle</span><span class="o">&gt;</span> <span class="n">inputWindowHandle</span><span class="p">;</span> <span class="c1">// may be null</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">InputPublisher</span> <span class="n">inputPublisher</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Queue of events that need to be published to the connection.</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">DispatchEntry</span><span class="o">&gt;</span> <span class="n">outboundQueue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Queue of events that have been published to the connection but that have not</span>
</span><span class='line'>    <span class="c1">// yet received a &quot;finished&quot; response from the application.</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">DispatchEntry</span><span class="o">&gt;</span> <span class="n">waitQueue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして更によくみると <code>InputDispatcherThread</code> なんてクラスまである。</p>

<figure class='code'><figcaption><span>InputDispatcher.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/* Enqueues and dispatches input events, endlessly. */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InputDispatcherThread</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Thread</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">InputDispatcherThread</span><span class="p">(</span><span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputDispatcherInterface</span><span class="o">&gt;&amp;</span> <span class="n">dispatcher</span><span class="p">);</span>
</span><span class='line'>    <span class="o">~</span><span class="n">InputDispatcherThread</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">threadLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">InputDispatcherInterface</span><span class="o">&gt;</span> <span class="n">mDispatcher</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// InputManager.cpp</span>
</span><span class='line'><span class="kt">void</span> <span class="n">InputManager</span><span class="o">::</span><span class="n">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mReaderThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputReaderThread</span><span class="p">(</span><span class="n">mReader</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mDispatcherThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputDispatcherThread</span><span class="p">(</span><span class="n">mDispatcher</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>InputDispatcher::Connection::outboundQueue</code>, <code>InputDispatcher::inboundQueue</code>, <code>InputDispatcher::mLooper</code> そして <code>InputDispatcherThread</code>。
<code>InputDispatcher</code> は自身のスレッドとイベントループをもち、キューにため込んだデータをいくつかの <code>InputChannel</code> に書き出すようなクラスだ&#8230;と想像できる。
疲れてきたので詳しくは調べないけれど、読んでみるとだいたいそんなかんじだった。</p>

<h2>InputReader</h2>

<p>では <code>InputDispatcher</code> のキューにデータを詰めるのは誰か。
というとすぐ隣に <a href="https://github.com/android/platform_frameworks_base/blob/master/services/input/InputReader.cpp"><code>InputReader</code></a> なるクラスがある。</p>

<figure class='code'><figcaption><span>InputReader.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/services/input/InputReader.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InputReader</span> <span class="o">:</span> <span class="k">public</span> <span class="n">InputReaderInterface</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">EventHubInterface</span><span class="o">&gt;</span> <span class="n">mEventHub</span><span class="p">;</span>
</span><span class='line'>    <span class="n">KeyedVector</span><span class="o">&lt;</span><span class="n">int32_t</span><span class="p">,</span> <span class="n">InputDevice</span><span class="o">*&gt;</span> <span class="n">mDevices</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>いかにも怪しい名前のオブジェクト <code>InputDevice</code> を持っている。加えて <code>InputReaderThread</code> まであり、つまりこの <code>InputReader</code> も自分のスレッドを持っている。
そして自分のスレッドで <code>EventHub</code> や <code>InputDevice</code> としてカプセル化された入力デバイスからの入力を待つ。</p>

<p><code>InputManager</code>, <code>InputReader</code>, <code>InputDispatcher</code>。ざっと眺めたけれど、これらのクラスはいま以上に細かく見ても面白くない。
各クラスやスレッドとキューの関係をながめ、さっさと先に進みたい。</p>

<ul>
<li><em>InputDispatcher</em>: <code>InputDispatcher</code> は自分のスレッドで <code>Looper</code> をまわし、<code>InputChannel</code> にデータを書き込む。<code>InputDispatcher</code> への入力は <code>InputDispatcher::mInboundQueue</code> に詰められる。そしてこのキューをとりだし、配送先をみて適切な <code>InputChannel</code> (フォーカスのある Window に紐づいた <code>InputChannel</code>) に書き込む。</li>
<li><em>InputReader</em>: <code>InputReader</code> も自分でスレッドを持っている。そのスレッドで <code>EventHub</code> からデータを読み出す。読み出したデータは <code>InputDispatcher</code> に通知される。</li>
<li><em>InputManager</em>: <code>InputDispatcher</code> と <code>InputReader</code> の寿命を管理する。</li>
<li><code>InputDispatcher</code> と <code>InputReader</code> の間には <code>QueuedInputListener</code> と呼ばれるキューが挟まっている。ただしこのキューにイベントが長居することはない。</li>
</ul>


<p>図で書いてお茶を濁すとこんなかんじ:</p>

<p><img src="https://farm3.staticflickr.com/2917/14454313768_a0d76eb355_b_d.jpg" alt="Input related classes" /></p>

<h2>EventHub</h2>

<p><code>InputReader</code> が持つ <code>EventHub</code> はカーネルからユーザランドにタッチを届ける最初のオブジェクト。
ようやく下には Linux しかない階にたどり着いた。コンストラクタからしてそれっぽい。</p>

<figure class='code'><figcaption><span>EventHub.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">EventHub</span><span class="o">::</span><span class="n">EventHub</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span> <span class="p">...</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="n">mEpollFd</span> <span class="o">=</span> <span class="n">epoll_create</span><span class="p">(</span><span class="n">EPOLL_SIZE_HINT</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">mINotifyFd</span> <span class="o">=</span> <span class="n">inotify_init</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">inotify_add_watch</span><span class="p">(</span><span class="n">mINotifyFd</span><span class="p">,</span> <span class="n">DEVICE_PATH</span><span class="p">,</span> <span class="n">IN_DELETE</span> <span class="o">|</span> <span class="n">IN_CREATE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">eventItem</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">eventItem</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">eventItem</span><span class="p">));</span>
</span><span class='line'>    <span class="n">eventItem</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">EPOLLIN</span><span class="p">;</span>
</span><span class='line'>    <span class="n">eventItem</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">u32</span> <span class="o">=</span> <span class="n">EPOLL_ID_INOTIFY</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">mEpollFd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">mINotifyFd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eventItem</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">wakeFds</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">(</span><span class="n">wakeFds</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">mWakeReadPipeFd</span> <span class="o">=</span> <span class="n">wakeFds</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">mWakeWritePipeFd</span> <span class="o">=</span> <span class="n">wakeFds</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">mWakeReadPipeFd</span><span class="p">,</span> <span class="n">F_SETFL</span><span class="p">,</span> <span class="n">O_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">mWakeWritePipeFd</span><span class="p">,</span> <span class="n">F_SETFL</span><span class="p">,</span> <span class="n">O_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">mEpollFd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">mWakeReadPipeFd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eventItem</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>inotify</code>, <code>fcntl</code>, <code>epoll</code> に <code>pipe</code>&#8230; なんとなくサーバのコードを読んでるみたいで落ち着く。
<code>inotify</code> を使っているのはデバイスの動的な追加や削除に対応するため。
<code>Looper</code> を使わず <code>epoll</code> を直接呼んでいるのはなぜ？とかは気にしないでおく。たぶんたいした理由はなかろう。</p>

<p>肝心なデバイスたちを追加するコードは <code>EventHub::scanDirLocked()</code>.</p>

<figure class='code'><figcaption><span>EventHub.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">status_t</span> <span class="n">EventHub</span><span class="o">::</span><span class="n">scanDirLocked</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dirname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">devname</span><span class="p">[</span><span class="n">PATH_MAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">;</span>
</span><span class='line'>    <span class="n">DIR</span> <span class="o">*</span><span class="n">dir</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">dirent</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dir</span> <span class="o">=</span> <span class="n">opendir</span><span class="p">(</span><span class="n">dirname</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">devname</span><span class="p">,</span> <span class="n">dirname</span><span class="p">);</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">devname</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">devname</span><span class="p">);</span>
</span><span class='line'>    <span class="o">*</span><span class="n">filename</span><span class="o">++</span> <span class="o">=</span> <span class="sc">&#39;/&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">readdir</span><span class="p">(</span><span class="n">dir</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="p">(</span><span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">strcpy</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">);</span>
</span><span class='line'>        <span class="n">openDeviceLocked</span><span class="p">(</span><span class="n">devname</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">closedir</span><span class="p">(</span><span class="n">dir</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんというか、C++ というより C なかんじのコードですな。
<code>openDeviceLocked()</code> の中身はひたすら <code>ioctl()</code> してデバイスの種別を検出する
コードがだらだらと書かれている。読むと疲れるから省略。
こうして開かれたデバイスたちが epoll 経由で監視され、状態を読み出される。それだけ知っていればいい気がする。</p>

<h2>input_event</h2>

<p><code>epoll_wait()</code> をラップする <code>EventHub::getEvents()</code> を見ると、
デバイスたちとどんなデータ形式で情報をやり取りするのか垣間みる事ができる。</p>

<figure class='code'><figcaption><span>EventHub.cpp </span><a href='https://github.com/android/platform_frameworks_base/blob/master/services/input/EventHub.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">EventHub</span><span class="o">::</span><span class="n">getEvents</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeoutMillis</span><span class="p">,</span> <span class="n">RawEvent</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">bufferSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">input_event</span> <span class="n">readBuffer</span><span class="p">[</span><span class="n">bufferSize</span><span class="p">];</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>            <span class="k">const</span> <span class="k">struct</span> <span class="n">epoll_event</span><span class="o">&amp;</span> <span class="n">eventItem</span> <span class="o">=</span> <span class="n">mPendingEventItems</span><span class="p">[</span><span class="n">mPendingEventIndex</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>            <span class="n">ssize_t</span> <span class="n">deviceIndex</span> <span class="o">=</span> <span class="n">mDevices</span><span class="p">.</span><span class="n">indexOfKey</span><span class="p">(</span><span class="n">eventItem</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">u32</span><span class="p">);</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">Device</span><span class="o">*</span> <span class="n">device</span> <span class="o">=</span> <span class="n">mDevices</span><span class="p">.</span><span class="n">valueAt</span><span class="p">(</span><span class="n">deviceIndex</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">eventItem</span><span class="p">.</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">EPOLLIN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="n">int32_t</span> <span class="n">readSize</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">device</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">readBuffer</span><span class="p">,</span>
</span><span class='line'>                        <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">input_event</span><span class="p">)</span> <span class="o">*</span> <span class="n">capacity</span><span class="p">);</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>input_event</code> なる構造体を読み出している。</p>

<p>これは Linux が定義する構造体。入力デバイス用ドライバ仕様の一部として<a href="https://www.kernel.org/doc/Documentation/input/input.txt">文書化されている</a>。</p>

<p>Linux 側だけでなく、あんどろ側でも <code>InputReader</code> 周辺のコードについては<a href="http://source.android.com/devices/tech/input/overview.html">簡単な説明</a>がある。
自分のデバイスにあんどろを移植したい人が読む資料のひとつらしい。コード読まなくてもよかったじゃん&#8230;
アプリケーションの奥に潜ったつもりが反対側の玄関に出てしまった気分。</p>

<p>今回の主題タッチイベントについても<a href="http://source.android.com/devices/tech/input/touch-devices.html">きちんと説明があり</a>、
しかも結局のところ <a href="https://www.kernel.org/doc/Documentation/input/multi-touch-protocol.txt">Linux のドライバの仕様</a> に従いましょう、という結論のよう。
なるほどこれが Linux をベースにするということかとやや感心した。もうちょっと変な事をやってるもんだと勝手に思ってた・・・。</p>

<p>デバイスファイルというそこそこ標準的なインターフェイスを使っているおかげで、
unlocked なデバイスでは <a href="http://www.pocketmagic.net/2013/01/programmatically-injecting-events-on-android-part-2/">外部からイベントを注入することもできるらしい</a>。
その仕組みをテストの自動化に使う話などをみかけた。こんなレイヤで自動化をするのが良いアイデアなのかはさておき、おもしろい話ではあるね。</p>

<h2>そのほか InputManager の仕事</h2>

<p>この <code>InputManager</code> と仲間たちの周辺は面倒な問題をまとめて押し込んだ風情。あちこちで細々とした問題に対処している。
たとえデバイスの傾きに応じ画面の向きが回転すると、デバイスから届く座標を回転変換してからアプリケーションに知らせる。
またあんどろはある時期から画面上の仮想ボタンで物理ボタンを代替できるようになった。その仮想ボタン(virtual key)も <code>InputReader</code> が面倒を見る。
そういう雑多な責務を押し付けられた結果、 <a href="https://github.com/android/platform_frameworks_base/blob/master/services/input/InputReader.cpp"><code>InputReader.cpp</code></a> は 6500 行、
<a href="https://github.com/android/platform_frameworks_base/blob/master/services/input/InputDispatcher.cpp"><code>InputDispatcher.cpp</code></a> は 4500 行にふくれあがっている。気の毒。</p>

<h2>まとめなど</h2>

<p>というわけで <code>View#onTouchEvent()</code> に <code>MotionEvent</code> がとどくまでの道程を眺めてみた。</p>

<p>スタート地点である <code>View</code> を含むプロセスでは、余分なスレッドに寄り道することなく <code>Looper</code> に便乗した <code>InputEventReceiver</code> が <code>InputChannel</code> から <code>InputMessage</code> を読み出し、
バッチ化した上で <code>ViewRootImpl</code> にイベントをよこす。Binder ではなく <code>InputChannel</code> のような別の経路を使うのは、メインループに処理をくっつけるためでもあろうだろう。</p>

<p><code>ViewRootImpl</code> が受け取ったイベントは <code>InputStage</code> マイクロフレームワークを通過してから <code>View</code> ツリーに送り込まれる。
ツリーの中では座標変換や衝突判定などをしつつ親から子へイベントが伝播する。</p>

<p><code>View</code> のあるプロセスにイベントのデータを送りつけるのは Window Manager のサービスが住むプロセス。
<code>IWindowManager</code> binder オブジェクトが <code>View</code> のある &#8230; というか Window を持つプロセスに <code>InputChannel</code> を付与する。
<code>InputChannel</code> の実体は <code>socketpair()</code> で作った UNIX ドメインソケットだった。</p>

<p>Window Manager のプロセスには送付先 <code>InputChannel</code> を複数束ねる <code>InputDispatcher</code> と、デバイスファイルを束ねる <code>InputReader</code> がいる。
この２つのオブジェクトはそれぞれ自分のスレッドを持っている。<code>InputManager</code> がこの２つのオブジェクトをまとめた facade として機能している。
<code>InputReader</code> は <code>EventHub</code> オブジェクトにデバイスファイルのデスクリプタを預け、 <code>EventHub</code> は <code>epoll</code> や <code>inotify</code> でこれらのファイルやファイルのディレクトリを監視、
データを読みだす。読み出されたデータは <code>InputReader</code> が <code>InputDispatcher</code> に手渡す。<code>InputDispatcher</code> はそのデータを適当な <code>InputChannel</code> に書き出す。</p>

<p><img src="https://farm3.staticflickr.com/2926/14638745414_618c56034c_b_d.jpg" alt="life of touch" /></p>

<p>オブジェクトやプロセスをまたいだイベントの受け渡しには何らかのキューが使われる。キューには処理を非同期化するものとしないものがある。
<code>View</code> のあるプロセスの中に限るとキューは一つ、 <code>ViewRootImpl</code> がもつ <code>QueuedInputEvent</code> だけ。このキューは(多くの場合)処理を非同期化せず、その場で同期的に消化された。</p>

<p><code>View</code> のあるプロセスと Window Manager のプロセスの間には <code>InputChannel</code> に隠された UNIX ドメインソケットというキューがある。
これは非同期。プロセスをまたぐ以上同期的に動きようがない。</p>

<p>Window Manager の中にはたくさんのキューがある。 <code>InputDispatcher</code> がもつ <code>inboutQueeue</code>, <code>InputDispatcher::Connection</code> の <code>outboundQueue</code>, <code>InputDispatcher</code> と
<code>InputReader</code> をつなぐ <code>QueuedInputListener</code>. 中でも <code>InputDispatcher::inboundQueue</code> はスレッドをまたぐ非同期化に使われている。
あとはカーネルのなかに追加のキューがあっても驚かないけれど、調べていない。ユーザ空間の中では非同期化されるキューは２つだけ。
反応性への配慮という点で、これはがんばってるとおもう。</p>

<h3>わからないこと</h3>

<p>入力やイベント処理というのは一般に abstraction が leak しやすい分野。ここでも例にもれず読むのに疲れる雑然としたコードがあちこちに顔を出し、読むのは疲れた。
とはいえあんどろ入門という当初の目的には悪くなかった気がする。<code>View</code> ツリー内へのディスパッチをひやかして <code>View</code> のイベントモデルに入門し、
<code>Looper</code> を通じてスレッドモデルをちらりとのぞき、<code>InputChannel</code> の周辺をさまよい Binder と Parcel に触れ、
Window Manager のはじっこを通り過ぎて最後は Linux の表面に降り立った。あんどろよくわからん、という気分は若干薄れた気がする。</p>

<p>とはいえ当然ながらわからないことも沢山ある。Activity や最初の View はどうやって作られたのか。
特に IWindowManager のようなサービスはどのプロセスで動いていて、アプリケーションはその binder オブジェクトをどう手に入れるのか。
そんな bootstrap は全然わかっていない。</p>

<p>Binder といえばスレッドモデルもよくわからない。proxy 経由のメソッド呼び出しはホスト側のどのスレッドに届くのか。</p>

<p>イベントをうけとったあと、画面がどう描かれるのか・・・は、 <a href="https://source.android.com/devices/graphics/architecture.html">Graphics System-Level Architecture</a> という
よく書かれた資料があり、このおかげでそこそこわかった気になれた。今回タッチイベントについて書こうと思ったのもこの文書に刺激されたから。
まあ素人のラクガキなので比べ物にはならないけどね・・・。</p>

<p>あとはそもそもどうやってアプリを構成するのがよいのかなど常識的な話がわかってない。
すいすい動くアプリはどうしたら作れるのか、とかさ。まあ手を動かさないとわからないことだろうし、ぼちぼちやっていこうとおもいます。</p>

<p>間違いそのほかは気が向いたらついったなどで訂正していただけると助かります、と繰り返し教えを乞うて今日はおしまい。</p>

<p><img src="https://farm6.staticflickr.com/5508/14617931856_31533cd133_b.jpg" alt="feeling sleepy" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味はキーノート鑑賞]]></title>
    <link href="http://steps.dodgson.org/b/2014/06/29/watching-keynotes/"/>
    <updated>2014-06-29T19:33:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/06/29/watching-keynotes/</id>
    <content type="html"><![CDATA[<p>趣味は何かときかれたらインターネット企業ウォッチですと答えるかもしれない。そのへんの企業ゴシップに気を取られるよりコードでも書いてた方が百倍くらい有意義だとわかってはいる。でもついニュースを眺めて過ごしてしまう。職業上の便益を損ねるくらいだからこれは趣味と呼んで差し支えなかろう。中でも各種企業イベントのキーノート・スピーチ鑑賞はそんなおっかけ業のハイライトだ。</p>

<p>インサイダーからすると、キーノートは学芸会みたいなもの。隣のクラスの出来映えにやきもきすると同時に、自分のコードの晴れ舞台、たった一つの台詞を見守る。</p>

<p>インサイダーでないキーノート・・・つまり大半のキーノートは、言って見れば近所の高校の文化祭に行くようなものだろうか。あ、こういう学校なんだ、これが流行ってるんだ、なんてのが透けて見える気がして面白い。メディアが報じるキーノートは空気を伝えない。自分でビデオをみてこそ愛好家というものだろう。イベント行けって話もあるけどそこは見逃してほしい。</p>

<p>あと <a href="http://www.amazon.co.jp/Google-Chromecast-%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A0%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88-Wi-Fi%E7%B5%8C%E7%94%B1-GA3A00035A16/dp/B00KGVN140%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00KGVN140"> Chromecast </a> を買ったはいいけど見るものが無い、とかいってる人はキーノートでも見るといいんじゃないですかね。元々テレビをみなかった私は引っ越した勢いでテレビを買ったもののケーブルテレビも Netflix も結局ほとんどみておらず、テックトークやキーノート、あと Coursera ばかり見ている。</p>

<p>というわけで新機能や新製品の紹介ではなく学園祭の来訪者として、キーノートのビデオをいくつか紹介してみたい。</p>

<h2>Google I/O</h2>

<p>この話を書こうとおもったのは例のごとく <a href="https://www.youtube.com/watch?v=wtLJPvx7-ys">I/O</a> があったから。</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/wtLJPvx7-ys" frameborder="0" allowfullscreen></iframe>


<p>個人的に面白かったのは <a href="http://www.theverge.com/2014/6/26/5845562/android-one-google-the-next-billion">Android One</a>. 途上国向けに廉価版あんどろスマホの参照実装を提供し、各国のメーカーと提携して電話機を出してもらう、というものだと理解している。話をしている <a href="http://en.wikipedia.org/wiki/Sundar_Pichai">Sundar Pichai</a> はインド出身で、最初の提携先メーカーもインドにある。途上国の開拓がスマホマーケットの行方を左右すると報じられる中、あんどろのボスがインド出身というのは実は結構意味のあることかもしれない。インドなまりのしゃべりを聞きつつそんなことを思った。まあ気のせいかもしれないけど、勝手に色々な妄想を働かせるのがキーノート鑑賞を楽しむコツです。</p>

<h2>WWDC</h2>

<p>みんな大好き Apple の発表会。</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/w87fOAG8fjk" frameborder="0" allowfullscreen></iframe>


<p>今年は Swift なんかの大型発表があったせいもあり色々な人が色々書いている。中でも登壇者がみな威勢がよく元気だった、という感想をよく見かけた。私もそう思う。</p>

<p>個人的な見所は彼らが &#8220;Continuity&#8221;, 要するに MacOS と iOS の連携を強調していたところ。私から見ると、これは連携という対等な関係というより Mac OS を iOS に従わせたように見えた。世間の老舗ウェブ企業は mobile first だの mobile only などと良いながら四苦八苦している。その時代を作った Apple は Mac を iPhone にぶら下げるという形で Mobile というか iPhone 中心の時代を押し進めようとしている。そう解釈して勝手に感心した。</p>

<p>あんどろユーザたる身からすると iOS がどうなろうと現実にはどうでもいい。でも妄想の題材としてはゴージャスだ。私は近々 iOS と MacOS がくっつくと思っていたけれど、Mac OS は卓上用 iOS 向け周辺機器としてどんどん簡素にしていけば無理にくっつけて混乱を招く必要もないのかも・・・そう考え(妄想)を改めた。まず x86-32 を完全に滅ぼし universal binary のサイズを小さくしたあとで A 系 CPU に移行、それから OS 統合ってかんじかなー。</p>

<h2>F8</h2>

<p>Facebook の開発者向けイベント。数年ぶりに開催された。</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/0onciIB-ZJA?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v" frameborder="0" allowfullscreen></iframe>


<p>スマホ OS 開発元たちほどは注目されてない気がするので内容を補足しておくと、Facebook はモバイルアプリのプラットホームになるので使ってね、と売り込むイベント。 iOS の会社もあんどろの会社も足並みをそろえる気は無い中で両方相手にするのは大変だから、差分はこっちでよろしくやっとくよ、と主張している。</p>

<p>個人的な見所は二つ。一つ目は社長の話す時間が長いところ。開発者向けイベントに社長がでてくるのはよい。WWDC も最初と最後では Tim Cook が出てくるもののすぐひっこむし、I/O に至っては社長全然でてこない。Zuckerberg はかつて <a href="https://www.youtube.com/watch?v=UH7wkvcf0ys">Memcached のテックトークをした</a>くらいにはプログラマである自分をアピールしたいタイプ。ここではそれがうまく働いている。ただそのぶん <a href="http://www.crunchbase.com/person/mike-shroepfer">VP of Engineering</a> のひとは影が薄くて気の毒。</p>

<p>もう一つは &#8220;Move Fast and Break Thinkgs&#8221; という有名なモットーを撤回し &#8221;<a href="http://www.businessinsider.com/heres-facebooks-new-motto-2014-4">Move Fast with Stable Infra</a>&#8221; と言い出したところ。プラットホームを売り込む方便という面はあるにしろ、企業の成熟を見ている気もして感慨深い。Facebook Paper なんかの完成度も &#8221;<a href="http://techcrunch.com/2012/02/01/facebook-ipo-letter/">Done is Better than Perfect</a>&#8221; とは趣が違うしねえ。まあ <a href="http://www.sling.me/">Slingshot</a> は Done よりか&#8230;</p>

<p>ちなみに stable の論拠は SLA と API の保証期間ができますよ、という話で、それみんな普通にやってるで・・・という気がしなくもない。それにしてもプラットホーム企業へのシフトを印象づける発言ではあった。</p>

<h2>Amazon Fire Phone</h2>

<p>Amazon の電話機発表イベント。キーノートどころか開発者向けイベントじゃないけど、面白かったので紹介。</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/w95kwXy_MOY" frameborder="0" allowfullscreen></iframe>


<p>スマホ OS 各社が音声ガイドにしのぎを削る中、画像認識ベースの検索 <a href="https://developer.amazon.com/public/solutions/devices/fire-phone/overview/firefly-sdk-for-fire-phone">Firefly</a> を軸に据えてきた Fire Phone。電話機自体はさておき、Bezos 社長が新機能を紹介する際にテクノロジーを強調する様子が興味深かった。AWS が支える無限の計算資源、お抱えの研究者が作り出した機会学習アルゴリズムの数々・・・。すごい技術が使われていて、すごい技術を作れるチームやインフラがある。それをたびたび強調していた。</p>

<p>WWDC や I/O を振り返るとここまでハイテク面を強調しない。たぶん強調しなくてもテクノロジ企業としてのイメージがあるからだろう。一方 Amazon に対する世間のイメージはそこまでテクノロジ感が強くなく、だからハイテク機器(電話)を売るのにあわせてイメージを補正したかったのかもなあ。もっともこれもやはり妄想どまり。プログラマからみた Amazon はぶっちぎりでテクノロジー企業だしね。</p>

<p>あとどうでもいい話としては Bezos 社長は笑い声が怖いです。ミーティングでこんな風に笑われたら逃げ出したくなりそう。でもちょっとモノマネしたくもなる。</p>

<h2>Re:invent</h2>

<p>プログラマからみた Amazon すなわち AWS のイベント Re:invent のキーノートを見てみよう。去年は二日にわけて二回キーノートがあった。</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/8ISQbdZ7WWc" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/Waq8Y6s1Cjs" frameborder="0" allowfullscreen></iframe>


<p>二日に分けるのは今風じゃねえな、と思ったが、実際に見ると理由がわかる。初日は保守的なエンタープライズの人を相手に、翌日はあたらしもの好きなウェブっ子相手に構成されている。</p>

<p>一日目のキーノートでは、ひたすら「オンプレミスのシステムをクラウドに移行しましょう！やるなら今です！みんなやってます！Amazon だから安い！アジャイル！」みたいな話をする。そして途中で銀行や伝統的メディア企業などなどエンタープライズぽい会社の CEO が出てきては、やはり「うちは移行したぜ！アジャイル！」とか自慢話をする。悪口でこき下ろす競合は IBM。AWS のユーザに今更こんな話してもしょうがねえだろ・・・と思うでしょう。でもきっと保守的な会社から視察に送り込まれてくる参加者なんかもいて、それが想定聴衆なのだろう。興味深い。たとえば新機種の発表でもない限り WWDC で登壇者が &#8220;iPhone を買おう! ゴージャス!&#8221; とか参加者を煽る姿は想像できない。安定性を強調したいためか、初日は新製品の発表もわずか。</p>

<p>驚くほどつまんねえなーと思いつつ二日目に進むとトーンが反転する。登壇者は 分散システムの専門家にして訛のきつい CTO の Werner Vogels。Amazon のテクノロジーはすごい、開発ペースも速い。なぜなら小さいチームが自立的に開発し、顧客志向でリーンにやっているからだ！<a href="http://www.allthingsdistributed.com/2006/11/working_backwards.html">まずプレスリリースを書くんだ！</a> みたいな話をしたあと、いいかおまえら分散システムは predictability が重要だ！などのちょっとかっこいい話に進む。登壇するゲストは Netflix, AirBnB, Parse, Dropcam と軒並みウェブ企業やスタートアップ。新機能もじゃんじゃか発表。おーこれだよこれ！<a href="http://aws.amazon.com/kinesis/">Kinesis</a> ヒャッホイ！イノベーション！みたいな気分で俄然盛り上がる。でも新参者にとっては内輪臭がきつすぎる恐れもある。</p>

<p>要するに Re:invent では聴衆をエンタープライズとウェブ企業とできっぱり区別し、それぞれ別々にメッセージを送っている。多くの企業が自分の立ち位置で暗黙のうちに聴衆をバイアスしているなか、自覚的にフレーミングしているのがすごい。なおここで「開発チームも二派にわかれてるんじゃないか」などと妄想を進めるのがウォッチ業のお約束です。</p>

<h2>BUILD</h2>

<p>Microsoft のイベント。昔は PDC という名前だった気がするけれど、いつの間にか BUILD という名前になっていた。これも二日ある。一日目がクライアントサイドで、二日目がクラウド。</p>

<iframe src="http://channel9.msdn.com/Events/Build/2014/KEY01/player?h=540&w=960" style="height:540px;width:960px;" allowFullScreen frameBorder="0" scrolling="no"></iframe>




<iframe src="http://channel9.msdn.com/Events/Build/2014/KEY02/player?h=540&w=960" style="height:540px;width:960px;" allowFullScreen frameBorder="0" scrolling="no"></iframe>


<p>Chromecast で見たい人は <a href="https://dabble.me/cast/">VidCast</a> を使うとよい。</p>

<p>見所は初日の最後にでてくる新社長 <a href="http://www.microsoft.com/en-us/news/ceo/index.html">Satya Nadella</a>。クラウド部門の出身らしく、そのへんのテクニカルタームをすらすら話す様子はかっこいい。インド出身でプログラマ上がりの社長。しまった筋肉からも前任者との違いは歴然。昔からの MS ファンは懐疑的だけど、これは Microsoft 変わるかもしらん、とおもわせる頼もしさがあった。最後に社長自ら開発者からの質問こたえるパートがある。これは<a href="http://www.businessinsider.com/larry-page-google-io-speech-2013-5">去年の I/O</a> へのオマージュだろうか&#8230;など役に立たない connecting dots をするのが外野のたしなみ。</p>

<p>そういえば PDC/BUILD はかつて MS 本社やロサンゼルスあたりでやっていたれど、2013 年からは I/O や WWDC とおなじサンフランシスコに場所を移した。産業の重心が動く様を感じずにはおれない。といいつつ Re:invent はラスベガスだったりする。</p>

<h2>JavaOne</h2>

<p><a href="http://medianetwork.oracle.com/video/player/2685720528001">埋め込みしにくい形式につきリンクのみ&#8230;</a></p>

<p>初めての海外旅行は JavaOne だった。十年以上前のこと。デスマに巻き込まれ参加するヒマがないという会社員に代わり、当時バイト中だった学生の私はどさくさで連れて行ってもらったのだった。そんな経緯もあり私にとっての JavaOne はどこか特別。今では Oracle World なるどうでもいいイベントの一部になってしまったけれど・・・。</p>

<p>キーノート自体はなかなかよい。巨大な会場で幾千の聴衆を前にラムダの話とかしてるのよ。こんなコード短くなるぜ、みたいな。これでこそ開発者イベントってもんじゃないですか。WWDC の Swift パートなんて新言語の発表なのに文法紹介より Playground を使ったデモをがんばっていて、あれはすごく良いデモではあるのだけれど、この JavaOne の地味な感じも結構すき。まあ中年のノスタルジーかもしれない。</p>

<p>後半には自作タブレットに JavaFX を載せてオレオレ Java OS だぜ！みないな趣味プロジェクトにしか見えないデモがあったりする。そういえば BUILD 初日にも Windows を Raspberry Pi 的ハードに移植して巨大な鍵盤の電子ピアノをつくり Internet of Things! と主張するデモがあった。このへんをみるとキーノートを学芸会や文化祭にたとえたい私の気持ちが少しはわかってもらえると思う。</p>

<h2>ロングテール</h2>

<p>ここまでは大手のキーノートを紹介してきた。世の中には開発者向けプラットホームたろうとしている会社は他にも色々あって、そういう会社のビデオも見たら面白いのだろうと思う。ただ量が多くてキリがない。私も見れないまま積んであるビデオが山ほどある。というわけで細かいカンファレンスたちをちまちまリンクし、あとで自分のブックマーク代わりに使おうと思います。</p>

<ul>
<li><a href="http://vimeo.com/herokuwaza/videos">Heroku Waza</a> - 細かいなんていうと怒られそうではある。親会社の <a href="https://www.youtube.com/user/dreamforce">Dreamforce</a> より楽しそう。</li>
<li><a href="http://blog.parse.com/2013/09/17/parse-developer-day-video-series-keynote-and-developer-show-and-tell/">Parse Developer Day</a> - もう Facebook に買収されたから F8 だけ見とけば良い気もする。でも見比べると Facebook のプラットホーム戦略における Parse の重要性がわかる。</li>
<li><a href="https://www.youtube.com/watch?v=_DOXBVrlW78">DockerCon</a> - 会社じゃないという話もあるけどまあまあ会社じゃん、ということで。</li>
<li><a href="https://www.youtube.com/watch?v=6CRnMB36US8">Futurestack</a> - NewRelic のカンファレンス&#8230;なんてものがあるのか&#8230;</li>
<li><a href="http://coreos.com/blog/video-from-meetup/">Core OS meetup</a> - Fleet とかきになる.</li>
<li><a href="https://www.youtube.com/playlist?list=PLE7tQUdRKcyb-k4TMNm2K59-sVlUJumw7">GopherCon</a> - ほんと企業じゃないなこれは. まあどさくさで.</li>
</ul>


<p>そういえば企業主催じゃないカンファレンス動画は他にもいっぱいあるよね。それもまた開拓しがいのあるジャンル。</p>

<p>あとは例のごとく <a href="https://www.youtube.com/channel/UC3BGlwmI-Vk6PWyMt15dKGw">Youtube の O&#8217;Reilly チャネルを購読したり</a> &#8230; と新着を眺めていたら <a href="https://www.youtube.com/watch?v=1-3Ahy7Fxsc&amp;list=PL055Epbe6d5aFXqs5UPAyQxs3D-1tHVCy">Jeff Dean のトーク</a> がある！見逃すところだったあぶないあぶない&#8230; だとか、最近は <a href="https://www.youtube.com/channel/UCP_lo1MFyx5IXDeD9s_6nUw">Facebook のチャネル</a> も F8 以外のイベントがぼこぼこあって油断できなかったりだとか、いいかげん Watch Later リストがあふれているので YouTube アプリは Watch Later を新しい順に並べる機能を付けてほしいとか、<a href="http://www.infoq.com/">InfoQ</a> のビデオはほんとにサイトの出来が悪くて辛いと思っていたが実は <a href="https://play.google.com/store/apps/details?id=au.com.shiftyjelly.pocketcasts&amp;hl=en">Pocket Casts</a> あたりの Podcast アプリでフィードを購読し Chromecast に飛ばせば問題解決だったとか、やはり趣味はほどほどにしてコード書いた方が良いのではとか、朝５時に起きればすべて円満かもとか、特にオチはありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[星を観にいく]]></title>
    <link href="http://steps.dodgson.org/b/2014/05/17/an-amateur-astronomer/"/>
    <updated>2014-05-17T10:52:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2014/05/17/an-amateur-astronomer/</id>
    <content type="html"><![CDATA[<p><img src="https://farm6.staticflickr.com/5535/9228318134_d92295574c_c.jpg" alt="galaxy" /></p>

<p>あるとき <a href="http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx">Dark Matter Programmer</a> という言葉をみかけた。ウェブやコミュニティに存在感のない、当人もそれを気にかけていない、プログラマをさす言葉。言い出しっぺの主張は、そういう人々の存在を忘れたり、見下したりすべきでないというものだった。</p>

<p>ダークマターはうまい比喩だと思う。正体がよくわかっていないらしいから適当さの粗が目立たず、その割にイメージは鮮烈。</p>

<p>他の比喩との相性もいい。たとえばスター。スタープログラマはダークマタープログラマの対極にいる印象だけれど、意図に立ち戻ればそれほど大げさでもない。何らかの可視性があればスターといえる。僕もあなたもスターなのがオンラインのコミュニティなのだろう。</p>

<h2>さまざまな星</h2>

<p>なんてきれいごとはさておき、<a href="http://en.wikipedia.org/wiki/Futurama">乱暴</a>に言ってダークマター以外がスターならスターにも色々ある。細かい隕石やガスなんかをさておくとしても、まず明るさ、等級が違う。あるいは自分で光る恒星か、照り返す惑星、衛星か。どれくらいの重さ、大きさで、どれくらいの距離にあるのか。比喩の勢いを借り、自分はどんな星かとぼんやり考える。</p>

<p>明るい星になりたいと昔は思っていた。すぐそばのきらめく星をみつめ、同じように瞬こうとしていた。それは惑星的な情熱だった、といえばしゃれてるけれど、要するにワナビーだった。自分が恒星的な資質を欠いていると気づくまでには時間がかかった。光っていれば、何でもだいたい同じに見える。でもいちど気づいた違いは無視できない。だてにずっとみつめていない。</p>

<p>星を観るのは好きだ。星でいるよりも、たぶん。今の職場にいると、眺める星に困らない。知能、情熱、体力、視座。恒星的とはどういうことか、星々の輝きを通じた学びがある。といってもこれは、星でなく天文学者としての学び。光の足しにはならない。星を輝かせるのは学びでなく化学反応だ。秘めたる熱を周囲の力場が引き出し、星はより強く、明るく燃える。この星フェチが言うんだから間違いない。</p>

<p>自分の中には恒星たる熱や触媒がない。そう学ぶのは、星たる身には嬉しくない体験だった。一方で惑星的たることの意味を知るのは、星好きとして目を丸くする瞬間でもあった。</p>

<h2>星団</h2>

<p>ダークマターの比喩が記憶に残っていたのは言葉遊びの妙だけが理由でもない。最近の自分はまるでダークマターだと感じ、けれどそれは発案者の言わんとするところから外れているように思え、気にかかっていた。けれど星の比喩を頼れば理由はわかる。周りの恒星たちが明るすぎて自分という星が観測できない。巨大ハイテク企業なんて大星団みたいなものだから、なかにまぎれた薄暗い惑星が目につかなくても仕方ない。</p>

<p>あたりの輝きを集めるべく表面を磨き、明るい惑星を目指すこともできる。でもその気にはなれない。星の好みにうるさい身だ。光ればいいってもんじゃない。自らの輝きを際立たせるべく暗闇に飛び出す人もいる。星団界隈では人気の選択肢だけれど、恒星らしい熱量がないとさびれた星になってしまう。かつての面影だけがまぶしい。</p>

<p>そんな星々の邂逅を一望できる星団の中は、星好きにとって夢のような場所だ。あちこちで星が生まれ、燃え、消えていく。外からは窺い知れない細部が見える。ぱちぱちと炎の弾ける音すら聞こえるような気がする。飽きる事が無い。</p>

<h2>超新星</h2>

<p>今の会社に入るとき、きっと何かすごいことが起こるという曖昧な期待があった。何かすごい事を起こすという星としての野心と、何かすごい事に立ち会えるという星好きの希望が混じり合っていた。</p>

<p>去年 Blink がフォークした日、WebKit という星座の中に紛れ込もうと軌道を進めていた星の自分は身を焼かれる思いをした。天体愛好家の私は歴史的瞬間の興奮に身を震わせ成り行きをみつめた。何かちょっとした事を起こす淡い希望は燃え落ち、何かすごい事件がおきた。</p>

<p>閃光が去ったあと、私は落ち込んでいた。けれどそれは大星座が終わる失望だけでなく、撮り逃した決定的瞬間への落胆でもあった。フォークという決断はどのように生まれたのか。言い出した当人はどうやって周囲のステークホルダーを巻き込んだのか。何が起きたのか。いくら情報共有を徹底されたところで、空気は海を渡らない。もっと近くで見たかったのに！</p>

<p>そのあと半年ほどはいまいちやる気がおこらず、ぼんやりと働いた。そしてふと、バーンと引っ越したら良いかもしらんと思いたち西海岸の田舎に転勤してみた。場所を変えれば気分も変わるかな、くらいのつもりだったけれど、今思えば二つ目の落胆が背中を押したのだろう。（このへん融通が効く今の勤務先には感謝している。）</p>

<p>今の仕事は引っ越し前と特に変わっていない。でも前とは違う楽しみがある。いま私のいるチームは Web Components を出荷すべく色々やっている。 Web Components に対する世の中の反応は、期待もあれば懐疑もある。今はその温度を肌に感じられる。標準化の会議には家から車でいけるし、ウェブ開発者コミュニティや同業他社への売り込みにも紛れ込める。</p>

<p>あるいはウェブの風評をみながら同僚たちと一喜一憂する。たとえば 自分の開発している <a href="http://w3c.github.io/webcomponents/spec/imports/">HTML Imports</a> をあの <a href="http://www.stevesouders.com/">Steve Sounders</a> が<a href="http://www.slideshare.net/souders/high-performance-web-components">プレゼン</a>でディスっている！しかしその批判は織り込み済みにつき最新の仕様では直してあるぜやーいやーい！すかさず誰かが Twitter で反論・・・みたいな流れは太平洋時間にいる方がリアルタイムに盛り上がれる。</p>

<p>この盛り上がりと仕事の進みは直接関係ないというかついった見てないで働けと思わなくもないし、多くの人にとってはどうでもいいことに違いない。むしろ自分の書いたウェブ標準やコードを四方八方からつつかれるのは結構ストレス。しんどい。それでもなお、テクノロジが生まれる瞬間を内側から見る興奮は私にとって代え難い。</p>

<h2>星間飛行</h2>

<p>煤けた惑星の限界はわかっている。私が自らの手で、すごい何かを起こすことはない。曖昧な星の夢はいつか消えてなくなった。本当に何かが起こるとき、その中心にいるのは輝く恒星たちであり、天体愛好家ではない。</p>

<p>とはいえ私は単なる愛好家でなく、いちおう少しは星もやってる。 おかげで <a href="http://www.stevenlevy.com/">Steven Levy</a> のような天体観測プロフェッショナルが決して見ることの出来ない瞬間に、単なるアマチュアの自分が居合わせる事だってできる、かもしれない。星にしか見えない景色は、しょぼい惑星にもある。成り行き次第では視界を横切るかすかな影にすらなりうる。もしかして、運が良ければ。</p>

<p>どうすれば明るい星々の間に入り込めるのかはまだわからない。プログラマを巡る物語はみな、それぞれの星が明るく、そしてできるだけ美しく、自らを輝かせようと歌う。星は暗闇でこそ美しく光る。その枠組みの中であかるい星のそばにいられるのは、同じくらいあかるい光をもつ星だけ。なけなしの放射と引き換えに、暗い星がまばゆい星々の間を巡る事はできるのか。</p>

<p>これは自明な問いではないし、競い煌めく幾万の真面目な星たちに後ろめたくもある。けれど私は星である以上に星を観るのが好きで、星空が好きだ。そしてだからこそ、煤けていようが荒れていようが星でありつづける必要がある。私の宇宙船が、そこで碇を下ろせるように。このごろは自分の仕事をそう捉えるようになった。</p>

<p>明るい星たちに話しかけられるのが、まえは少し辛かった。その光に暴かれる荒れた地表がみじめだった。
今は天体ショウの一幕として惑星役をつとめる。滑稽でも出番があればいい。愛好家が、その舞台を見届けているから。</p>

<hr />

<p>写真: <a href="https://flic.kr/p/f4txtm">https://flic.kr/p/f4txtm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近況]]></title>
    <link href="http://steps.dodgson.org/b/2014/02/16/updates/"/>
    <updated>2014-02-16T23:41:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2014/02/16/updates/</id>
    <content type="html"><![CDATA[<p><img src="http://farm2.staticflickr.com/1349/531354977_714b6268a1_b.jpg" alt="This is not where I am" /></p>

<p>ふと思い立ち転勤して <a href="https://www.google.com/search?q=Sunnyvale%2C+CA">Sunnyvale, CA</a> にひっこしました。
会社がある Mountain View の隣町。写真はたぶんサンフランシスコです。つまり関係ない。
飽きるか挫けるかクビになるまでこのへんにいる予定です。
東京のみなさまお世話になりました。近所のみなさま適当にあそんでください。
ええとその、私がクルマを運転できるようになったあとで&#8230;</p>

<p>船便で送った荷物はあと一ヶ月くらい届かず、通販で買ったマットレスもあと十日は届かず、
やむなく借り物などで細々と暮らし中。ただし肉ばっかり食ってるせいで脇腹は太々してきた。やばい。</p>

<p>とりあえず自宅が IP reachable になった旨を記録しておきます。</p>

<hr />

<ul>
<li>写真: <a href="http://www.flickr.com/photos/thomashawk/531354977/">http://www.flickr.com/photos/thomashawk/531354977/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二駅先の青春の日々]]></title>
    <link href="http://steps.dodgson.org/b/2013/12/08/adolescence-two-stations-away/"/>
    <updated>2013-12-08T13:35:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2013/12/08/adolescence-two-stations-away/</id>
    <content type="html"><![CDATA[<p><img src="http://farm8.staticflickr.com/7361/11264077965_c318589ccc_z.jpg" alt="cake" /></p>

<p>結婚の報告を兼ねた忘年会で、数年ぶりに何人かの顔を見る。
昔からの仲間たちに触発され、自分の青春はいつだったのか帰り道ふと考える。
青春というからには楽しい日々だったに違いない。</p>

<p>高校生の頃のことはよく覚えていない。もう連絡の取れる友達もいない。ただ過ぎていく毎日だった。
大学時代はもっぱらネットに入り浸っていた。私の大学生活は IRC でありブログ&#8230;当時はウェブ日記&#8230;だった。
濃密な体験だったけれど、楽しかったと素直に言えない青臭い屈折があった。
最初に勤めた会社は、楽しかったというには働きすぎていた。かわりに学びは多かった。
まあ有り余る体力に任せ仕事の後も遊んでいたから楽しいことも少しはあった気がする。</p>

<p>でも私にとって青春の日々と呼ぶにふさわしいのは、
最初に職場を変えやさぐれていた頃だったと思う。</p>

<p>週末の夕方遅く起きた私が部屋でぼんやりネットをみていると、同じ沿線に住む前職同期入社の友人から電話がかかってくる。
いま起きた、肉くおうぜ、とりあえずウチこいよ。自転車で二駅のぼり、デスマの愚痴で盛り上がつつ焼き肉屋のタン塩に散財したあと、
近所の本屋でマンガを買い込むと奴の部屋に上がり込み、小さなテレビには外国のサッカー中継が流れていて、
画面に悲喜をぶつける友人を背に固いベッドの一角を占拠した私はビールをすすりページをめくり、
弾が切れたら本棚を漁って既刊を掘り出しむさぼり、やがて朝が来て、
試合はいつの間にか終わり、観客一名はベッドの隅に突っ伏していており、
私はろくに片付けもせず部屋を抜け出しのろのろと二駅漕いて家に戻り、
日曜日は寝て過ごし、二日酔いで新しい週を迎える。そんな日々。なんて身勝手で贅沢な日々。</p>

<p>あるときいつものようにビールでマンガを読みながら友人はいう。俺結婚するんだ。引っ越すよ。
こうして二駅先の青春は幕を下ろした。数日後、かの地にため込んでいた単行本が段ボールに詰められ私に届いた。(自分で積めて送ったんだけど。)
箱から取り出した青春の屍はその後数年一緒に暮らしたあと、自分の引越しにあわせて捨てた。</p>

<p>それは学生生活の代名詞だとかつては思っていた。努力友情敗北のデスマーチにその影を見たこともあった。
いま、近くから見るとなにもない、退屈にすら思えた日常を、はちみつとクローバーの青春に恋い焦がれ酩酊した夜を、
自分の青春として遠くから発見しなおす。少しやり場に困る。
けれど記憶の中でことさら明るく灯るのは、卓袱台に転がった空き缶と新刊を照らす、白く滲んだ蛍光灯なのだ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Docs はなんのため?]]></title>
    <link href="http://steps.dodgson.org/b/2013/11/07/why-design-docs/"/>
    <updated>2013-11-07T21:47:00-08:00</updated>
    <id>http://steps.dodgson.org/b/2013/11/07/why-design-docs/</id>
    <content type="html"><![CDATA[<p>&#8220;<a href="http://d.hatena.ne.jp/naoya/20131107">「書く」のは特別な道具</a>&#8221; という記事のなかで検索会社の Design Docs というやり方が
すっかり過去のものになってしまったかのように読めなくもなかったため、私の理解を書いてみたい。
ただ私は検索会社メインストリームであろうクラウドヒャッホイな仕事はしていないので色々間違ってるかもしれない。
これを呼んで憤った同僚各位はぜひついったや会社の中などでこっそり教えてください。追記します。</p>

<p>Design Docs は考えるための仕組みというより、むしろ議論のための仕組みである、とおもう。
この二つは矛盾しない。文章にすれば考えがまとまるのは確かだし、議論自体も思考を支える道具の一つだから。
けれど文章はまず読者のために書くもの。そして一番の読者は誰かというと、チームメイトや隣接プロジェクトの同僚達だ。</p>

<h2>誰のため？</h2>

<p>Design Docs の意義はコードレビューと合わせて考えるとわかりやすい。
検索会社周辺ではレポジトリにコードをチェックインする上でレビューは必須とされている。
GitHub 圏の素敵カンパニー達にもそういうところは多いと伝え聞いているので、特段珍しい話ではない。</p>

<p>さて、これから新しいシステムを作る、大きな変更や拡張をする、そんな時のことを考えてみよう。
とりあえず適当に書きはじめたコードをレビューに出したとする。
このときレビューをする同僚は、何をもとにその善し悪しを判断すれば良いだろう。
その理解を助けるのが Design Docs の一番の価値だと思えば多分だいたい合っている。
レビュアは文書を読んで大筋を把握し、その筋を進める一歩としてレビュー対象のコードをにらむ。</p>

<p>プロジェクトの規模やフェーズによって、コードレビュー以外にも色々相談しておくべきことがある。
スケーラビリティ・・・というと曖昧だけれど、たとえばアプリケーションが使うストレージや API ををホストするチームに、
こんな感じで API を叩きたい/データをおきたいんだけど、キャパシティ足りますよね、などと相談する。
最近だとセキュリティやプライバシーはかなり厳しくチェックされるらしく、そのために要件をクリアにしないといけない。
そういうチェックや相談に向けた事前資料も Design Docs の範疇になる。それぞれ読者が違うから、用途にあわせて文書を用意する。
相手はその文書を呼んで、大丈夫ですとかここがダメとか、そういう話をする。
定型的なチェックについては文書にもテンプレートがある、はず。</p>

<p>プロジェクトが大きいほどチェックや相談を頼む相手も増える。
沢山の API をつかう、隣接するプロジェクトに変更をお願いする、
ユーザの個人情報を扱う、大量のトラフィックが見込まれている、
新しくサーバを増やす分モニタリングを頼みたい・・・どんな会社でも似たようなややこしさはあるだろうけれど、
検索の会社はでかい上に組織の境目が緩いので、依存関係の枝は広がりやすいように見える。
聞き慣れないオフィスに出張するという同僚に、「そんなところに X のチームがあるんですねえ」と聞くと
「いや今度のプロジェクトは Y のデータを使わせてもらうんで相談にいくんですよ」なんて答えが返ってくることはよくある。
私の出張先は本社のあるツクバ・カルフォルニアばかりなのでやや羨ましい。</p>

<h2>レビューと文書</h2>

<p>レビューの議論はメールベースで進むこともあれば、対面やビデオ会議で進むこともあろうだろう。
どちらにせよ基本はまずメールでドキュメントへのリンクを送っておいて、必要に応じて密な対話に入るのが定石のようす。
いきなり口頭で説明されてもお互い時間の無駄だし、ミーティングのために朝早く起きたり相手のとこまで出張したりするのもしんどいしね・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[にわか TOEIC マニア]]></title>
    <link href="http://steps.dodgson.org/b/2013/10/26/the-war-against-toeic/"/>
    <updated>2013-10-26T11:18:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2013/10/26/the-war-against-toeic/</id>
    <content type="html"><![CDATA[<p><img src="http://farm1.staticflickr.com/87/257737706_47925ecf19_z.jpg" alt="foreign books" /></p>

<p>社内で開かれたワークショップ形式の研修に参加したのは一年前、ちょうど今頃のこと。
それはたぶんチームワークのような何かを学ぶ会だったはずだけど、
私の感想は本題と関係なく「いいかげん真面目に英語を勉強しないとあかん」だった。
話が通じないとチームワークどころじゃない。</p>

<p>米国資本勤めの会社員からすると、英語はグローバル云々以前に仕事用 DSL みたいなもの。
英語ができないまま騙し騙し働くのはたぶん、
SQL が書けなからと ORM の上だけでコードを書こうとするのに似ている。できなくはないけど、いろいろしんどい。
幸い私は Web 開発者じゃないから SQL はわからなくていい。でも英語はやらないとダメっぽい。
入社二年半、ようやく現実を直視した。</p>

<p>最初はしゃべる練習をしようかと思ったけれど、そもそもしゃべる以外の英語すらできるといえるのか。怪しい。
むしろまず典型的日本人として英語ができるところまでたどり着いて他のボトルネックを取り除き、
それから苦痛の元たるしゃべりを勉強しよう。そう考え直した。
日本人英語といえば TOEIC. あのスコアが十分なら「勉強してるけど実践能力のない日本人」として遠慮無くしゃべる練習を初めてよいのではないか。
このときスコアは 870 くらいだったので、まず TOEIC のスコアが 950 を超えるまで勉強しようと決めた。</p>

<p>でチマチマ勉強をはじめ、ほんとは半年くらいで達成したかったけど途中やる気を失いさぼったりした末、
先日ようやく無事 970 点、「実践能力のない日本人」ゾーンに入ることができた。めでたい。</p>

<p>会社でそんな話をしてもああ満点じゃなくて残念でしたね・・・
などとあしらわれ悲しい気持ちになりそうなので、ここにひっそりがんばった記録を書いておきたい。
といっても英語勉強法の類はよく書かれた資料が世の中に山ほどある。
私も自分のやり方が特段効率的とは思っていない。
だから特に新しい話はないし網羅的でもない。個人的な体験をぐだぐだ書くだけなので、
ちゃんとした勉強法の類を求めている人は本屋などをご利用ください。
あと TOEIC なんて役に立たないなどの主張はわかってやってるのでほっといてください。</p>

<h2>挫折歴</h2>

<p>英語をちゃんと勉強しよう。そう始めては挫けるループを、私は 10 年くらい断続的に続けている。
英語の得意な友達に請い、やり方を教わっては試していた。
彼のおすすめは大抵ディクテーション（リスニング書き取り）だったから、
私は勉強ムードが高まるとディクテーションをやる、そして数週間でくじける、を繰り返した。</p>

<p>今回はその反省をふまえ、挫折せず続けることを一番の目標とした。
ディクテーションの欠点の一つは負荷が高くしんどいこと。
勉強や訓練たるもの負荷はある程度必要だけど、耐えられる重みには個人差がある。
私の友達は訓練耐性がずばぬけており、やると決めたらダルかろうが飽きようが続けられる人だった。
でも私にそんな根気はない。もうちょっとゆるふわにしたい。</p>

<p>一歩下がって考えると、他人の勧めにただ従うだけなのも良くなかった。
訓練耐性や根性のような気質上の個人差もあるし、ベースの語学能力にも差がある。好みもある。
たとえばちゃんと受験勉強をした人はけっこう語彙がある。
私は大学受験は学校推薦という仕組みでパスしてしまったため、まじめに受験勉強をしていない。
だからたぶん語彙はない。音声や映像を重視する人もいれば、文章を読む方が好きな人もいる。私は後者。</p>

<p>身の丈に合う勉強法は人それぞれ違う。だからそれを探す手間はかけても割が合う。
そこで今回はまず  <a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E4%B8%8A%E9%81%94%E5%AE%8C%E5%85%A8%E3%83%9E%E3%83%83%E3%83%97%E2%80%95%E5%88%9D%E7%B4%9A%E3%81%8B%E3%82%89TOEIC900%E7%82%B9%E3%83%AC%E3%83%99%E3%83%AB%E3%81%BE%E3%81%A7%E3%81%AE%E5%8A%B9%E6%9E%9C%E7%9A%84%E5%8B%89%E5%BC%B7%E6%B3%95-%E6%A3%AE%E6%B2%A2-%E6%B4%8B%E4%BB%8B/dp/4860641027%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4860641027">英語勉強法ガイドの本 </a> を買って眺めるなどしつつ、
方法自体もいろいろ試すことにした。たださすがに TOEIC 固有の勉強をしても仕方ないので TOEIC と名のつく教材は無視した。
進捗の目安にしたいだけで、TOEIC 自体に習熟しても仕方ないからね。</p>

<p><a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E4%B8%8A%E9%81%94%E5%AE%8C%E5%85%A8%E3%83%9E%E3%83%83%E3%83%97%E2%80%95%E5%88%9D%E7%B4%9A%E3%81%8B%E3%82%89TOEIC900%E7%82%B9%E3%83%AC%E3%83%99%E3%83%AB%E3%81%BE%E3%81%A7%E3%81%AE%E5%8A%B9%E6%9E%9C%E7%9A%84%E5%8B%89%E5%BC%B7%E6%B3%95-%E6%A3%AE%E6%B2%A2-%E6%B4%8B%E4%BB%8B/dp/4860641027%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4860641027"><img class="asin" src="http://ecx.images-amazon.com/images/I/51QMMA8248L.jpg" title="英語勉強法ガイドの本 " /></a></p>

<p>と思ったらさっそく表紙に TOEIC ってかいてあるけど細かいことはいいんだよ・・・。</p>

<p>ちなみにこの本はそこそこ話題が豊富で見通しを立てる役には立った。
でも著者はテクノロジー頼みが弱く、面倒を根気で乗り切りがち。
あと考え方がシステマティックでないというか、プログラマっぽくない。（※プログラマじゃないから仕方ない。）
計算機の活用や手抜きのコツみたいなプログラマの得意分野は自分で工夫した方がよい印象。</p>

<h2>iKnow!, English Grammer in Use, The Jingles</h2>

<p>飽きない、くじけない、という基準で選定を勧め、最初は二つの教材を並列して進めることにした。
まずオンライン単語帳の &#8221;<a href="http://iknow.jp/">iKnow!</a>&#8221;. これは主にラクそうだからという理由。
もう一つは &#8221;<a href="http://www.amazon.co.jp/English-Grammar-Use-Answers-CD-ROM/dp/052118939X/">English Grammer in Use</a>&#8221; という文法の教科書。
こっちは受験勉強をさぼった結果文法をわかってないのでは、という疑惑から。
教材二つを同時にやっているのは、いろんな練習を少しずつやる飽き予防の一環。</p>

<p><img src="https://lh4.googleusercontent.com/AXMTjkWu2yZQKUtzvntloD-fPKruSzCIhuKVrr4aw4Xe=w888-h593-no" alt="iKnow" /></p>

<p>まず iKnow. 一見すると総合英語学習ツールみたいにみえるけれど、コンテンツ付き単語帳と呼んだ方が実態に近い。
くじけないという基準でみると iKnow はよくできていた。ブラウザやスマホで動くからどこでもできるし、音声もついている。
主に昼休みの昼飯後、一日 30 分くらいちまちま進めた。</p>

<p>&#8220;English Grammer in Use&#8221; も一日 30 分ずつやったけれど、こっちは一ヶ月くらいで挫けた。
さすがに簡単すぎた気がする。やっていると眠くなる。細かい部分では新しい発見もあるけれど、全体的には高校英語の復習みたいで退屈だった。</p>

<p>&#8220;English Grammer in Use&#8221; に飽きたため、何か文法以外をやろうと &#8221;<a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E3%81%AE%E7%99%BA%E9%9F%B3%E3%82%B6%E3%82%B8%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BA-%E3%83%AC%E3%83%99%E3%83%AB86%E7%99%BA%E9%9F%B3%E7%AD%8B%E8%82%89%E5%BC%B7%E5%8C%96%E7%B7%A8-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96-%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%AB%E3%83%BC/dp/481253223X%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D481253223X">ザジングルズ </a>&#8221; という発音の練習本に手を付けた。
以前同じシリーズの <a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E3%81%AE%E7%99%BA%E9%9F%B3-%E3%82%B6%E3%82%B8%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BA-%E3%83%AC%E3%83%99%E3%83%AB85%E5%9F%BA%E7%A4%8E%E7%AD%8B%E8%82%89%E7%B7%A8-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96-%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%AB%E3%83%BC/dp/481253206X%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D481253206X">簡単なバージョン </a> を先の友人のすすめでやったことがあり、それなりによかった気がしたため。
毎朝一日 15 分くらい。間違えやすい子音や母音の入った短い文章を、リファレンス音声の真似をして発音する。退屈だけど負担は高くない。</p>

<p><a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E3%81%AE%E7%99%BA%E9%9F%B3%E3%82%B6%E3%82%B8%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BA-%E3%83%AC%E3%83%99%E3%83%AB86%E7%99%BA%E9%9F%B3%E7%AD%8B%E8%82%89%E5%BC%B7%E5%8C%96%E7%B7%A8-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96-%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%AB%E3%83%BC/dp/481253223X%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D481253223X"><img class="asin" src="http://ecx.images-amazon.com/images/I/51wLvY3%2BLhL.jpg" title="ザジングルズ " /></a></p>

<p>ただこれも二ヶ月くらいでやめた。以前やったときほど上達を実感できなかったのと、このときは発音への関心が低かったせいもありそう。</p>

<h2>K/H System, シャドウイング</h2>

<p>&#8220;ザジングルス&#8221; に挫けて余った時間を何に使おうかとウェブや Amazon を物色したところ、
書籍 &#8221;<a href="http://www.amazon.co.jp/%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E6%B3%95K-System-%E5%85%A5%E9%96%80%E7%B7%A8-%E5%9B%BD%E4%BA%95-%E4%BF%A1%E4%B8%80/dp/4757403054%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4757403054">究極の英語学習法K/H System </a>&#8221; の評判がよい。私も読んでみた。
名前がうさん臭いので警戒していたけれど、乱暴にいうと「完璧にできるようになるまで同じ文章を何度もシャドウイングしろ」と主張する本。
主張に説得されてしばらくやっていた。毎晩 30 分とか、そのくらい。</p>

<p><a href="http://www.amazon.co.jp/%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E6%B3%95K-System-%E5%85%A5%E9%96%80%E7%B7%A8-%E5%9B%BD%E4%BA%95-%E4%BF%A1%E4%B8%80/dp/4757403054%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4757403054"><img class="asin" src="http://ecx.images-amazon.com/images/I/51V2DTCF9QL.jpg" title="究極の英語学習法K/H System " /></a></p>

<p>この方法はそこそこ気に入った。教材 CD についてくるスピーチと transcript を練習するのは例のごとく一ヶ月くらいで飽きたものの、
暗記する勢いで繰り返しシャドウイングするやり方自体は効果があるように思えた。</p>

<p>まず、声を出すおかげで眠くなりにくい。だいたい勉強はネムいものなので、眠くならないのはありがたい。
あとシャドウイングできない部分を繰り返し練習するため、苦手なものを自然と重点的に鍛えられる。
そして同じ教材をしつこくやると段々スムーズにシャドウイングできるようになるから、すごく上達した気分になれる。
特定スピーチのモノマネがうまくなるだけなので体感ほど英語力がつくわけじゃない。
それでも上達した気分はやる気を支えてくれる。楽器で特定の曲を繰り返し練習し、その曲の演奏がうまくなるのに似ている。</p>

<p>方法論はいいけど教材には飽きた。そこで付属の CD は切り上げ、他の題材を探すことにした。
<a href="http://ted.com/">TED</a> を探すと数分で終わる短いスピーチもあることがわかった。
(<a href="http://www.ted.com/talks">講演一覧をスピーチの長さでフィルタできる</a>。) 何本か視聴し、気に入ったやつを題材に練習した。
お気に入りは Terry Moore による <a href="http://www.ted.com/talks/terry_moore_why_is_x_the_unknown.html">変数名 X の由来</a>.
一時期は X とスペイン語の関係を詳しく説明できるようになりました. すごいどうでもいいけど&#8230;</p>

<iframe width="560" height="315" src="http://steps.dodgson.org//www.youtube.com/embed/YX_OxBfsvbk" frameborder="0" allowfullscreen></iframe>


<p>ついでに TED のサイトから transcript を切り出す手間を省こうと <a href="http://gisted.in/">Gisted</a> なるツールを<a href="http://steps.dodgson.org/b/2013/02/17/ideas-worth-pasting/">作ったりもした</a>。
これで transcript を切り出して Pocket に保存し、そのテキストをタブレットで見ながらシャドウイングする。</p>

<p><img src="https://lh5.googleusercontent.com/b4BSsIU75AxzBfa1EeE5hg0S_qEpwY50H-pXjJ2EfBaG=w759-h569-no" alt="gisted" /></p>

<p>音声プレイヤにはもともとスマホをつかっていたのだけれど、途中から <a href="http://www.amazon.co.jp/Apple-iPod-shuffle-%E3%82%B7%E3%83%AB%E3%83%90%E3%83%BC-MC584J/dp/B0040ZO8RC%3Fpsc%3D1%26SubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0040ZO8RC"> iPod shuffle </a> に乗り換えた。
こまめに一時停止や巻き戻しをするシャドウイング中は物理ボタンが頼もしい。
タッチ操作に感じていた小さなストレスに気づいてしまうとスマホでシャドウイングしたくなくなる。
Apple 製品な割に値段も安くてよい。</p>

<p><a href="http://www.amazon.co.jp/Apple-iPod-shuffle-%E3%82%B7%E3%83%AB%E3%83%90%E3%83%BC-MC584J/dp/B0040ZO8RC%3Fpsc%3D1%26SubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0040ZO8RC"><img class="asin" src="http://ecx.images-amazon.com/images/I/41GMluq9MJL.jpg" title=" iPod shuffle " /></a></p>

<p>時間は一日 30 分くらい、夜にやったり朝にやったり。</p>

<p>面倒に負けて挫けないよう、練習の手順には手抜きをした。
元々の教科書は自分の声を録音して間違いを数え成績をつけろという。進捗を調べるためだ。
この採点作業がすごく面倒くさい。なので TED 教材では採点を省いた。
声を出して読めばを詰まる場所、聞き取れない場所はだいたいわかる。その自覚を軸に練習すればいいと割り切った。
手抜きのせいで効率は落ちていると思う。そのへんは根気とのトレードオフ。</p>

<p>採点しないと特定教材を合格とみなし次に進むための基準がはっきりしない。
これも問題だけど、時間を決めて切り上げようと割り切った。
五分くらいのスピーチを前半と後半にわけてシャドウイングし、前半と後半それぞれ二週間練習したら次に進む。
１スピーチ一ヶ月はまあまあ妥当な長さだった。しゃべりの速さにもそこそこついていけるようになり、かわりに飽きはじめる頃合い。</p>

<p>このシャドウイング練習は割と気に入っており、さぼる期間がありつつ今でもぼちぼち続けている。
あとは採点作業を自動化できるテクノロジーがあればなあ。</p>

<h2>Anki</h2>

<p><img src="https://lh3.googleusercontent.com/SFR79CYb9MaSnVxzZwGxDz40aj7_7cVT9GnaCrU7drxP=w759-h569-no" alt="anki" /></p>

<p>数ヶ月続けた末、いよいよ iKnow! に飽きてきた。
コースの構成が初心者向けに偏っており単語の網羅率が心細いのと、
心的負担を下げる引き換えに単語を詰め込む速度が遅い気がする。
あとデータのロードにともなうアプリの遅延もちょっとある。もっとキビキビやりたい。</p>

<p>単語暗記は続けたい。単語を覚えるほど文章を読むのがラクになるのは確かだし、
暗記の作業自体も進捗がわかりやすく達成感がある。</p>

<p>そこで iKnow は 切り上げ、本屋で売っている単語帳を覚えていくことにした。
手始めに <a href="http://www.amazon.co.jp/DUO-3-0-%E9%88%B4%E6%9C%A8-%E9%99%BD%E4%B8%80/dp/4900790052%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4900790052">DUO </a> とかやってみっか、
みたいなかんじで手を付けたら大学受験にでてきそうな単語すら知らないものが多く、我ながら語彙不足を痛感。
そのあとは構文の本を一冊、そして <a href="http://www.amazon.co.jp/%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%8B%B1%E5%8D%98%E8%AA%9ESVL%E3%80%88Vol-2%E3%80%89%E4%B8%AD%E7%B4%9A%E3%81%AE3000%E8%AA%9E-%E3%82%A2%E3%83%AB%E3%82%AF%E8%8B%B1%E8%AA%9E%E5%87%BA%E7%89%88%E7%B7%A8%E9%9B%86%E9%83%A8/dp/4757411170%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4757411170">SVL2 </a> を済ませ、今は <a href="http://www.amazon.co.jp/%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%8B%B1%E5%8D%98%E8%AA%9E-Standard-Vocabulary-%E4%B8%8A%E7%B4%9A%E3%81%AE3000%E8%AA%9E-Vol-3/dp/4757412207%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4757412207">SVL3 </a> をやっている。</p>

<p><a href="http://www.amazon.co.jp/%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%8B%B1%E5%8D%98%E8%AA%9E-Standard-Vocabulary-%E4%B8%8A%E7%B4%9A%E3%81%AE3000%E8%AA%9E-Vol-3/dp/4757412207%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4757412207"><img class="asin" src="http://ecx.images-amazon.com/images/I/51guBoi04TL.jpg" title="SVL3 " /></a></p>

<p>単語帳のチョイスはだいたい <a href="http://d.hatena.ne.jp/higepon/20110218/1298031178">higepon</a>-san を真似している。
ただ iKnow! に飼いならされた私には紙のカードをつかう higepon メソッドを取り込む気力が無かった。やっぱり計算機の力は頼りたい。</p>

<p>ツールを物色してみると、<a href="http://ankisrs.net/">Anki</a> というオープンソース単語帳アプリの評判がよい。
iKnow! と同じ路線、記憶強度に応じた出題頻度をもつ単語帳。
デスクトップ版のほか、<a href="https://play.google.com/store/apps/details?id=com.ichi2.anki&amp;hl=en">あんどろ版</a> (AnkiDroid) や<a href="https://ankiweb.net/">ウェブ版</a> (AnkiWeb) などがある。
ウェブ版はオープンソースではないけれど、なぜかデスクトップ版やあんどろ版とデータを同期できる。</p>

<p>そこでデスクトップ版 Anki から単語を入力し、暗記作業自体はデータを同期した AnkiDroid を使うことにした。どこでもできる方が便利だからね。
AnkiDroid の UX は昨今のスマホアプリ水準からすると冴えないけれど、
Anki ゆずりの出題順序アルゴリズムがちゃんと動くので文句はない。
ちょっとカスタマイズすればそれほどストレスなく使える。何よりデータがオープンでよい。</p>

<p><img src="https://lh5.googleusercontent.com/-qHbCvRTNkxc/Um0TpeTsUwI/AAAAAAAAaVo/CY0VWSvq5_M/w342-h569-no/Screenshot_2013-10-27-22-22-02.png" alt="AnkiDroid" /></p>

<p>単語登録に使うデスクトップ版の Anki は一段と UI がへぼく、そのまま使うのは堪えなかった。
行指向の適当なファイルフォーマットをきめて Emacs 上で単語リストを書き、それを CSV に変換してインポート機能経由で登録することにした。</p>

<p>こういう行が:</p>

<pre><code>Nick looks down on anyone who comes from [rural] area.; ニックは地方出身者なら誰であろうと見下している。; p.504
</code></pre>

<p>こういう CSV になる:</p>

<pre><code>"ニックは地方出身者なら誰であろうと見下している。&lt;hr /&gt;Nick looks down on anyone who comes from &lt;b&gt;*****&lt;/b&gt; area.","Nick looks down on anyone who comes from &lt;b&gt;rural&lt;/b&gt; area. (p.504)"
</code></pre>

<p>カードの表は和文と伏せ字つき英文、裏が正解の英文。
タイポがあったときに備え、出典元単語帳のページ数も書いてある。</p>

<p>世の中にはもっといろいろがんばっている人もいる。
<a href="http://d.hatena.ne.jp/oscdis765/20130310/1362923390">ウェブで見かけた単語をブラウザから Anki に直接登録する</a> なんてのはかっこいいのでそのうち真似したい。</p>

<p>&#8230;などと小細工をしたものの、単語の登録作業が面倒なのに変わりはない。かなり苦痛。
単語帳がデータとして手に入るなら１０倍の値段でも買うと思う。
というかオープンデータとして単語帳がほしい。
適当なコーパスをもとに頻度順単語リストをつくり、例文と翻訳はウェブ引用と手動クラウドソースの組み合わせで仕立て上げる、
みたいな妄想はみんなしてると思う。税金なり金持ちの道楽なりでやってほしいものですよ・・・。</p>

<p>単語暗記の話にもどると、先人 iKnow! は音声のありがたみを教えてくれた。
Anki を使うときもその感覚を再現すべく、答えの例文は毎度音読している。
自分で読む発音はかなりあやしいけれど、
声を出せば眠くなりにくいし覚えもめでたい。気がする。
空き会議室にもぐりこんでぼそぼそやってる。</p>

<h2>NYTimes</h2>

<p>Anki とシャドウイングを中心に練習しているうちに TOEIC のリスニングスコアが上限に達してしまった。
シャドウイングでリスニングを鍛えても、もうスコアはあがらない。リーディングを鍛えないといけない。
そこで多読ベースのリーディング練習をしようと決め、いくつかの読み物を試した。</p>

<p>まず仕事のメールを真面目に読もうとしてみた。これはうまくいかなかった。
読む必要のあるメールはすでに真面目に読んでいるし、どうでもいいメールに目を通すほど仕事中はヒマじゃない。
あとメールのスレッドって妙に読みにくいよね。メール読みスキル自体は鍛えた方がいい気もすれど、
リーディングの題材としてはノイズが多すぎた。</p>

<p>次に適当な本を Kindle で買って読んでみた。これもいまいちピンと来ずやめてしまった。
同じ作者、同じ題材の文体を読み続けても訓練としてはマンネリで、
読み進めるほどコンテンツへの理解や適応が進んで飛ばし読みやすくなってしまう。
純粋な読書ならコンテンツに適応するのは良いことだけど、訓練として負荷が下がるのはあまり嬉しくない。</p>

<p>以前から適当なウェブの読み物を Instapaper に溜め込んでいたので、
この積ん読を積極的に消化しようともしてみた。これもいまいちだった。
ブログ系の文章は文体、コンテンツとも玉石混合でハズレが多く、
読んでてむかついたりすると気が散る。そんな駄記事をさっさと打ち切りたい一方、
訓練でスキップばかりしているとリズムが狂う。ズバっと読み通して理解する多読訓練には向かない。
あと自分バイアスにより記事がプログラマ向けばかり。語彙の偏りがきつい。</p>

<p>ただ Instapaper 積ん読業の副作用として商業読み物サイトには少し詳しくなった。
たとえば私の趣味に照らすと <a href="http://www.nytimes.com/">nytimes.com</a> の記事はけっこう良い。
試してみるとアプリの出来も良い。
<a href="https://play.google.com/store/apps/details?id=com.nytimes.android">あんどろ版の NYTimes</a> は Instapaper に近い UX でテキストが読みやすく、オフラインでも動く。
そんなわけで NYTimes 電子版を購読し、タブレットで読むことにした。退社前に記事をフェッチし、帰りがてらコーヒー屋に寄って 30 分から一時間くらい記事を読む。
自分の好みに偏らないよう、Top News の一本目は無条件に読むルール。</p>

<p><img src="https://lh6.googleusercontent.com/-u0yKGDgHIH4/Umvr_aIm0jI/AAAAAAAAaVY/P3zzVZly4m4/w356-h569-no/Screenshot_2013-10-27-01-20-33.png" alt="screenshot" /></p>

<p>このアプリ新聞読み業は気に入った。体調の都合からカフェインを控えるようになりコーヒー屋通いはやめたけれど、
NYTimes の購読自体はつづけている。ぼちぼち読んでる。</p>

<p>新聞社だけあって、NYTimes はコンテンツも安定している。
まず記事の長さや質が比較的そろっていて、
ろくでもない内容だからと読まずに捨てる必要がすくない。
ヘッドラインから抱いた期待が裏切られにくい。</p>

<p>一方でニュースだけでなく Op-ed みたいのもあるから、
味気ない報道記事ばかりというわけでもない。
トップニュースを二三本読み、戦争と国民皆保険の話でお腹いっぱいなったら Op-Ed を読んで気分転換する、
みたいな読み方をしている。ただ Op-ed 系は書き手の技能がまちまちでハズレもある気がする。
アメリカ人リテラシーがある人は著者名から色々判断できるのだろうと想像している。</p>

<p>そして普段目にしない単語が沢山でてくる。これが一番大切。
ちょうど Anki に登録した例文に見たこともない語が増えており、
これ覚えても意味あるんかな・・・とやる気を失いかけていた。でも新聞記事は話題が広いぶん見慣れない語が多い。
たとえば軍事、政治関係の単語は覚えるだけ無駄だと思っていたけれど、新聞記事にはしょっちゅうでてくる。
文章を通じて未知語に会うプレッシャーと、単語を覚えて文章が読めるようになる喜びを取り戻せた。</p>

<p>新聞がスラスラ読めるまでにはまだだいぶ距離ありそうだけど、
飽きたら雑誌など違うメディアに手を出すかもしれない。
語彙集合はジャンルの広さに比例するだろうしね。</p>

<p>さてリーディングの話。うさんくさい速読の本を何冊か読み、そこに共通する主張は意識している。
目を動かす速さを一定にする、同じ文章を戻って読み直さないなど、訓練モードのときは気にしながら読んでいる。</p>

<p>シャドウイングや単語暗記と違い、文章を読む行為には正誤のフィードバックがない。
ダレて速度や理解度が落ちても気付けないし、練習を通じてうまくなる実感も薄い。
他に良い方法を知らないからやっているけど、訓練としての質はいまいちだと思う。
良い方法が知りたい。せめて記事単位の単語数がわかれば読速を測るんだけどなあ。</p>

<p>それでも二ヶ月続けたらスコアはあがったから何かは鍛えられたようす。
誤差かもしれないけど、体感でも文書を読むのはビミョーに速くなった・・・ような気がする。</p>

<h2>活字メディア消費</h2>

<p>こういう訓練ぽいのとは別に、普段のひまつぶしメディアも英語に切り替えた。</p>

<p>これは数年前から徐々にやっていた。たとえば <a href="http://news.ycombinator.com/">Hacker News</a> くらいは眺めていた。
Blog も知り合い以外の日本語 blog はほぼ購読してない。昨年以来、この傾向をもうちょっとアグレッシブに倒してきた。</p>

<p>まず久しぶりに <em><a href="http://www.reddit.com/r/programming">Proggit</a></em> を見るようになった。
Hacker News は &lt;俺たちスタートアップエリート!> みたいな意識の高さが溢れておりボンクラ会社員は肩身が狭い。
しかも私の勤務先は HN で Microsoft の次に嫌われている。
Proggit はそうしたスタートアップミームが薄く、もうちょっと普通のプログラマっぽい話をしている。
あとハイテクゴシップがないのもよい。たぶんゴシップ系 subreddit と住み分けているおかげ。</p>

<p>Betaworks に買われておしゃれになった <em><a href="http://digg.com/">Digg</a></em>.
プログラマ向けでないどうでもいい話が読みたいときにひやかす。
Digg Reader 経由で Instapaper に保存できるのも良い。(Feed 読みは <a href="http://digg.com/reader">Digg Reader</a> つかってます。)
どうでもよさレベルはだいたいはてなブックマークトップページくらい。だから純粋な気晴らし向け。
最近は NYTimes に満足しており、あまり見なくなった。
サブカル力を高めたくなったら読み始めるかもしれない。</p>

<p>新鋭ニュースサイト <em><a href="http://qz.com/">Quartz</a></em>.
主にクリーンなデザインが好きで、メール購読を併用しつつ眺めていた。Digg 同様 NYTimes 導入によりフェードアウト。
フェードアウト組といえば一時期 <a href="http://www.bbc.com/">BBC</a> を眺めていたこともあった。
アメリカびいきがなかったり解説記事がすごく丁寧だったりとコンテンツはいいんだけど、
ウェブもアプリも UX がいまいち散乱気味。そのせいか段々見なくなった。
活字で読むよりテレビで見ろ、ということかも。</p>

<p><em><a href="https://medium.com/">Medium</a></em> は西海岸ポエムが中心の中央集権型 Blog サービス。
<a href="https://twitter.com/Medium">Twitter の @Medium</a> をフォローして、目にとまったときだけ読んでいる。
Digg と比べるとどうでもよさの振幅がすくなめなのが良いといえば良い。コンテンツの多様性がないとも言える。
はやりものなので一応ひやかしているけれど、もうすぐ飽きそう。</p>

<p>ハイテクゴシップ系は <em><a href="https://flipboard.com/">Flipboard</a></em> の Technology セクションをぱらぱら見ている。
<a href="http://www.theverge.com/">The Verge</a> と <a href="http://arstechnica.com/">Ars Technica</a> も Flipboard で購読。
ハイテクゴシップは Instapaper を経由せず、気になったものはその場でずばっと読むようにしている。
多くの記事はそんなに長くないので、流し読みの練習にはよい。</p>

<p><em>Hacker News</em> や <em>Proggit</em> は トップページ周辺をつまみ食いするだけにしている。Feed 経由では読んでいない。
購読するには量が多すぎ。</p>

<p>Feed 経由で読んでるのは昔ながらの <em>blog</em> たち。
月に一回ぐらいずばーっとタイトルを眺めて Instapaper に放り込み、気が向いたときに読めるだけ読むかんじ。
熱心に読んでいるとは言えない。</p>

<p>Feed 代替のコンテンツ推薦エンジン <em><a href="http://getprismatic.com/">Prismatic</a></em>.
パーソナライズして選んだトピックに関する記事が延々と降ってくる。
めちゃめちゃ強力なので一時期熱心に使ってたけど、際限のないコンテンツ量と Filter bubble 的恐怖心に挫け今は見てない。
20 代の体力があったらたぶん毎日見てる。</p>

<p>技術書。とりあえず日本語では買わなくなった。英語だとだいたい電子版があるのはよい。
消化する冊数自体はすくない。この一年はテクニカルな勉強をさぼっていて、
それは英語訓練の対価だとあきらめている。もうちょっとなんとかしたいけどね・・・。</p>

<p>日本語向けにはてなブックマークもちらちら眺めてはいる。
ただメディアの食欲を他で満たせているせいか食指の動きは鈍い。
プログラマ向けのニュースは HN や Proggit から一周遅れたのが届くし、ハイテクゴシップも同じ。
日本語圏固有の面白い話もなくはないけど、まあいいかとおおむね無視している。
割り切ってみると、少なくともプログラマ/ハイテクゴシップ/ガジェット好きとしてのメディア消費は英語だけで気が済むと思う。
政治やサブカルなど日本語で読みたいジャンルもあるとは思うけどね。
たとえばデジカメは日本製がすばらしいので私もデジカメニュースは日本語で読んでる。</p>

<h2>音声メディア消費</h2>

<p>英語圏はプログラマ向けの音声コンテンツが充実しており、見始めるときりがないくらい量がある。</p>

<p>当初はもっぱら <em><a href="http://www.infoq.com/">InfoQ</a></em> の講演やインタビューをよく見ていた。
ここの講演はハイテク企業系からオープンソース・コミュニティ寄りまで幅広く、選択も O&#8217;Reilly より鼻が利く感じで気に入っている。
ただサイトの出来がいまいち。特にモバイルで見づらい。YouTube と Podcast に時間を使い始めて以来、足が遠のいている。
YouTube や Vimeo あたりの専業サイトにコンテンツをホストしてくればいいのに。音声データだけ Podcast で配信するとかさ・・・。</p>

<p><em>YouTube</em> &#8230; といってもいろいろあるけど、基本的には 1) 気に入ったチャンネルを購読しておき、たまにざっと眺めて Watch Later に入れるか、
2) ウェブで見かけたコンテンツを Watch Later しておく。で、ダラダラしたい気分の時にタブレットで消化する。</p>

<p>本を読むよりテレビを見る方がラクなのと同じで、慣れてくると Instapaper を消化するより Watch Later を消化するほうがラクになる。
かならずしも中身を聞き取れているわけじゃないし、よく寝落ちもする。そんなやる気のない消費スタイルもテレビっぽさと割り切っている。
まあ私はテレビをもってないので YouTube とタブレットがテレビみたいなもんです。
(愛社精神バイアスがあるのでそのへんは免責してください。)</p>

<p>プログラマむけのチャンネルとユーザをいくつか紹介してみたい。</p>

<ul>
<li><a href="http://www.youtube.com/user/OreillyMedia">O&#8217;Reilly Media</a> : Velocity, Strata, OSCON あたりのカンファレンス動画があってすばらしい。そのほかの動画も多いけど、割とどうでもいい。</li>
<li><a href="http://www.youtube.com/channel/UCtXKDgv1AVoG88PLl8nGXmw">Google Tech Talk</a> : 最近は外部の人のテックトークは減ってしまいさびしいけれど、検索会社由来テックトークにも面白いやつはある。会社主催の外向けカンファレンスの動画なんかは面白い。最近だと <a href="https://developers.google.com/google-test-automation-conference/2013/presentations">GTAC</a> はよいです。</li>
<li><a href="http://www.youtube.com/channel/UCVHFbqXqoYvEWM1Ddxl0QDg">Android Developers</a> : Android オフィシャルな開発者向けチャンネル。最近あんどろ入門したいとおもいつつ挫けているので、せめてビデオくらいは見ようと購読。面白いシリーズをみつけてそれだけ見ると良い。</li>
<li><a href="http://www.youtube.com/user/GoogleDevelopers">Google Developers</a> : Google I/O 動画など。</li>
<li><a href="http://www.youtube.com/user/Airbnb">Airbnb</a> : 一時期よくテックトークをやっていた。最近はトーンダウン。</li>
<li><a href="http://www.youtube.com/user/TwitterUniversity">Twitter University</a> 始まって間もない期待の新星。モバイルでクラウドヒャッホイ、みたいな内容。</li>
<li><a href="http://www.youtube.com/channel/UCzoVCacndDCfGDf41P-z0iA">JS Conf</a> : 同名のカンファレンスアカウント。</li>
<li><a href="http://www.youtube.com/user/TEDtalksDirector">TED</a> : プログラマ関係ないな。最近はあんまし見てない。</li>
</ul>


<p>今のところウェブでみかけた動画の持ち主を subscribe し、購読リストを育てている。Feed とおなじでそのうち破綻しそうではある。
ほとんどスキップして面白そうなやつだけ見るのも feed と似ている。</p>

<p>つぎ。<em>Podcast</em> &#8230; は<a href="http://steps.dodgson.org/b/2013/09/21/an-overnight-podcast-listener/">こないだ書いたようなかんじ</a>です。にわかです。
メディア消費のラクさでは Podcast が突出しているため過剰に消化している気はする。
オフライン用にダウンロードを済ませ電車の中で聞けるのは強い。
量が多すぎるため購読しても全部は聞かずつまみ食いが基本。これも feed とおなじ。</p>

<p>そういえば <em>NYTimes</em> アプリも記事に動画がついてることがある。たまに見ている。オバマのスピーチなんかが見られてちょっと楽しい。</p>

<p>自分の音声コンテンツは全体的にテクニカルなのに偏りすぎており、活字ほど幅がないのは気になっている。
ただランダムなコンテンツを見てもぜんぜん聞き取れなかったりするからむずかしい。道は長い。</p>

<h2>さぼりと再開とメディア消費</h2>

<p>シャドウイングや単語暗記などの訓練系はそれなりにしんどく、結果としてさぼっている期間がけっこうある。
一年前に始めた活動だけれど、やる気を失ったり忙しかったり体調悪かったりで、合計すると一年の 1/3 くらいの期間はさぼっていた。
たださぼり期間後に再開できたのが従来の挫折と今回の違いだと自分では思っている。</p>

<p>再開できた理由の一つは個々の訓練を 30 分スロットの短い単位にとどめ、複数トラックを並列に進めたことだと思う。
さぼり期間後に気を取り直し再開しようと思ったとき、１トラックだけで部分的にはじめることができる。</p>

<p>だいたいはまず単語暗記を再開し、しばらく新しい語は増やさず復習だけやる。
しばらくして体が勉強してもいいモードになってきたら、
新しい単語を流し込んだりシャドウイングなんかの別トレーニングを再開したりする。
段階的に立て直すのは怠け癖と戦いやすい。</p>

<p>さぼるときも、たとえば仕事が忙しいときは昼休みの単語だけさぼる、
みたいに部分的にさぼれるのがよい。完全にやる気を途切れさせずに済む。こともある。
すっかりさぼってる期間もままある・・・。</p>

<p>再開がうまくいったもう一つの理由は、メディア消費を欠かさなかったこと、な気がしている。
私はネット中毒者なので、忙しかろうがやる気がなかろうがメディア消費は続ける。
消費の量は上下すれど、ゼロにはならない。(というか、やる気がないときほどネット巡回ははかどるものです。)</p>

<p>私はメディア消費自体で語学力があがることは&lt;ない>と思っている。
自分のアクションにフィードバックが無いから改善しようがない。
メディア消費はさぼり活動、息抜きだから、intensive に取り組むすることも少ない。
たぶん筋肉と同じで、語学も負荷をかけないと上達はしない。</p>

<p>ただ語学力が下がるのを防ぐ効果はある気がする。少なくとも使ってはいるから。</p>

<p>メディア消費はやる気を取り戻すきっかけにもなる。
あるときふと昔より少しだけ速く文章を読めている自分に気づき、
もうちょっと頑張ろうと気を取り直したり、
逆に podcast 番組が全然聞き取れなくて、練習しないとダメだなと思い直したりする。</p>

<p>そんなかんじでメディア消費にも少しは語学訓練上の意味はあるとおもう。
ただ勉強した気になってしまう嫌いはあるので、それは気をつけないとね。</p>

<h2>Next Steps</h2>

<p>そんなかんじで無事当初の目標を突破したため、
今後は点数を気にせずしゃべり中心の練習に切り替えていきたい。
ちょうどいまはさぼり期なので、再開にむけてなにをやろうかとぼんやり考えている。</p>

<p>シャドウイングと Anki は継続したい。
シャドウイングは大変なのでうまく頻度を落としたい。一日 15 分くらいでいいかもしれない。
単語は見たこともない単語が増え覚える速度が落ちているので、
挫折しないよう新単語の登場速度を落としてチンタラやりたい。</p>

<p>しゃべる系は、なやみちゅう。
まず発音を今までちゃんと勉強したことがないので、一通りやりたいとおもっている。
&#8220;ザジングルス&#8221; では断片的すぎて系統的な見通しが立たなかった。
<a href="http://www.amazon.co.jp/%E8%8B%B1%E8%AA%9E%E9%9F%B3%E5%A3%B0%E5%AD%A6%E5%85%A5%E9%96%80-%E7%AB%B9%E6%9E%97-%E6%BB%8B/dp/4469245305%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4469245305">発音の教科書 </a> にはざっと目を通した。
あとはどうやって練習しようかと考えているところ。</p>

<p>短文丸暗記は割と効き目があると伝え聞いている。やるかもしれない。
Anki を使えばラクそう。まずは教材の選定から。</p>

<p>リアルタイム作文技能。世の中で人気の <a href="http://www.amazon.co.jp/%E3%81%A9%E3%82%93%E3%81%A9%E3%82%93%E8%A9%B1%E3%81%99%E3%81%9F%E3%82%81%E3%81%AE%E7%9E%AC%E9%96%93%E8%8B%B1%E4%BD%9C%E6%96%87%E3%83%88%E3%83%AC%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0-CD-BOOK-%E6%A3%AE%E6%B2%A2-%E6%B4%8B%E4%BB%8B/dp/4860641345%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4860641345">瞬間英作文 </a> は
良いアイデアに見えるものの、日本語を挟んで考えるのが望ましいのかと疑問もある。
まずは Amazon.com で ESL 系の教材を物色し、良いのがなかったら試すかもしれない。</p>

<p>ところでシャドウイングはさほどしゃべる力に寄与しない気がしている。
イントネーションに慣れたり、英語がずらずら口から出てくる状態を体験する効果はある。
でも作文技能みたいのは身に付かない感触。</p>

<p>メディア消費。活字も音声も、もうちょっと多様性を増やしたい。
活字にはフィクションとかエッセイみたいに文系っぽいやつを入れたい気分。
音声はテクノロジーじゃないニュースとかを聞くべきかもしれない。
ただメディア消費枠はすでにいっぱいなので、なにを削るかが問題。
これはネット/活字中毒者にとって永遠の悩み。
時間をかけてずらせればいい、くらいで真面目には考えてない。</p>

<p>などと色々悩んで入るものの、
大半の訓練はやった手応えに応じた効果はあるので何かしら手を付ければ良い
というのがこの一年の感想。挫けないようぼちぼち適当に再開したい所存です。</p>

<h2>まとめ</h2>

<p>この一年は英語の勉強がんばりました。
でも相変わらず英語しゃべれません。
なのでこれからもしばらくがんばりたいです。
おしまい。</p>

<hr />

<p>写真:</p>

<ul>
<li><a href="http://www.flickr.com/photos/banlon1964/257737706/">http://www.flickr.com/photos/banlon1964/257737706/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[にわか Podcast ファン]]></title>
    <link href="http://steps.dodgson.org/b/2013/09/21/an-overnight-podcast-listener/"/>
    <updated>2013-09-21T21:46:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2013/09/21/an-overnight-podcast-listener/</id>
    <content type="html"><![CDATA[<p><img src="http://farm1.staticflickr.com/95/258402966_ab3f35761e_b.jpg" alt="onair" /></p>

<p>出張中。時差ボケ修正のためキータイピングで眠気を払おうと試みているところ。
いつになくどうでもいい内容につき見逃してください。</p>

<p>最近はやりの Podcast 番組 <a href="http://rebuild.fm/">Rebuild</a> を聴きはじめた勢いで他の番組も聴くようになった。にわかポッドキャスト好き。
にわか欲があるうちに聞いている番組を紹介したい。といってもだいたい &#8221;<a href="http://weblog.bulknews.net/post/58665793844/tech-podcast-5">オススメ Tech Podcast 5選</a>&#8221;
の記事にあるやつなんだけど。ちなみに私の Podcast 歴がどれだけにわかかというと、rebuild.fm の序盤はブラウザから mp3 をダウンロードして聴いていたくらい。
Podcast はとっくに滅びたメディアだとおもっていた。でも Blog が生き残っている程度には元気だと知りました。</p>

<p>私の聞いている番組は基本的にアホらしい内容のものが多く、情報収集というより娯楽。
ニュースほど早口でも無味乾燥でもなく、講演ほど背筋が伸びておらず、
ある程度量のあるグダグダした英語を耳に通したい、という向きには良い。
内容がどうでもいいおかげか、聞き取れなくても損した気分にはならない。</p>

<h2><a href="http://atp.fm/">Accidental Tech Podcast</a></h2>

<p>上のおすすめでも紹介されている、元 Instapaper 開発者 Marco Arment と愉快な仲間たちによる雑談。
Marco Arment が Apple ファンかつ iOS 開発者なので、彼の作っているアプリの話をはじめ iOS 周辺の話が多い。
Apple のゴシップを上から目線で論評する展開もよくある。 たとえば iWatch の噂が流れていた頃は、
一時間かけて延々 &lt;ぼくのかんがえたさいきょうの iWatch> について熱弁していた。
また別の回では愉快な仲間の一人が Minecraft の Mod エコシステムがいかに原始的かを懇々と説いた。
もうちょっとコーディング寄りの話をする回もある。どうでもいい内容だけど、
ふだん雑談に飢えている寂しい人にはそのどうでも良さが沁みる。あとなぜかテーマソングがあるのも微笑ましくて良い。</p>

<p>毎回スポンサーがついており番組中でその製品を紹介するんだけど、その売り口上から派生する雑談もけっこう面白い。
たとえば <a href="http://www.filetransporter.com/">Transpoter</a> という NAS ぽい製品の紹介を皮切りに数回にわたり Mac OS バックアップ談義が派生し、
すげえどうでもいいわーとおもいながら聞いていた。スポンサー製品は気の利いたものが多く、それはよい。</p>

<p>似たような路線で Android ファンがやってる番組はないかと探しているけれど、いまのところ気に入るものは発見できず。</p>

<h2><a href="http://5by5.tv/quit">Quit!</a></h2>

<p>会社をやめて新しいことを始めようぜ！という趣旨の番組。目次を見るとわかるとおり意識高い感じで面白い。ただしこの手の話の常として若干単調。
たまに最近会社をやめた有名人がゲストで登場する。そんなゲスト回は面白い。私がこの Podcast を知ったのも、
<a href="http://www.theverge.com/2013/6/18/4439084/inside-pocket-how-read-it-later-beat-rivals-to-build-dvr-for-everything">The Verge の Pocket に関する記事で</a>
Marco Arment が Instapaper をやめたのはやる気を失ったからだと本人がある Podcast の中で告白していた、と紹介する一節を読んだのがきっかけだった(<a href="http://5by5.tv/quit/21">該当回</a>)。
他には <a href="http://5by5.tv/quit/32">Instagram をやめて Dropbox に転職したデザイナが登場する</a> 回も。
「Instagram は俺にとって居心地が良すぎたのさ・・・（フッ）」みたいな語りを聞きつつ、西海岸意識高いな・・・などとたじろぎました。</p>

<p>もう一つおもしろいのは、視聴者の悩み相談に電話でこたえるコーナーがあること。
「俺も一山あてて Marco (Arment) みたいになりたいんですッ！大学なんて言ってる場合じゃないから中退しようかと思っています」
と鼻息荒い若者に「普通 Marco になれるわけじゃないんだまず大学を出てからにしろ」と説いたり、
(私は知らなかったのだけれど Marco Arment は人気者のようである。ニューヨークの Naoya Ito だと思えばだいたいあってるかんじ。)
「僕も The City に行ってブイブイいわせたいんです・・・でも何も実績がないからどうしてらいいのか・・・」と悩む若者に
「タダ働きでもいいから現場に潜り込んで仕事を学ぶんだ」と煽ってみたり、
「最近失業したので起業でもしてみようかとおもうんです」というおっさんに
「お前家族はいるのか？妻と子どもがいる？貯金は？まず必要なのは稼ぎ口を見つけて生活を安定させることだ、起業はそのあとでいい」と諭したり、
洋の東西を問わない職業人の惑いを楽しめる。個人的にはこの読者コーナーが面白くて聴きつづけている。</p>

<h2><a href="http://thechangelog.com/">The ChangeLog</a></h2>

<p>毎回ゲストにオープンソースプログラマを呼び、そのゲストがやっているプロジェクトを中心に話が進む対談形式。
これは Podcast にしてはけっこう役にたつし、話も面白い。登場するプロジェクトのジャンルはウェブ系が中心。</p>

<p>最近だと面白かったのは、たとえば <a href="http://5by5.tv/changelog/98">Helios や AFNetwork の作者を呼んだ回</a>。
AFNetwork の AF が何か(花の名前)、この開発者が元々なにをしていた人なのか
(Gowalla で iOS アプリを書いていたが Facebook による買収後に Heroku に転職し Gowalla 由来ライブラリの開発を続けている)
Helios はどのくらいやる気なのか(世間の反応次第。開発者いまのところこのひとだけ) など、Blog なんかでは読めないトリビアが聴ける。
そのほか <a href="http://5by5.tv/changelog/89">Docker</a> の回を聴くと、これを書いたのが dotCloud の元 CEO (Docker 書きたさに役職から退任) であり、
dotCloud にとって Docker が戦略的なプロジェクトだとわかる。そして続く <a href="http://5by5.tv/changelog/99">Flynn の回</a> では
<a href="https://flynn.io/">Flynn</a> (crowd funding で開発すると宣言されたオープンソース化予定の vaporware PaaS) と Docker は関係が深いとわかる。
など、どの回もそれなりに面白い。バックナンバーもちまちま聴いている。</p>

<p>オープンソース系だと他に <a href="http://twit.tv/floss">FLOSS Weekly</a> というのも聴いてみたけど、これは全然おもしろくないね。</p>

<h2><a href="http://blog.stackoverflow.com/category/podcasts/">The Stack Exchange Podcast</a></h2>

<p>Stack Exchange の新機能や最近の動向をめぐる雑談。無駄に Stack Exchagne に詳しくなる。
参加者がすごい勢いで話を被せ合うため大変聞き取りづらい。
ホストである Joel Spolsky へのおっかけ精神と、聞きづらいののも一個くらい聞いておこうというマゾ精神で聴いている。</p>

<p>コミュニティを持つサービスがユーザに向けて Podcast を持つのは良いアイデアに思えた。
僕が Stack Exchange ヘビーユーザだったらこれはとても面白いし、 Stack Exchange への愛着も増すと思う。</p>

<p>他にもいくつか試しに聴いてるのはあるけど、今のところ面白いと他に言えるものは見つけられていない。
なにかおすすめがあったら教えて下さい。</p>

<h2>Podcast はいつ聴くの？</h2>

<p>上で紹介した Podcast はどれも尺が長い。
最近おしえてもらった <a href="https://play.google.com/store/apps/details?id=au.com.shiftyjelly.pocketcasts">Pocket Cast</a> というあんどろアプリは
再生速度を調整できるから多少はちょろまかせるものの、それにしても長い。
人々はどんな隙をみつけて Podcast を聴いているのだろう。私はまだ決め手がなく、アドホックに消化している。</p>

<p>電車通勤で聴くはどうか。普通なら悪くない。車内の騒音は耳栓型イヤホンでそれなりに緩和できる。
手を塞がれない Podcast は画面が必要な Instapaper/Pocket 方面より通勤向きな気がする。
ただ私は天気が許す限り電車通勤を避けているので、雨がふらないとキューが減らせない。</p>

<p>ジムの運動中。これは良い。InfoQ の講演もよく走りながらで聞いていた。でも最近通えておらず根気不足が問題。</p>

<p>一人で食事をしているとき。これもまあそんなに悪く無いけど、イヤホンつきでごはんを食べるのは抵抗がある。慣れるかしら・・・。</p>

<p>仕事中。気が散るのがつらい。<a href="http://steps.dodgson.org/b/2012/05/20/gardening-with-canaries/">ビルド監視業</a>のように集中より退屈しのぎが意味を持つ場面にはあう。
ただそんな仕事ばかりではないから日常に組み込めるとはいえない。</p>

<p>ヒコーキ。とてもよい。今回の出張でもだいぶ消化できた。ただ出張なんて年に数度だからこれも日常ではない。</p>

<p>ダラダラとウェブをみているとき。悪くない。
ウェブも Podcast もコンテンツの中身は概ねどうでもいいものだから、
オーバーラップして両方適当に消化するのはメディア中毒者のあるべき姿な気がする。
一方でまとまった時間をつかってウェブをダラダラみるかというと、普段はあまり見ない。
かわりに細かく切り刻まれたダラダラが日常に練りこまれている。
この断片をまとめるよう時間の使い方を見直せばいいのかもしれない。
でもしょうもない無駄話を聴くために生活の規律を高めるなんて、どこか腑に落ちない・・・。</p>

<p>世間の人々はどうやって Podcast を聴いているんだろうとにわかな自分は思うのでした。
むしろ伝統的ラジオ愛好家に尋ねた方がいいのかもしれないけどね。</p>

<hr />

<p>写真: <a href="http://www.flickr.com/photos/williamli1983/258402966/">http://www.flickr.com/photos/williamli1983/258402966/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymer と Web Components]]></title>
    <link href="http://steps.dodgson.org/b/2013/05/19/polymer-and-web-components/"/>
    <updated>2013-05-19T16:52:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2013/05/19/polymer-and-web-components/</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-9zZUBHxBgGQ/UZQRtN01GRI/AAAAAAAANcU/8LQVNUI4o6U/w772-h515-no/IMG_0046.JPG" alt="pichai" /></p>

<p>先週はサンフランシスコで勤務先の年次博覧会が催され、中には自分と近いプロジェクトを紹介するセッションもあった。
いい機会なので便乗して宣伝してみたい。自主会社員活動につき勤務先の見解と違っても見逃してください。</p>

<p>さて件の年次博覧会、<a href="http://www.youtube.com/watch?v=0g0oOOT86NY">ウェブ開発者向けの講演の一つ</a>で
<strong><a href="http://www.polymer-project.org/">Polymer</a></strong> という新しい JavaScript UI フレームワークが公開された。
<a href="https://developers.google.com/closure/">Closure</a>, <a href="https://developers.google.com/web-toolkit/">GWT</a>, <a href="http://angularjs.org/">Angular</a> ときて
また別のフレームワークかよ&#8230;とぼやく人の気持ちもわかる。でもそれほど被るものでもないから見逃してほしい。</p>

<p>なるべく多くのブラウザで動かそうとする既存のフレームワークと違い、
Polymer は新しいブラウザの機能を使い倒すことで強力なフレームワークを作ろうとしている。
別に特定ブラウザでしか動かないわけじゃない。ただ将来そうした新しい機能が各種ブラウザに備わる日を見越し、
そのときベストに動くものを作ろうとしている。</p>

<p>といってもピンとこないとおもうので、まずは Polymer が期待しているブラウザの新しい機能をざっと紹介してみよう。</p>

<h2>Web Components</h2>

<p>Web Components は新しく提案されたウェブブラウザ向け API 一式の総称。
<a href="http://www.w3.org/TR/2013/WD-custom-elements-20130514/">Custom Elements</a>,
<a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html">HTML Imports</a>,
<a href="http://www.w3.org/TR/2013/WD-html-templates-20130214/">HTML Templates</a>,
<a href="http://www.w3.org/TR/2013/WD-shadow-dom-20130514/">Shadow DOM</a> という各種 W3C 提案をまとめて Web Components という。</p>

<p>なぜこれを Web Components と呼ぶのかはあとで考えるとして、
それぞれの提案がどんな機能をもつ API なのかをざっと眺めてみよう。</p>

<p><strong><a href="http://www.w3.org/TR/2013/WD-custom-elements-20130514/">Custom Elements</a></strong> は
ウェブ開発者が HTML に独自のタグを追加できる仕組み。
こんなかんじで JavaScript から新しいタグを登録する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;x-greeting&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">prototype</span><span class="o">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">HTMLElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hello</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Hello!&quot;</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;div&gt;Hello, Custom Elements!&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで HTML パーサが <code>&lt;x-greeting&gt;</code> を処理するようになる。
JavaScript の <code>document.register()</code> API を使う代わりに <code>&lt;element&gt;</code> タグを使う宣言的な書式もある。
引数に渡されたオブジェクトの <code>ready</code> 関数は、タグ(Element)が作られるたびに呼び出される。コンストラクタっぽく使える。</p>

<p>別の見方をすると、
Custom Elements はブラウザの仕組みを使って <a href="http://developers.facebook.com/docs/reference/plugins/like/">Facebook の</a> <code>&lt;fb:like&gt;</code> みたいのを書くための仕組みだと考えてもいい。
ブラウザが手伝うから微妙なイベントのタイミングなどをやりくりする必要はなくなるし、DevTools などでデバッグするのも楽になる。</p>

<p><strong><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html">HTML Imports</a></strong> は別ファイルに定義した Custom Elements をページ内に読み込む仕組み。
Custom Elements が新しいクラスを定義するとしたら、HTML Imports はプログラミング言語の <code>require</code> や <code>import</code> みたいなもの。</p>

<p>HTML をインポートするには <code>&lt;link rel="import" href="mycomponents.html"&gt;</code> などと書く。
なぜ JavaScript ではなく HTML を読み込むのか。それは後述する HTML Templates や Shadow DOM と組み合わせ、HTML や CSS の断片を Custom Elememts の定義に使いたいから。
HTML や CSS の処理をブラウザに任せればそれだけ速く動くし、なにより JavaScript のコードに雑音が混ざらない。
なお HTML Imports で読み込んだ HTML は API で DOM ごと触れるようになる。</p>

<p><strong><a href="http://www.w3.org/TR/2013/WD-html-templates-20130214/">HTML Templates</a></strong>. 名前からはテンプレートエンジンを想像するけれど、
テンプレートエンジンそのものではない。テンプレートエンジンの実装に使うちょっとしたツール <code>&lt;template&gt;</code> タグを定義する。</p>

<p><a href="http://mustache.github.io/">Mustache</a> に代表される JavaScript 製テンプレートエンジンには、テンプレートの文字列を <code>&lt;script&gt;</code> タグに押しこむハックがある。
これはまあまあ便利なのだけれど、たとえば <code>&lt;script&gt;</code> をネストできないなどのしょぼい制限がある。
そして最終的に innerHTML をつかって HTML をパースするためアプリの動きを遅くする。</p>

<p>HTML Templates に定義された <code>&lt;template&gt;</code> タグでテンプレート用の HTML を囲んでおくと、
その中身は文字列ではなく HTML として解釈される。要するにブラウザがパースしておいてくれる。おかげで <code>&lt;script&gt;</code> ハックにみられる問題がおきない。
そしてテンプレートの HTML はページ本体の DOM とは切り離されており副作用がない。
たとえば <code>&lt;img&gt;</code> や <code>&lt;video&gt;</code> を書いてもロードはおこらないし、<code>&lt;style&gt;</code> は適用されず <code>&lt;script&gt;</code> は実行されない。
HTML Templates の助けがあれば、クライアントサイドのテンプレートエンジンをもっとうまく作れる。</p>

<p><strong><a href="http://www.w3.org/TR/2013/WD-shadow-dom-20130514/">Shadow DOM</a></strong> はちょっとややこしい。
ある DOM 要素のレンダリング結果を、その要素が持つ DOM のサブツリーとは独立に与える仕組み。
見た目を定義するという意味で CSS に似てるけど, 見た目の定義に DOM 自体を使う。まあ野次馬目的には理解しなくても平気です。
興味があるひとは <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">チュートリアル</a> でも眺めてみてください。</p>

<p>Custom Elements, HTML Imports, HTML Templates, Shadow DOM. これを組み合わせると、
DOM とシームレスにつながる UI 部品「コンポーネント」を作れる。だからあわせて Web Components と呼ぶ。</p>

<h2>Model Driven View</h2>

<p>Polymer にとって Web Components と並び重要なコンセプトが <strong><a href="http://www.polymer-project.org/platform/mdv.html">Model Driven View</a></strong>、略して <strong>MDV</strong>。
世間では似たような仕組みをよく Data binding と呼んでいる。データ(モデル)を書き換えると自動的に表示(ビュー)が更新され、
更新された UI を操作すると結果がモデルに書き戻されるされる、みたいな仕組み。</p>

<p>MDV 自体は(今のところ)ウェブ標準ではなく単なる JS のライブラリだけれど、それを実現するためのパーツは標準になっている/なりつつある。
まずモデル(JavaScdript オブジェクト)の変更を捉えるための <strong><a href="http://wiki.ecmascript.org/doku.php?id=harmony:observe">Object.observe</a></strong> というJavaScript API がある。
Objective-C の <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">KVO</a> みたいなもんだとおもえば大体あってるはず。
逆にビューの変更を見張るには <strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">Mutation Observer</a></strong> を使う。
これは悪名高き DOM の <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Events/Mutation_events">Mutation Event</a> をマシにしたもの。
DOM ツリーの変更をコールバックで監視できる。</p>

<p>MDV ではこうしたフックを使い、ビューとモデルの変更を相互に反映しあう。
記法は馴染みのある二重ヒゲカッコを使う.</p>

<p>&#8230;馴染みがありすぎて Octopress の markdown にコピペできませんでした&#8230;現物は<a href="http://www.polymer-project.org/platform/mdv.html">リンク先</a>をみてください。</p>

<h2>Pointer Events, Web Animations</h2>

<p>Web Components と MDV は UI をつくるための枠組みだと言える。
キュンキュン動く UI をつくるためにはもう少し足りないものがある。
<strong><a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a></strong> と <strong><a href="https://dvcs.w3.org/hg/FXTF/raw-file/default/web-anim/index.html">Web Animations</a></strong> がその不足を補う。</p>

<p><strong><a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a></strong> はタッチとマウスを一つのプログラミングモデルで扱うための提案。
マウスをサポートしている点、リバースエンジニアリングでなくオリジナル書きおろしなところが <a href="http://www.w3.org/TR/touch-events/">Touch Event</a> と違う。
<strong><a href="https://dvcs.w3.org/hg/FXTF/raw-file/default/web-anim/index.html">Web Animations</a></strong> は CSS Animations と CSS Transitions と SVG Animations を
統合してクールな API にしようという、野心的な標準。</p>

<p>いまどきタッチ UI やアニメーションがしょぼいのは論外&#8230;
なんて話をターミナル内の Emacs で書いていると悲しい気持ちになりますね&#8230;</p>

<h2>Polyfilled Standards - platform.js</h2>

<p>こんな新しい API に依存してしまい、一体どのブラウザなら動くのか。そう不安になるかもしれない。
この不安というか現実的な懸念に応えるため、Polymer は <strong><a href="https://github.com/Polymer/platform">platform.js</a></strong> という Polyfill ライブラリを用意している。
platform.js は該当 API を JavaScript で <strong>再実装(=Polyfill)</strong> し、ブラウザにまだない機能を補ってくれる。
あくまで代替品のためネイティブほど速くないしところどころボロがでる。でもわかって使えば悪くない出来ではあるらしい。
Shadow DOM や Web Animations なんかは傍目から見ると polyfill できそうにないけれど、そのへんは JS ニンジャ技巧でなんとかしているようす。</p>

<p>platform.js はそれ単体でも使える。
だから新しい標準 API には興味があるけど Polymer のフレームワークを使いたくない人は platform.js だけ持って行っても良い。</p>

<h2>Kernel, Elements and Applications</h2>

<p>さてここからが本題。Polymer のフレームワークは、 platform.js によって polyfill された新しいブラウザ API の上に作られている。
フレームワークはまず、これらの API 群をうまく一つの枠組みで使うための中核的な API <strong><a href="https://github.com/Polymer/polymer">polymer.js</a></strong> を定義している。
Facade みたいなものだと思えばいい。polymer.js は Kernel とも呼ばれる。</p>

<p>そして色々な UI 部品そのほかはこのカーネルの上に実装されている。
個々の部品(Element) の実装は <strong><a href="https://github.com/Polymer/polymer-elements">polymer-elements</a></strong> や
<strong><a href="https://github.com/Polymer/polymer-ui-elements">polymer-ui-elements</a></strong> といったサブプロジェクトに含まれている。</p>

<p>Polymer の UI 部品にはサイドバーなんかもあり、まあまあ今風でかっこいい。
検索会社製スマホアプリの雰囲気にちょっと似ている。
コードにはサンプルアプリも入っており、動かしてみると雰囲気がわかる:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="o">--</span><span class="nx">recursive</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/Polymer/polymer-all.git</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">polymer</span><span class="o">-</span><span class="nx">all</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">python</span> <span class="o">-</span><span class="nx">m</span> <span class="nx">SimpleHTTPServer</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうしてホストしたファイルから <code>http://localhost:8000/projects/pica/index.html</code> を開けば &#8220;Pica&#8221; というニュースリーダーっぽいデモが動く。</p>

<p><img src="https://lh4.googleusercontent.com/-kfzeoWAhX1c/UZjBI4ymhWI/AAAAAAAAYv8/g2JQd0DVWXM/w916-h515-no/20130519pica.png" alt="pica" /></p>

<h2>Polymer の身の上</h2>

<p>大雑把な紹介はこんなところにしておこう。
私のようなレガシー C++ プログラマがヒャッホイ便利だぜーみたいな話を書いてもまったく説得力がなさそうだから、
ヒャッホイしたい人は <a href="http://www.polymer-project.org/getting-started.html">Getting Started</a> でも読んでください。</p>

<p>かわりに Polymer や Web Components がどんな問題意識に基づいているのか、私の理解を説明してみたい。
なぜわざわざ新しいフレームワークを作ろうとする事情を、少しは納得できるかもしれない。</p>

<h3>Web Components - UIView</h3>

<p>さて、話は Web Components からはじまる。</p>

<p>ブラウザの API (DOM) は、もともとアプリケーションの UI を作るためのものではない。
そのせいで JavaScript プログラマは苦労してきた。その苦労をなんとかしたい、ブラウザにまともな UI 開発の API を持たせたい&#8230;
そんな願いを叶えるために Web Components が生まれた。</p>

<p>JavaScript プログラマはずっとこの問題に取り組んできたのだけれど、
ブラウザに GUI 開発の基盤がないせいでみなが別々に必要な足場を再発明する羽目になり、
結果として混ぜるな危険のフレームワークが乱立した。ライブラリ同士を混ぜられないせいで、
いくら GUI ツールキットが現れても互いに生態系を作ることができなかった。</p>

<p>足場のある世界を見ると、たとえば iOS なら UIView, あんどろなら View や Activity という拡張可能な UI の単位を持っているのがわかる。
サードパーティはこの単位を足がかりに再利用可能な UI 部品を作ることができる。</p>

<p>ブラウザは DOM が UIView みたいなものだけれど、あいにく後から拡張できない。Web Components はその DOM を拡張可能にする。
そういう意味で、 Web Components は <strong>ウェブの UIView</strong> を目指しているとも言える。
Web Components で作られた GUI 部品は混ぜることができる。非互換の砂漠をライブラリの茂る緑に変えたい、
Web Components にはそんな願いがある。</p>

<p>UIView の比喩を続けるなら、 MDV は KVO を、 Web Animations は Core Animation を目指していると言えなくもない。
これは Objective-C スタックをぱくりたいわけではなく、GUI のプラットホームには最低限必要な機能があるということ。
だから iOS でなくあんどろや .NET の語彙でも対応関係を説明できるとおもう。</p>

<p>HTML や XML のようなマークアップを発展させ拡張可能な UI を作る技術は、
WPF から Flex まで星の数ほどある。中でも Web Components は <a href="http://www.w3.org/TR/xbl/">XBL</a> という技術を先祖にもっている。
10 年以上前、Mozilla が XUL のお供に作った XML ミタメ定義言語(のようなもの)が XBL だ。
ただ XBL は多機能すぎ、また XML に傾倒しすぎていた。
そこで XBL を簡素化し、10 年来のウェブの変化や JavaScript の隆盛を踏まえ
今風に再発明したものが Web Components である。
API は新しく仕切りなおされたため、先祖の面影を伺うことはほとんどできない。
でも Web Components 関連標準の謝辞は XBL を参照しているし、Shadow DOM のコンセプトも XBL に由来する。</p>

<h3>Polymer - UIKit</h3>

<p>話がそれた。</p>

<p>そんなかんじで数年前から Web Components の開発が始まった。
ただ実際に作ってみると案外むずかしい。API の良し悪しを判断する材料がなく、どんな機能が必要かの見通しも悪い。
いってみれば Web Components はフレームワーク作者のためのメタ・フレームワーク。
これほど抽象的なものを具体例なしに開発するのは無理がある。
利用者たるウェブのエンジニアからみても、 Web Components を使ってくださいと言われたところで
抽象的すぎてピンとこない。具体的に使えるモノや指針がほしい。</p>

<p>一方その頃、ブラウザでモバイル向けのアプリケーションを書くのはしんどすぎるという懸念が
ブラウザやウェブ開発の未来を暗く覆っていた。
理由は色々あれど、その一つに開発ツールやフレームワークが乱立するなか
「よいアプリケーションをつくるための定番」の不在が指摘されていた。
これで作ればとさくっとできますよ、といえるツールキットが欲しい。</p>

<p>そのために何ができるか、いっそ定番になれるツールキットを作ればいい？
そう考えた勤務先の一部モバイルウェブ好きは、
ブラウザの連中が作っている Web Components に目をつけた。
これを使って書けば単なる再発明よりマシになりそうだし、
変なワークアラウンドも少なくて済む。それよさそうじゃね？
Web Components にとっても dogfood をしてくれる具体的なプロジェクトは渡りに船だ。
実際のユースケースからフィードバックを受けられる。</p>

<p>&#8230;てなかんじで話が進んで(だいぶ想像で補ってますが結論はだいたいあってるはず) Polymer がうまれ、
Web Components の開発者たちもそれを後押しすることになった。
Polymer のコンポーネントは responsive に作られていて、モバイルとデスクトップの両方で動く。</p>

<p>標準技術である Web Components と違い、Polymer は意見を持ったフレームワークだ。
Polymer には通底するデザイン言語がある。そのしきたりに合わせて UI 部品を揃えようとしている。
Polymer の流儀にならってアプリケーションをつくれば簡単に一貫性のある UI ができる、
そんなフレームワーク、ツールキットになろうとしている。
Web Components が UIView だとしたら、Polymer は <strong>Web Components の枠組みで作られた UIKit 相当</strong> だと言えるかも知れない。
まあ UIView と UIKit みたいに一体化してるわけじゃないから、やや大げさ過ぎではある。</p>

<h2>未来をつくる</h2>

<p><img src="https://lh3.googleusercontent.com/-er5XAl8-KJs/UZlj1FHNwwI/AAAAAAAAYxM/QW53jfoySYs/w745-h559-no/P1090585.JPG" alt="screen" /></p>

<p>Polymer は始まったばかりの若いプロジェクトだ。まだ実戦に使えるかんじじゃない。
フレームワーク自体も流動的だし、アセットパイプラインもない。
ブラウザ API の実装も揃っていないし、既にある実装もずっと速くする必要がある。
すぐに使うフレームワークを探しているなら
<a href="http://angularjs.org/">Angular.js</a> みたいに完成されているものを使う方がいい。</p>

<p>どちらかというと、Polymer は Web Components やその仲間たちと共にウェブ開発の未来を定義しようとしている。
ウェブアプリケーションのフロントエンドはこうやって作るものだ。
ツールキットを通じて、そんな意見を示そうとしている。</p>

<p>まだ荒削りなものを公開したのは、
コミュニティと一緒にプロジェクトを育てていこうとしているのだとおもう。
一方的にポイっと公開されたフレームワークなんて誰も使わないだろうから。
コードもふつうに <a href="http://github.com/Polymer/">Github</a> にあり、
<a href="https://github.com/polymer/polymer/blob/master/CONTRIBUTING.md">pull request 歓迎</a>らしい。
<a href="https://groups.google.com/forum/?fromgroups=#!forum/polymer-dev">メーリングリスト</a>もある。</p>

<p>とはいえ未来がいつまでも未来のままでは困る。これをさっさと現実にするのが開発者の仕事。
私は今の会社に入って以来、バグとり以外の時間はだいたい Web Components の実装を手伝っているんだけれど、
ぶっちゃけフレームワークよりブラウザ API の実装が遅れがちなので申し訳なくおもいつつ日々働いております&#8230;
けっこう奥のほうをガチャガチャ書き換えないといけなくて大変なのよね。
Blink になってからは比較的遠慮なくガチャガチャできるようになったので心労は減ったけれども。</p>

<h2>今をなおす</h2>

<p>始まったばかりとはいえ Polymer プロジェクトの影響は大きい。
その影響で Web Components は仕様も実装も大きく磨きがかかった。</p>

<p>たとえばあるとき Polymer の polyfill をネイティブ実装に切り替えて
デモアプリを動かしたところ表示が乱れ、更にはブラウザがクラッシュした。
ページロードが異常に遅いなんて問題もみつかった。
実際のアプリケーションを通じて初めてみつかるエッジケースの数々を Polymer は暴きだし、
私や近隣の同僚は慌ててそれを直した。Polymer の実装が進むたびにそんなバグがやってくる。私達はそれを直す。</p>

<p>また標準で定義された API の不備不足も沢山みつかり、W3C のメーリングリストやバグトラッカーを賑わしている。
頑張って定義した複雑な挙動があっさりダメだしされたり、逆に必要だと思っていた API が実は全然いらなかったり。
実際のユースケースを元にした苦情だけに説得力がある。</p>

<p>ブラウザのダメさを回避するのではなくブラウザを直す。仕様も直す。
ここに従来のフレームワークと Polymer の違いを見ることができる。</p>

<h2>The New Gang of Four</h2>

<p><img src="http://farm4.staticflickr.com/3297/3242771529_f4dd5a2c7e_b.jpg" alt="gangoffour" /></p>

<p>Polymer に限らず、ウェブアプリケーションの書き手が標準策定に強く関与する流れが W3C に広まっている。</p>

<p>この新しい動きを象徴する出来事が、少し前に開かれた <a href="http://www.w3.org/2001/tag/">W3C Technical Architecture Group</a> の選挙で起きた。
JavaScript 界隈の開発者やその一味が新しい TAG のメンバーとして選出されたのだ。
XML 時代を経て歪んでしまったウェブ標準のデザインをアプリ世代のウェブにふさわしく描き直そうと、彼らは息巻いている。</p>

<p>どういう面子が選ばれたのか、野次馬のためにちょっと紹介してみよう。
まずは我らが <strong><a href="http://yehudakatz.com/2012/12/07/im-running-to-reform-the-w3cs-tag/">Yehuda Katz</a></strong> -
Rails, jQuery のコミッタで、最近は <a href="http://emberjs.com/">Ember.js</a> をやっている。
次が <strong><a href="http://infrequently.org/2012/12/reforming-the-w3c-tag/">Alex Russel</a></strong> -
<a href="http://dojotoolkit.org/">Dojo Toolkit</a> を作ったあと、最近は Chromium 関係で色々やっている。
Web Components やるぞオラーとか言い出したのもこのひとだった気がする。
<strong><a href="http://annevankesteren.nl/">Anne van Kesteren</a></strong> はちょっと前まで Opera にいて最近 Mozilla に移ったウェブアプリ寄りの標準書き。
DOM にも詳しい。<strong><a href="http://marcosc.com/2012/12/w3c-tag-elections/">Marcos Cáceres</a></strong> も Opera から Mozilla に行ったエンジニアだそうな。
Opera はもともと HTML5 を始めたくらいだから、実利的ウェブ標準に関して意見のある人が多かったのかも。
Mozilla は昔からウェブアプリを推している。</p>

<p>この四人、<a href="http://briankardell.wordpress.com/2012/12/07/the-new-gang-of-four/">The New Gang Of Four</a> と
呼ぶ人がいるくらいには活躍が期待されている。
XML 時代にセマンティック宇宙飛行へ旅立ってしまった W3C と、アンチテーゼとして登場した HTML5。
宇宙飛行向けに盛り過ぎた本体に取り急ぎ必要な API を継ぎ接ぎしてカオスになった Web のアーキテクチャを正し、
アプリケーションプラットホームとしてスケールできるよう立て直していく。
そういう大きな流れの中に Web Components や仲間たちを位置づけると、
今のウェブが&#8230;すくなくとも Gang Of Four とその支持者たちが&#8230;目指しているところも少しは腑に落ちやすくなるかもしれない。</p>

<h2>標準の温度</h2>

<p>Polymer の依拠する未来の API たち、実装の見込みはどうなのだろう。
ブラウザ開発元の態度は個々の API ごとに温度差がある。</p>

<p>Web Components はもともとも Chromium の人が言い出したものではあるものの、最近はそれなりに受け入れられつつある。
たとえば Mozilla は Web Components の中でも Custom Elements に重きをおいており、既に一部を実装している。
そして実装した API を使うべく <a href="http://www.x-tags.org/">X-Tag</a> というフレームワークを開発している。
<a href="https://hacks.mozilla.org/2013/05/speed-up-app-development-with-x-tag-and-web-components/">Mozilla Hacks の blog</a> に簡単な紹介があった。
X-Tag の開発者は Polymer や W3C にある関連メーリングリストの常連で、よく Polymer チームと意見交換をしている。
Polymer のツリーにも X-Tag との相互運用デモが入っている。</p>

<p><a href="http://www.quackit.com/html/templates/">HTML Templates</a> のエディタには Microsoft の人が参加している。
そして <a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a> に至っては仕様のみならず
<a href="https://groups.google.com/a/chromium.org/d/msg/blink-dev/K1qk6qZWgIc/4PxUvSibPTsJ">Blink の実装まで</a> Microsoft の手による。
私も便乗で半年くらいシアトル出張して IE に Custom Elements 実装したいなあ行くなら 8-9 月あたり希望です微塵も呼ばれてませんが&#8230;</p>

<p>MutationObserver は既に Firefox と Chromium の両方で動いている。
<a href="https://dvcs.w3.org/hg/FXTF/raw-file/default/web-anim/index.html">Web Animations</a> は Chromium, Mozilla, Adobe が共同策定している。</p>

<p>議論が決着していない仕様もあるし、全体的に慎重な開発元もある。全てが順調というわけではない。
ただウェブアプリの生産性をなんとかしたい点にはみな概ね同意しているから、
人々が polyfill を通じて支持を示せば実装も広がってゆくだろうと私は楽観している。
未来は明るくしとかないとね。</p>

<h2>まとめ</h2>

<p>Polymer と Web Components についてやじうま向けに説明してみました:</p>

<ul>
<li>Polymer は新しいブラウザの API を前提にあるべきウェブ開発の姿を示す試み。</li>
<li>ブラウザの実装がもたもたしてる(ごめんなさい)分は polyfill でカバー。</li>
<li>Polymer と Web Components は互いに励まし合うズッ友。</li>
<li>Polymer 周辺の標準はウェブのデザインを時代に引き寄せたいギャングの仕業。</li>
<li>当方クラッシュ直し以外の仕事も少しはやっております。</li>
</ul>


<p>写真:</p>

<ul>
<li><a href="http://goo.gl/a3I0a">http://goo.gl/a3I0a</a></li>
<li><a href="http://www.flickr.com/photos/dineshobareja/3242771529/">http://www.flickr.com/photos/dineshobareja/3242771529/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近のおっさんたち]]></title>
    <link href="http://steps.dodgson.org/b/2013/04/24/recent-happenings-on-elders/"/>
    <updated>2013-04-24T00:16:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2013/04/24/recent-happenings-on-elders/</id>
    <content type="html"><![CDATA[<p><img src="http://farm1.staticflickr.com/156/423039025_c386b9db38_o.jpg" alt="ossan" /></p>

<p><a href="http://gisted.in/">Gisted</a> のドッグフードをかねて InfoQ のインタビューやプレゼンを見るようになった。
いくつか面白かったのを紹介したい・・・とおもってるうちにバックログを溜めすぎた。一度に紹介するのは諦めて何度かにわけよう。
今日はおっさん、具体的には ThoughtWorks 周辺の面々を追いかけてみます。InfoQ 中心だけどそれ以外も若干あり。</p>

<h2><a href="http://www.infoq.com/presentations/keynote-geeks">When Geek Leaks</a></h2>

<p><a href="http://www.amazon.co.jp/Presentation-Patterns-Techniques-Crafting-Presentations/dp/0321820800%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321820800"><img class="asin" src="http://ecx.images-amazon.com/images/I/41NBeZt7UkL.jpg" title="Presentation Patterns: Techniques for Crafting Better Presentations" /></a></p>

<p>&#8220;<a href="http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%94%9F%E7%94%A3%E6%80%A7%E5%90%91%E4%B8%8A%E8%A1%93-THEORY-IN-PRACTICE/dp/4873114020%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114020">プロダクティブ・プログラマ </a>&#8221; の著者 <a href="http://nealford.com/">Neal Ford</a> が
あるキーノートにつけたタイトルは &#8221;<a href="http://www.infoq.com/presentations/keynote-geeks">When Geek Leaks</a>&#8220;。
ここでの Leak は前向きだ。Geek の情熱がその主たる関心の外にも影響を与えていくといいですね、という話。</p>

<p>ファインマンが物理学という専門以外で発揮した数々のいたずら心、
&#8221;<a href="http://www.forbes.com/sites/techonomy/2011/11/30/now-every-company-is-a-software-company/">Now Every Company Is A Software Company</a>&#8221; という Forbes の煽り記事、
継続的デリバリ、そして自著 &#8221;<a href="http://www.amazon.co.jp/Presentation-Patterns-Techniques-Crafting-Presentations/dp/0321820800%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321820800">Presentation Patterns </a>&#8221; を引き合いにだし、
Neal Ford はギークやプログラマが近隣領域に与える影響について語る。継続的デリバリの話はだいぶ今更感だけれど、
Presentation Pattern はちょっと面白そう。プレゼンがどうプログラミングと関係するのか。要するにデザパタインスパイヤだということらしい。
プレゼンのアンチパターンも紹介している。それにしてもファインマンをギークの代表格にもってくるとは渋い。そして強気だ。</p>

<h4>DevOps と Jesse Robbins</h4>

<p>InfoQ には継続的デリバリの親戚 DevOps の話がけっこうある。継続デリバリよりそっちの方が今風で面白い。
中でも Chef の開発元 <a href="http://www.opscode.com/">Opscode</a> のエライ人
Jesse Robbins の <a href="http://www.infoq.com/interviews/Awesome-DevOps-Jesse-Robbins">インタビュー</a> と <a href="http://www.infoq.com/presentations/Hacking-Culture">講演</a> はよかった。
あふれるカリスマっぽさ。DevOps とは無縁のレガシー開発者な私ですら「インフラストラクチャーをコードしてまうで！」と盛り上がり、
余暇コードも Fabric をやめて Chef Solo に乗り換えようか心が揺れた。サーバ一台しかないけど・・・。
あと Jesse Robbins がもともと Amazon に在籍していたのを私はこのインタビューではじめて知った。
<a href="http://aws.amazon.com/opsworks/">Opsworks</a> が Chef なのも開発者を知っているが故の信頼関係が支えの一部になったのかもしれないと腑に落ちたのだった。
どっちもシアトルにあるしね。</p>

<p>Jessie Robbins ファンになったら <a href="http://queue.acm.org/detail.cfm?id=2371297">ACM Queue での対談</a> も読んでみるとよい。
大規模システムでいかに障害にそなえるかが議論されている。</p>

<h4>デザインパターン</h4>

<p>脇道ついでデザパタ関係の読み物をひとつ。
&#8221;<a href="http://www.informit.com/articles/article.aspx?p=1404056">Design Patterns 15 Years Later</a>&#8221; というインタビュー書き起こしが面白かった。これは InformIT。
GoF のうち 3 人に話を聞いている。今からデザインパターンを直すとしたらどうする、なんて話も面白いけれど、
個人的に印象的だったのは <em>デザインパターンはフレームワーク設計者のものになりつつある</em> というくだり。
即効性のある知識から教養にシフトしたと言ってもいい。15 年の歳月にため息。
まあ専門知識ってのはなくても困らないけどあったら案外使えるから知ってて損はないよね・・・と自分を慰めた。</p>

<p><a href="http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF-%E3%82%AC%E3%83%B3%E3%83%9E/dp/4797311126%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797311126"><img class="asin" src="http://ecx.images-amazon.com/images/I/418CWTjHAFL.jpg" title="オブジェクト指向における再利用のためのデザインパターン" /></a></p>

<p>デザインパターンといえば、InfoQ に &#8221;<a href="http://www.infoq.com/presentations/Functional-Design-Patterns">Functional Design Patterns</a>&#8221; という講演があった。
関数型言語によくみられるパターンをいくつか紹介している。
話の冒頭で「先にいっておくと、<em>いちいちそれモナドじゃんと言うのはうざいからやめろ</em>。こっちはわかってやってんだ！」みたいに釘をさしてるのが面白かった。
デザインパターンより Haskell を勉強しないといかん・・・過去三回ぐらい挫折してるけど・・・。
書籍 &#8221;<a href="http://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure">Functional Programming Patterns in Scala and Clojure</a>&#8221; は無関係のもよう。</p>

<h2><a href="http://www.youtube.com/watch?v=8kotnF6hfd8">Software Design in the 21st Century</a></h2>

<p><a href="http://www.amazon.co.jp/NoSQL-Distilled-Emerging-Polyglot-Persistence/dp/0321826620%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321826620"><img class="asin" src="http://ecx.images-amazon.com/images/I/51qQMwJaFsL.jpg" title="NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence" /></a></p>

<p>Martin Fowler による講演 &#8221;<a href="http://www.youtube.com/watch?v=8kotnF6hfd8">Software Design in the 21st Century</a>&#8221; は三部構成。</p>

<p>最初の二つは Schemaless と (弱い)Consistency の話。
おおむね Fowler の書いた &#8221;<a href="http://www.amazon.co.jp/NoSQL-Distilled-Emerging-Polyglot-Persistence/dp/0321826620%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321826620">NoSQL Distilled </a>&#8221; にある内容だった。
まあ本の方がわかりやすい。 Martin Fowler の発音は私からするとだいぶ聞き取りづらい上に話がざっくりすぎる。</p>

<p>この本自体はよい。個々のデータベースの詳細に踏み込むのではなく NoSQL (主に MongoDB みたいな document database) 上でどうコードをデザインすべきかを
うまく説明しており、個人的には学ぶことが多かった。特に <a href="http://martinfowler.com/bliki/ApplicationDatabase.html">Application Database</a> や
<a href="http://martinfowler.com/bliki/IncrementalMigration.html">Incremental Migration</a> というコンセプトをきちんと名付けたのはえらい。薄いのもいい。
でも改めて眺めると martinfowler.com の <a href="http://martinfowler.com/tags/database.html">database タグ</a> にある記事をひと通り読めばそれでよさそう。</p>

<p>そういえば Non-relational なデータのスキーマ(レス)をどう扱うかについては <a href="http://www.infoq.com/presentations/Twitter-Analytics">Twitter Analytics に関する講演</a>
も Big Data! というかんじでで面白かった。同じ領域の話ではないし、役立つ指数はひくいけどね。</p>

<p>３つ目のテーマは &#8220;The Value of Software Design&#8221; と銘打って技術的負債の話。
良いソフトウェアデザインの価値はどこにあるのか。<a href="http://blog.8thlight.com/uncle-bob/archive.html">Uncle Bob</a> は「それはモラルの問題だ!」と
切って捨てるけど説得力ないよね - そう問題提起しつつ Uncle Bob のモノマネをする Martin Folwer。(しらない人がみると Steve Ballmer のモノマネにみえる。)
設計が悪いとやがて機能追加がしんどくなる。だから長期的には良い設計を保ったほうがいい。そう説明しようと謳いつつ、
その主張に <a href="http://martinfowler.com/bliki/DesignStaminaHypothesis.html">Design Stamina Hypothesis</a> と名前をつけてみせる。
良い設計が割に合う「長期的」のスパンは数ヶ月ではなく数週間だと Martin Fowler はいう。</p>

<p>次に技術的負債にどんな種類があるのかを分類する。
腕の善し悪し、そして意識的か無意識か。この二つの軸で <a href="http://martinfowler.com/bliki/TechnicalDebtQuadrant.html">４つの象限を定義してみせる</a>。
「腕が悪く無意識な」負債は良いコードの書き方を知らないゴミコード。「腕が悪く自覚的な」負債は「デザインとか時間の無駄」というやつ。
「腕がよく自覚的な」負債は従来の定義にある「今は出荷優先、でもあとで直す」もの。
そして「腕が良くて無意識な」負債の存在を指さし、これは何かと問う。
それは <em>振り返ってようやく良いデザインに気づく</em> こと。避けがたい学びの結果なのだ。
Fowler はそう講演を締めくくった。まあリファクタリングしろってことなんでしょうね。</p>

<p>この人の話は一見ありきたりだけれど、アイデアを整理してうまい名前をつけているのがえらい。</p>

<p><a href="http://www.amazon.co.jp/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E2%80%95%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E4%BD%93%E8%B3%AA%E6%94%B9%E5%96%84%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Object-Technology-Series-%E3%83%95%E3%82%A1%E3%82%A6%E3%83%A9%E3%83%BC/dp/4894712288%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4894712288"><img class="asin" src="http://ecx.images-amazon.com/images/I/51885S48YPL.jpg" title="リファクタリング―プログラムの体質改善テクニック (Object Technology Series)" /></a></p>

<h2><a href="http://blog.8thlight.com/uncle-bob/2013/03/05/TheStartUpTrap.html">The Start-Up Trap</a></h2>

<p><a href="http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%A5%A5%E7%BE%A9-%E7%AC%AC2%E7%89%88-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E9%96%8B%E7%99%BA%E3%81%AE%E7%A5%9E%E9%AB%84%E3%81%A8%E5%8C%A0%E3%81%AE%E6%8A%80-%E3%83%AD%E3%83%90%E3%83%BC%E3%83%88%E3%83%BBC%E3%83%BB%E3%83%9E%E3%83%BC%E3%83%81%E3%83%B3/dp/4797347783%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797347783"><img class="asin" src="http://ecx.images-amazon.com/images/I/51-dAD2L2gL.jpg" title="アジャイルソフトウェア開発の奥義 第2版 オブジェクト指向開発の神髄と匠の技" /></a></p>

<p>Martin Fowler のモノマネがあまりにひどかったので Uncle Bob の近況が気になってしまい <a href="http://blog.8thlight.com/uncle-bob/archive.html">Blog</a> を眺めてみた。
すると少し前に &#8221;<a href="http://blog.8thlight.com/uncle-bob/2013/03/05/TheStartUpTrap.html">The Start-Up Trap</a>&#8221; という記事を書き炎上させている。
<a href="https://news.ycombinator.com/item?id=5325491">Hacker News</a> をみるとコメント数が 144。
<a href="https://news.ycombinator.com/item?id=5489025">Blink のアナウンスが 325 コメント</a>だからわるくないヒートアップだ。</p>

<p>記事の内容は要するに「スタートアップのやつらはなんだかんだと理由をつけて TDD をしない。そのせいで失敗しておりまったく嘆かわしい」というもの。
Martin Fowler のモノマネが脳裏をよぎる。だいたいあってるな・・・。</p>

<p>Uncle Bob はフォローアップ記事をふたつ書いている。
ひとつめの追伸 &#8221;<a href="http://blog.8thlight.com/uncle-bob/2013/03/06/ThePragmaticsOfTDD.html">The Pragmatics of TDD</a>&#8221; では、
別に全部のコードをテストしろとは言わないよ俺も GUI のテストは書かないよ、という話をする。
続く &#8221;<a href="http://blog.8thlight.com/uncle-bob/2013/03/11/TheFrenziedPanicOfRushing.html">The Frenzied Panic of Rushing</a>&#8221; は、
テストを書くと開発速度が落ちるって言うけどそんなことないよと訴える。なんて既視感あふれる展開・・・。</p>

<p>若者に噛み付かれるとは、TDD も今や権威になったのだとため息がでる。
HN のコメント欄を眺めた私の個人的な見立てでは、
この炎上の根にあるのは内容への異議よりむしろ Uncle Bob や TDD というおっさん/権威に対する反発ではなかろうか。</p>

<p>芸風があるとはいえ、Uncle Bob のフォローアップは挑発的だ。
件の &#8221;<a href="http://blog.8thlight.com/uncle-bob/2013/03/11/TheFrenziedPanicOfRushing.html">The Frenzied Panic of Rushing</a>&#8221; の中で、
Uncle Bob は TDD の威力を示すこんなエピソードを紹介する:
会社の同僚達とカンファレンスに参加し、面白いアルゴリズムの話を聞いた帰り道のこと。
ヒコーキの出発をまつ空港のロビー、同僚の若者たちはそのアルゴリズムを実装しようと画面に向かっていた。
それを見たおっさん Bob と James は、ジンを一杯ひっかけつつペアプロをはじめる。
しばらくのち、アルゴリズムが動きだして乾杯する二人。若者たちに目をやるとまだ四苦八苦している。
年寄りだって若者に勝てるんだぜ。<em>そう、TDD ならね！</em></p>

<p>・・・ってうぜえーーーーー！これを読んで説得されるスタートアッププログラマがいるとはまったく思えん。
そういえば &#8221;<a href="http://www.amazon.co.jp/Clean-Code-%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%81%94%E4%BA%BA%E3%81%AE%E6%8A%80-Robert-Martin/dp/4048676881%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4048676881">Clean Code </a>&#8221; と &#8221;<a href="http://www.amazon.co.jp/Clean-Coder-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%B8%E3%81%AE%E9%81%93-Robert-Martin/dp/4048860690%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4048860690">Clean Coder </a>&#8221; を読んでないな。
もうちょっと説得力ある議論が載ってるんだろうか・・・。</p>

<p>TDD やアジャイルが脚光を浴びた 10 年前、それはウォーターフォールや RUP などの権威に挑む若者たちのアナーキズムでもあった。
時が流れ、かつて重量プロセスが担っていたメインストリームの位置にアジャイルがいる。
<a href="http://business.nikkeibp.co.jp/article/NBD/20120329/230368/">Yahoo! Japan の CEO がアジャイルを口にする</a>時代。
スタートアップをはじめてしまう血気盛んな人々がスタイルとしてアンチアジャイルになる気持ちもちょっとわかる。
私や同世代のおっさんが「設計レビューするからドキュメント出してよ」と言われたとき脊髄に走った F ワードの血潮と同じものが、
「TDD しろよ」と言われた若者の体を駆け抜けるのではないか。
私達が「おまえに漸近的設計のなにがわかる！？」と口走りたくなるように、
Uncle Bob に苛立つ人々は「おまえにリーンでモバイルなピボットの何がわかる！？」
とかなんとか言いたいんじゃないですかね。（セリフは捏造です。）</p>

<p>XP みたいな個別のプロセスについては割と早くから権威化への反発が見られたけど、
TDD はそこそこ粘っていた気がする。それも今は昔なのだろう。
リーンや DevOps みたいな比較的新しい動きもアジャイルの発展形なんだから、
旧友たる TDD もスタートアップ文化にまぜてあげれば良いのに。おっさんとしては同情を禁じ得ない。
でも自分たちと同じ痛みをわかちあっている仲間か否か、読み手は嗅ぎ分けるんだね。</p>

<h2><a href="http://www.infoq.com/presentations/Technical-Debt-Process-Culture">Technical Debt, Process and Culture</a></h2>

<p><a href="http://www.amazon.co.jp/Making-Software-%E2%80%95%E3%82%A8%E3%83%93%E3%83%87%E3%83%B3%E3%82%B9%E3%81%8C%E5%A4%89%E3%81%88%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-Andy-Oram/dp/4873115116%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115116"><img class="asin" src="http://ecx.images-amazon.com/images/I/51tPZ55U1%2BL.jpg" title="Making Software ―エビデンスが変えるソフトウェア開発" /></a></p>

<p>Uncle Bob がいまいち支持されないのは、彼がコンサルタントだからという面もあるだろう。
現実はさておきスタートアップのナラティブにおいてコンサル業は日銭を稼ぐ必要悪とされている。
だからポール・グラハムから出資を受けサンフランシスコでスマホアプリやメガネアプリを作りつつ何か言うくらいでないと
スタートアップ従事者には響かないのではないか。響かなくていい気もするけど。</p>

<p>ところでアジャイル世代のおっさんは多くがコンサル業を勤めていた。
でもこのスタートアップブームのご時世、もうちょっと西海岸ぽい仕事をしている人はいないのか。
と眺めていると、我らがレガシーコードの王 <a href="https://twitter.com/mfeathers">Michael Feathers</a> が Groupon に勤めていた。
おお西海岸！そしてすげーレガシーコードありそう！（※偏見です。）</p>

<p>Michael Feathers 御大、実際のところ別に倒すべきレガシーコードを求めて Groupon に入ったわけではなく、
勤めていた Rails コンサル会社が買収された結果として入社したようす。
ちょっとがっかり・・・最近退職し、今はフリーのコンサルタントをしているようだ。
(<a href="http://skillsmatter.com/expert-profile/agile-testing/michael-feathers">比較的あたらしいプロフィール情報</a>。)</p>

<p>その Groupon 時代に行われた講演がいくつか InfoQ に公開されている。
中でも &#8221;<a href="http://www.infoq.com/presentations/Technical-Debt-Process-Culture">Technical Debt, Process and Culture</a>&#8221; は面白かった。</p>

<p>技術的負債とは何なのか。この比喩を<a href="http://c2.com/doc/oopsla92.html">使いはじめた</a> Ward Cunningham は、
一時的に品質を犠牲にして開発速度を稼ぐ決断をこう呼んでいた。
ところが昨今、技術的負債という言葉はより広い意味で使われている。
具体的には、技術的負債を <em>止めることのできないソフトウェアの膨張や慣性がもたらす影響</em>
(The Effect of Unavoidable Growth and the Remnants of Inertia) だとする考えが広まりつつある -
講演はそんな風に始まる。そういえばエントロピーなんてメタファを使うこともあるよね。</p>

<p>さて、この慣性はどこから来るのか。Feathers はコンウェイの法則にひとつの原因を見出している。
組織のありかたがソフトウェアに与える影響はとても大きい。コンパイラのパスの数はサブチームの数で決まる。
そしてソフトウェア開発が組織によって行われる以上、ある程度の慣性/負債は避けがたい。
また人間の習性がもつバイアスからくる歪みもある。
組織はチームやプロセスをデザインするとき、その影響を自覚すべきである&#8230;と、Feathers による講演の骨子はそんなところ。</p>

<p>結論だけ聞くとどうってことないけれど、話の細部は面白い。
Feathers は組織やプロセスがうみだすソフトウェアの影響をコードやレポジトリから観測できると考えており、様々な調査を紹介している。
レガシーコードとの戦いの果てに人は統計的アプローチや実証的(Empirical)ソフトウェア工学にたどり着くのだなあ。
<a href="http://www.infoq.com/presentations/Software-Naturalism-Embracing-the-Real-Behind-the-Ideal">別の講演</a> を見た感じだと、
オライリーの &#8221;<a href="http://www.amazon.co.jp/Making-Software-%E2%80%95%E3%82%A8%E3%83%93%E3%83%87%E3%83%B3%E3%82%B9%E3%81%8C%E5%A4%89%E3%81%88%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-Andy-Oram/dp/4873115116%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115116">Making Software </a>&#8221; には影響されている様子。
積読してある・・・。そのほかアジャイル/反復的な開発がソフトウェアのデザインにもたらす綻びの話なども面白かった。</p>

<p>フリーランスになったあと、最近では
&#8221;<a href="http://skillsmatter.com/podcast/agile-testing/the-design-principle-that-sneaks-through">The Design Principle that sneaks through your code, your system, and your life</a>&#8221;
という講演をしている。
今度は Postel&#8217;s Law (のような考え方)がソフトウェアのデザインに与えている影響を論じている。これはいまいちピンとこなかった。
もうちょっとアイデアが整理されるのを待ちたい。</p>

<p>Feathers の話をすると長くなるのは私が彼のファンすぎるせいなので見逃してください・・・。</p>

<h3>Kent Beck</h3>

<p>さて Feathers 以外で西海岸デビューしたアジャイル業界人といえば Kent Beck。 いつの間にか Facebook にいた。
ぜひ Uncle Bob のかわりに Move fast and break things 世代の TDD についてスタートアップのやつらにガツンと言ってほしい・・・と期待しつつ
最近書いたものを眺めていると <a href="https://www.facebook.com/notes/kent-beck/shorts-not-always-sweet-the-case-for-long-test-names/564493423583526">単体テストの関数名</a>
なんて話をしている。盤石の安定感。どこにいても Kent Beck は Kent Beck なのだなあ。</p>

<p>これ以外にもそこそこな数の <a href="https://www.facebook.com/kentlbeck/notes">notes</a> が公開されている。ちゃんと Facebook を使っていてエラい。
<a href="https://www.facebook.com/notes/kent-beck/crossing-the-beams-reassurance-testing/489563101076559">PHP も書いてる</a>・・・</p>

<p><a href="http://www.amazon.co.jp/%E3%83%86%E3%82%B9%E3%83%88%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E3%82%B1%E3%83%B3%E3%83%88-%E3%83%99%E3%83%83%E3%82%AF/dp/4894717115%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4894717115"><img class="asin" src="http://ecx.images-amazon.com/images/I/51G6YEDVRKL.jpg" title="テスト駆動開発入門" /></a></p>

<h2><a href="http://www.infoq.com/interviews/Technology-Influences-DDD">Eric Evans on How Technology Influences DDD</a></h2>

<p>最後は Eric Evans. けっこう InfoQ に登場している。
ちょっと前のやつだと
&#8221;<a href="http://www.infoq.com/interviews/eric-evans-brian-foote-design-discussion">Eric Evans and Brian Foote discuss the state of Software Design</a>&#8221; という対談が面白い。
対談相手の Brian Foote は &#8221;<a href="http://www.laputan.org/mud/">Big Ball of Mud</a>&#8221; というダメなコードに関する論考で知られるおっさんで、
理想主義者(だと私がおもっている)の Eric Evans と話すことあるんかな・・・
と思っていたがそれなりに盛り上がっていた。レガシーコードと DDD ってのは面白いテーマなのかもしらん。Anti-Corruption Layer について長々と話している。</p>

<p>ところで Anti-Corruption Layer, 訳語では &#8220;腐敗防止層&#8221; だけど、英語のままの方がなんとなく Absolute Terror Field みたいでかっこいい。
A.C レイヤーと呼びたい。やたらとラッパーを書きたがるプログラマがいたら &#8220;A.C レイヤーは心の壁なんだよ&#8221; とか諭すわけです。まあどうでもいい。
そもそも A.C レイヤーは別にアンチパターンじゃないしね・・・。</p>

<p><a href="http://www.amazon.co.jp/%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A8%E3%83%B4%E3%82%A1%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E8%A8%AD%E8%A8%88-IT-Architects%E2%80%99Archive-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%AE%9F%E8%B7%B5-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A8%E3%83%B4%E3%82%A1%E3%83%B3%E3%82%B9/dp/4798121967%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798121967"><img class="asin" src="http://ecx.images-amazon.com/images/I/51f7WXHJYCL.jpg" title="エリック・エヴァンスのドメイン駆動設計 (IT Architects’Archive ソフトウェア開発の実践)" /></a></p>

<p>話がそれた。最近だと &#8221;<a href="http://www.infoq.com/interviews/Technology-Influences-DDD">Eric Evans on How Technology Influences DDD</a>&#8221; という
インタビューが公開されている。こちらはいまいち歯切れが悪かった。けれどその歯切れの悪さが印象的でもあった。</p>

<p>新しいテクノロジーの登場によって DDD はどう変わるのか？
基本は変わらないと Evans はいう。ドメインの専門家と話し合い、モデルを練り上げていく。
その成熟の果てに生まれるパターンは今より進化したものになるだろう。でも核にあるのは Ubiquitous Languages なんだ。</p>

<p>Evans のそんな答えをよそに、インタビュアは次々と言葉をあびせる。NoSQL はどうおもう？
ブラウザベースのアプリは？リアルタイムデータ、SOA、関数型言語、インメモリデータベースと DDD はどう関係する？
質問への答えはいまいちピリっとしない。人々が新しいテクノロジーを使うのに手一杯な昨今、
抽象的なデザインはまだ深く議論できないのかもしれない。
一方でこうした変化についていかないと、デザインの議論が再燃したとき舞台に立つことが出来ない。
おっさんはどうすればいいんだろうな・・・Eric Evans の煮え切らなさに自らの不安を重ねてしまう。</p>

<p>インタビューの最後に「最近影響をうけたものは何か」と問われ、
Evans はこう答えている: かつて人々は「パターン」「契約による設計」などアイデアに名前をつけて論じたけれど、
このごろの新しいアイデアはフレームワークやプログラミング言語、データベースエンジンなどを通じて表現されるようになった。
今は<em>書籍ではなく実装が思想を表現する手段になっている</em>。だからそういうのに気をつけてみるようにしているよ。</p>

<p>これは的をいた指摘だとおもう。そして Evans 自身がどことなく所在なさげな理由もわかる。
Eric Evans は本で思想を語り名声を得た。だからコードが強い今の世界では心細さがあるのだろう。
コードより日本語優勢な半端プログラマの私も同じ不安がある。
むしろその不安が Evans に対する私の視線に影を落としているのかもしれない。
これが <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">Software Is Eating The World</a> な時代の帰結だとしたら胃が痛い。</p>

<p>このインタビューと対になっている講演 &#8221;<a href="http://www.infoq.com/presentations/CAP-DDD">Acknowledging CAP at the Root &#8211; in the Domain Model</a>&#8221; は
新しい世代のデザインを議論しようとしており、Evans のがんばりに励まされた。</p>

<h2>まとめ</h2>

<ul>
<li>Neal Ford は &#8221;<a href="http://www.amazon.co.jp/Presentation-Patterns-Techniques-Crafting-Presentations/dp/0321820800%3FSubscriptionId%3DAKIAJLKJADTUVPPTFSNA%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321820800">Presentation Patterns </a>&#8221; を書いていた</li>
<li>Martin Fowler は NoSQL ファンになっていた</li>
<li>Uncle Bob は Hacker News で叩かれていた</li>
<li>Michael Feathers は実証的ソフトウェア工学に目覚めていた</li>
<li>Kent Beck は Facebook で PHP を書いてるっぽい</li>
<li>Eric Evans は将来が不安(な気がする)</li>
<li><p>Amazon プラグインを書いたため書影多めでアフィリエイトあり。</p></li>
<li><p>写真: <a href="http://www.flickr.com/photos/adewale_oshineye/423039025/">http://www.flickr.com/photos/adewale_oshineye/423039025/</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[瞬くあいだに時はながれて]]></title>
    <link href="http://steps.dodgson.org/b/2013/04/03/goodbye/"/>
    <updated>2013-04-03T19:56:00-07:00</updated>
    <id>http://steps.dodgson.org/b/2013/04/03/goodbye/</id>
    <content type="html"><![CDATA[<p><img src="http://farm1.staticflickr.com/37/119593660_71528eadca_z.jpg" alt="cover" /></p>

<p><a href="http://trac.webkit.org/changeset/52388">最初のバグ修正</a> をレビューしてくれたのはたぶん、Apple の Darin Adler だったと思う。雑誌連載のねたづくりに書いたパッチだった。このあとも Darin Adler には度々レビューをしてもらった。私にとって、Bugzilla 界隈でのメンターはこのひとだ。あるとき <code>ASSERT_NO_EXCEPTION</code>  という小粋なマクロを私が<a href="http://trac.webkit.org/changeset/90911">発明した</a>際も、彼は私にかわりメーリングリストで<a href="http://markmail.org/thread/akz2cmwch4meueda">宣伝をしてくれた</a>。何かをわかりあえたと思った。</p>

<p><a href="https://bugs.webkit.org/show_bug.cgi?id=34880">最初のリグレッションとその修正</a>は 6 つ目と 7 つ目のパッチで&#8230;仕事にする前からエンバグしてたわけですが&#8230; KDE の Nicholas Zimmerman が見てくれた。彼はそのあと BlackBerry の会社に入ったと聞いたけど、最近は姿をみない。当時の SVG は無法地帯で、やんちゃなパッチもけっこう見逃してもらえた。Zimmerman, KSVG からの upstream をやり切ったときはまだ高校生だったらしい。すごいハッカーもいるもんだ。いま何してるのかな。</p>

<p><code>ASSET_NO_EXCEPTION</code> はさておき、もう少し役にたったとおもわれる仕事はテストのスクリプトからライブラリの内部にアクセスする API <a href="http://trac.webkit.org/browser/trunk/Source/WebCore/testing/Internals.idl">window.intenrals</a> の追加。これは<a href="http://trac.webkit.org/wiki/April%202011%20Meeting">二回目の Contributors Meeting</a> で必要性を売り込んだ力作。といっても、実はもたもたしてたら最終的なコードは<a href="https://lists.webkit.org/pipermail/webkit-dev/2011-June/016935.html">同僚が書いてくれちゃったんだけど</a>。最近は <a href="http://markmail.org/thread/zu467z2lw26m34t7">濫用するな</a> と怒る人がでるくらいにはよく使われており満足。こんな当たり前の改善をする余地がある、そのことに当時は驚いていた。</p>

<p>もっと趣味色の強い仕事としては、手動で管理されていたリンカ用のシンボルリストをコード内の属性(メタデータ)に書き換える<a href="http://trac.webkit.org/changeset/106606">パッチなんてのも書いた</a>。更新忘れのせいでしょっちゅうビルドを壊すその不愉快なリストをなんとかしたかった。最初は wxWidget port のメンテナ Kevin Ollivier が<a href="http://markmail.org/thread/dhnqewjeopfk74jp">頑張って直そうとしていた</a>ものの、目視頼みの作業は難航していた。なんとか自動化できないかと思い立った私は <a href="https://github.com/omo/ListExportables">Clang のプラグインと Python で</a> 書き換えツールをつくって手を貸した。Clang のプラグインを書きたかっただけだろといわれればその通りで、たぶんヒマだったんだな。</p>

<p>このあそび、プラグイン自体は一日二日で書けたもののビルドシステムの修正なんかに大変時間がかかり、楽しみの代償を学んだのだった。結局のところ駆逐できたシンボルファイルは一部だけで、大きいのは残ったまま。Kevin Ollivier が旅行で東京にきたとき、彼とは一度ごはんをたべた。この余暇オープンソースプログラマがどんな人かを知った。</p>

<p>そのほか tDiary が 3 タブなのは酷いと憤り CSS の tab-size プロパティを<a href="http://trac.webkit.org/changeset/116723">実装してみたり</a>もした。ぜんぜんレビューされなくて、コードを書いてからチェックインまで一年以上かかった。もっとも私のやるきもぜんぜんだったからレビュアのせいばかりにはできない。私はその間に Octopress に乗り換えてしまった。レビューしてくれたのは Netscape の末裔にして CSS の達人である Simon Fraser。</p>

<p>枚挙はつづく。本業でない仕事ほどよく覚えている。仕事と呼ぶのも気が引ける。ただ戯れていただけだ。<a href="http://blog.chromium.org/2013/04/blink-rendering-engine-for-chromium.html">例の新しい仕事場</a>は、そろそろ真面目に働けと私を急かすだろう。</p>

<p>それはいつかおこる運命だったと私には思える。でもまあ、寂しい。このプロジェクト、けっこう好きだったからなあ。いろいろお世話になりました。ありがとう。迷惑かけてごめん。でも少しはいいこともしたよね。これからもお互いうまくやれるよね。瞬くあいだに時はながれて、昔話にできるよね。</p>

<p><img src="http://farm1.staticflickr.com/46/141357725_2f07cfa004_z.jpg" alt="cover" /></p>

<hr />

<ul>
<li><a href="http://www.flickr.com/photos/zrahen/119593660/">http://www.flickr.com/photos/zrahen/119593660/</a></li>
<li><a href="http://www.flickr.com/photos/mcinteractivity/7068430217/">http://www.flickr.com/photos/mcinteractivity/7068430217/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
